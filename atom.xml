<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FinGet</title>
  
  <subtitle>前端 —— 我一直在路上</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-05T08:13:43.821Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>FinGet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>长期维护更新，前端面试题</title>
    <link href="http://yoursite.com/2019/01/15/interview-questions/"/>
    <id>http://yoursite.com/2019/01/15/interview-questions/</id>
    <published>2019-01-15T02:27:26.000Z</published>
    <updated>2019-05-05T08:13:43.821Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>网上找到的各种面试题整理，长期更新。大部分答案整理来自网络，有问题的地方，希望大家能指出，及时修改;技术更新迭代，也会及时更新</p></blockquote><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="前端性能优化"><a href="#前端性能优化" class="headerlink" title="前端性能优化"></a>前端性能优化</h3><p>1.清理 HTML 文档</p><p>HTML，即超文本标记语言，几乎是所有网站的支柱。HTML 为网页带来标题、子标题、列表和其它一些文档结构的格式。在最近更新的 HTML5 中，甚至可以创建图表。</p><p>HTML 很容易被网络爬虫识别，因此搜索引擎可以根据网站的内容在一定程度上实时更新。在写 HTML 的时候，你应该尝试让它<strong>简洁而有效</strong>。此外，在 HTML 文档中引用外部资源的时候也需要遵循一些最佳实践方法。</p><p>a.恰当放置 CSS</p><p>Web 设计者喜欢在网页建立起主要的 HTML 骨架之后再来创建样式表。这样一来，网页中的样式表往往会放在 HTML 的后面，接近文档结束的地方。然而推荐的做法是把 CSS 放在 HTML 的上面部分，文档头之内，这可以确保正常的渲染过程。</p><p>这个策略不能提高网站的加载速度，但它不会让访问者长时间看着空白屏幕或者无格式的文本（FOUT）等待。如果网页大部分可见元素已经加载出来了，访问者才更有可能等待加载整个页面，从而带来对前端的优化效果。这就是知觉性能</p><p>b.正确放置 Javascript</p><p>另一方面，如果将 JavaScript 放置在 head 标签内或 HTML 文档的上部，这会阻塞 HTML 和 CSS 元素的加载过程。这个错误会导致页面加载时间增长，增加用户等待时间，容易让人感到不耐烦而放弃对网站的访问。不过，您可以通过将 JavaScript 属性置于 HTML 底部来避免此问题。</p><p>此外，在使用 JavaScript 时，人们通常喜欢用异步脚本加载。这会阻止<code>&lt;script&gt;</code>标签在 HTML 中的呈现过程，如，在文档中间的情况。</p><p>虽然对于网页设计师来说， HTML 是最值得使用的工具之一，但它通常要与 CSS 和 JavaScript 一起使用，这可能会导致网页浏览速度减慢。 虽然 CSS 和 JavaScript 有利于网页优化，但使用时也要注意一些问题。使用 CSS 和 JavaScript 时，要避免嵌入代码。因为当您嵌入代码时，要将 CSS 放置在样式标记中，并在脚本标记中使用 JavaScript，这会增加每次刷新网页时必须加载的 HTML 代码量。</p><p>2.优化 CSS 性能</p><p>CSS，即级联样式表，能从 HTML 描述的内容生成专业而又整洁的文件。很多 CSS 需要通过 HTTP 请求来引入（除非使用内联 CSS），所以你要努力去除累赘的 CSS 文件，但要注意保留其重要特征。</p><p>如果你的 Banner、插件和布局样式是使用 CSS 保存在不同的文件内，那么，访问者的浏览器每次访问都会加载很多文件。虽然现在 HTTP/2 的存在，减少了这种问题的发生，但是在外部资源加载的情况下，仍会花费较长时间。要了解如何减少 HTTP 请求以大幅度缩减加载时间，请阅读WordPress 性能。</p><p>此外，不少网站管理员在网页中错误的使用 @import 指令 来引入外部样式表。这是一个过时的方法，它会阻止浏览并行下载。link 标签才是最好的选择，它也能提高网站的前端性能。多说一句，通过 link 标签请求加载的外部样式表不会阻止并行下载。</p><p>3.减少外部HTTP请求</p><p>在很多情况下，网站的大部分加载时间来自于外部的 Http 请求。外部资源的加载速度随着主机提供商的服务器架构、地点等不同而不同。减少外部请求要做的第一步就是简略地检查网站。研究你网站的每个组成部分，消除任何影响访问者体验不好的成分。这些成分可能是：</p><ul><li>不必要的图片</li><li>没用的 JavaScript 代码</li><li>过多的 css</li><li>多余的插件</li></ul><p>在你去掉这些多余的成分之后，再对剩下的内容进行整理，如，压缩工具、CDN 服务和预获取（prefetching）等，这些都是管理 HTTP 请求的最佳选择。除此之外，减少DNS路由查找教程会教你如何一步一步的减少外部 HTTP 请求。</p><p>4.压缩 CSS, JS 和 HTML</p><p><img src="http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3UNftib8XgxWpX2FDbuB9GexpRmSmjxIHtg3hvIFQn9BbnViboDRKjpVbxmXZgkmqJj1vJ9icaeZ2Hg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt></p><p>压缩技术可以从文件中去掉多余的字符。你在编辑器中写代码的时候，会使用缩进和注释，这些方法无疑会让你的代码简洁而且易读，但它们也会在文档中添加多余的字节。</p><ol start="5"><li>使用预先获取</li></ol><p><img src="http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3UNftib8XgxWpX2FDbuB9Ge29ylcHVcXvfxYHdibCrVZ05jGvHMZvdW1Libgbx79KgXztfj9h3mtMicg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt></p><p>预先获取可以在真正需要之前通过取得必需的资源和相关数据来改善访问用户的浏览体验，主要有3类预先获取:</p><ul><li>链接预先获取</li><li>DNS 预先获取</li><li>预先渲染</li></ul><p>在你离开当前 web 页面之前，使用预先获取方式，对应每个链接的 URL 地址，CSS，图片和脚本都会被预先获取。这保证了访问者能在最短时间内使用链接在画面间切换。</p><p>幸运的是，预先获取很容易实现。根据你想要使用的预先获取形式，你只需在网站 HTML 中的链接属性上增加 rel=”prefetch”,rel=”dns-prefetch”，或者 rel=”prerender” 标记。</p><p>6.使用 CDN 和缓存提高速度</p><p>内容分发网络能显著提高网站的速度和性能。使用 CDN 时，您可以将网站的静态内容链接到全球各地的服务器扩展网络。如果您的网站观众遍布全球，这项功能十分有用。 CDN 允许您的网站访问者从最近的服务器加载数据。如果您使用 CDN，您网站内的文件将自动压缩，以便在全球范围内快速分发。</p><p><img src="http://mmbiz.qpic.cn/mmbiz_png/zPh0erYjkib3UNftib8XgxWpX2FDbuB9GeiazJpyUZpibawkNVOiaVPwibnpQLEr6xaL40VXKCJrehy7xupic3OysbAAg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt></p><p>CDN 是一种缓存方法，可极大改善资源的分发时间，同时，它还能实现一些其他的缓存技术，如，利用浏览器缓存。</p><p>合理地设置浏览器缓存，能让浏览器自动存储某些文件，以便加快传输速度。此方法的配置可以直接在源服务器的配置文件中完成。</p><p>7.压缩文件</p><p>虽然许多 CDN 服务可以压缩文件，但如果不使用 CDN，您也可以考虑在源服务器上使用文件压缩方法来改进前端优化。 文件压缩能使网站的内容轻量化，更易于管理。 最常用的文件压缩方法之一是 Gzip。 这是缩小文档、音频文件、PNG图像和等其他大文件的绝佳方法。</p><p>Brotli 是一个比较新的文件压缩算法，目前正变得越来越受欢迎。 此开放源代码算法由来自 Google 和其他组织的软件工程师定期更新，现已被证明比其他现有压缩方法更好用。 这种算法的支持目前还比较少，但作为后起之秀指日可待。</p><p>8.使用轻量级框架</p><p>除非你只用现有的编码知识构建网站，不然，你可以尝试使用一个好的前端框架来避免许多不必要的前端优化错误。虽然有一些更大，更知名的框架能提供更多功能和选项，但它们不一定适合你的 Web 项目。</p><p>所以说，不仅确定项目所需功能很重要，选择合适的框架也很重要——它要在提供所需功能的同时保持轻量。最近许多框架都使用简洁的 HTML，CSS 和 JavaScript 代码。</p><h3 id="一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？"><a href="#一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？" class="headerlink" title="一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？"></a>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</h3><p>参考链接：<br><a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="noopener">详细解读https://segmentfault.com/a/1190000006879700</a><br><a href="https://mp.weixin.qq.com/s/jjL4iA7p6aYEAQyWhn4QbQ" target="_blank" rel="noopener">详细解读https://mp.weixin.qq.com/s/jjL4iA7p6aYEAQyWhn4QbQ</a></p><p>输入地址<br>1.浏览器查找域名的 IP 地址<br>2.这一步包括 DNS 具体的查找过程，包括：浏览器缓存-&gt;系统缓存-&gt;路由器缓存…<br>3.浏览器向 web 服务器发送一个 HTTP 请求<br>4.服务器的永久重定向响应（从 <a href="http://example.com" target="_blank" rel="noopener">http://example.com</a> 到 <a href="http://www.example.com）" target="_blank" rel="noopener">http://www.example.com）</a><br>5.浏览器跟踪重定向地址<br>6.服务器处理请求<br>7.服务器返回一个 HTTP 响应<br>8.浏览器显示 HTML<br>9.浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）<br>10.浏览器发送异步请求</p><h3 id="URL-到底是啥"><a href="#URL-到底是啥" class="headerlink" title="URL 到底是啥"></a>URL 到底是啥</h3><p>URL（Uniform Resource Locator），统一资源定位符，用于定位互联网上资源，俗称网址。<br>比如 <a href="http://www.w3school.com.cn/html/index.asp，遵守以下的语法规则：" target="_blank" rel="noopener">http://www.w3school.com.cn/html/index.asp，遵守以下的语法规则：</a></p><p><code>scheme://host.domain:port/path/filename</code><br>各部分解释如下：<br>scheme - 定义因特网服务的类型。常见的协议有 http、https、ftp、file，其中最常见的类型是 http，而 https 则是进行加密的网络传输。<br>host - 定义域主机（http 的默认主机是 www）<br>domain - 定义因特网域名，比如 w3school.com.cn<br>port - 定义主机上的端口号（http 的默认端口号是 80）<br>path - 定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）。<br>filename - 定义文档/资源的名称</p><h3 id="讲tcp-ip网络层、三次握手，为什么不能两次握手"><a href="#讲tcp-ip网络层、三次握手，为什么不能两次握手" class="headerlink" title="讲tcp/ip网络层、三次握手，为什么不能两次握手"></a>讲tcp/ip网络层、三次握手，为什么不能两次握手</h3><blockquote><p>客服端和服务端在进行http请求和返回的工程中，需要创建一个TCP connection（由客户端发起）,http不存在连接这个概念，它只有请求和响应。请求和响应都是数据包，它们之间的传输通道就是TCP connection。</p></blockquote><p><img src="https://i.imgur.com/sPsrDR1.png" alt></p><p>位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)</p><p>第一次握手：主机A发送位码为syn＝1，随机产生seq  number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；（第一次握手，由浏览器发起，告诉服务器我要发送请求了）</p><p>第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包；（第二次握手，由服务器发起，告诉浏览器我准备接受了，你赶紧发送吧）</p><p>第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功；（第三次握手，由浏览器发送，告诉服务器，我马上就发了，准备接受吧）</p><blockquote><p>谢希仁著《计算机网络》中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p></blockquote><p>这种情况是：一端(client)A发出去的第一个连接请求报文并没有丢失，而是因为某些未知的原因在某个网络节点上发生滞留，导致延迟到连接释放以后的某个时间才到达另一端(server)B。本来这是一个早已失效的报文段，但是B收到此失效的报文之后，会误认为是A再次发出的一个新的连接请求，于是B端就向A又发出确认报文，表示同意建立连接。如果不采用“三次握手”，那么只要B端发出确认报文就会认为新的连接已经建立了，但是A端并没有发出建立连接的请求，因此不会去向B端发送数据，B端没有收到数据就会一直等待，这样B端就会白白浪费掉很多资源。如果采用“三次握手”的话就不会出现这种情况，B端收到一个过时失效的报文段之后，向A端发出确认，此时A并没有要求建立连接，所以就不会向B端发送确认，这个时候B端也能够知道连接没有建立。</p><p>问题的本质是，信道是不可靠的，但是我们要建立可靠的连接发送可靠的数据，也就是数据传输是需要可靠的。在这个时候三次握手是一个理论上的最小值，并不是说是tcp协议要求的，而是为了满足在不可靠的信道上传输可靠的数据所要求的。</p><p>这个网上转载的例子不错：</p><p>三次握手：<br>A:“喂，你听得到吗？”A-&gt;SYN_SEND<br>B:“我听得到呀，你听得到我吗？”应答与请求同时发出 B-&gt;SYN_RCVD | A-&gt;ESTABLISHED<br>A:“我能听到你，今天balabala……”B-&gt;ESTABLISHED</p><p>四次挥手：<br>A:“喂，我不说了。”A-&gt;FIN_WAIT1<br>B:“我知道了。等下，上一句还没说完。Balabala…..”B-&gt;CLOSE_WAIT | A-&gt;FIN_WAIT2<br>B:”好了，说完了，我也不说了。”B-&gt;LAST_ACK<br>A:”我知道了。”A-&gt;TIME_WAIT | B-&gt;CLOSED<br>A等待2MSL,保证B收到了消息,否则重说一次”我知道了”,A-&gt;CLOSE</p><h3 id="iframe有那些缺点？"><a href="#iframe有那些缺点？" class="headerlink" title="iframe有那些缺点？"></a>iframe有那些缺点？</h3><ol><li>iframe会阻塞主页面的Onload事件；</li><li>搜索引擎的检索程序无法解读这种页面，不利于SEO;</li><li>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</li><li>使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript动态给iframe添加src属性值，这样可以绕开以上两个问题</li></ol><h3 id="websocket握手过程"><a href="#websocket握手过程" class="headerlink" title="websocket握手过程"></a>websocket握手过程</h3><p>在实现websocket连线过程中，需要通过浏览器发出websocket连线请求，然后服务器发出回应，这个过程通常称为“握手” (handshaking)。</p><p>客户端请求web socket连接时，会向服务器端发送握手请求<br><img src="https://i.imgur.com/zg78OfZ.png" alt></p><p>请求头大致内容:<br><img src="https://i.imgur.com/NynFLnS.png" alt></p><blockquote><p>请求包说明： </p><ul><li>必须是有效的http request 格式； </li><li>HTTP request method 必须是GET，协议应不小于1.1 如： Get / HTTP/1.1； </li><li>必须包括Upgrade头域，并且其值为”websocket”; </li><li>必须包括”Connection” 头域，并且其值为”Upgrade”; </li><li>必须包括”Sec-WebSocket-Key”头域，其值采用base64编码的随机16字节长的字符序列; </li><li>如果请求来自浏览器客户端，还必须包括Origin头域 。 该头域用于防止未授权的跨域脚本攻击，服务器可以从Origin决定是否接受该WebSocket连接; </li><li>必须包括”Sec-webSocket-Version” 头域，当前值必须是13; </li><li>可能包括”Sec-WebSocket-Protocol”，表示client（应用程序）支持的协议列表，server选择一个或者没有可接受的协议响应之; </li><li>可能包括”Sec-WebSocket-Extensions”， 协议扩展， 某类协议可能支持多个扩展，通过它可以实现协议增强; </li><li>可能包括任意其他域，如cookie.</li></ul></blockquote><p>服务端响应如下:<br><img src="https://i.imgur.com/NTswA2X.png" alt></p><blockquote><p>应答包说明：<br><em>必须包括Upgrade头域，并且其值为”websocket”; </em>必须包括Connection头域，并且其值为”Upgrade”;<br><em>必须包括Sec-WebSocket-Accept头域，其值是将请求包“Sec-WebSocket-Key”的值，与”258EAFA5-E914-47DA-95CA-C5AB0DC85B11″这个字符串进行拼接，然后对拼接后的字符串进行sha-1运算，再进行base64编码，就是“Sec-WebSocket-Accept”的值； </em>应答包中冒号后面有一个空格；<br>*最后需要两个空行作为应答包结束</p></blockquote><p>参考链接：<br><a href="https://yq.aliyun.com/articles/229594" target="_blank" rel="noopener">Websocket协议之握手连接</a></p><h3 id="跨域以及解决办法"><a href="#跨域以及解决办法" class="headerlink" title="跨域以及解决办法"></a>跨域以及解决办法</h3><ul><li><p>同源<br>符合”协议+域名+端口”三者相同，就是同源</p></li><li><p>同源策略<br>同源策略，其初衷是为了浏览器的安全性，通过以下三种限制，保证浏览器不易受到XSS、CSFR等攻击。</p><ul><li>Cookie、LocalStorage 和 IndexDB 无法读取</li><li>DOM 和 Js对象无法获得</li><li>AJAX 请求不能发送</li></ul></li><li><p>跨域解决方案</p><ul><li>通过jsonp跨域</li><li>document.domain + iframe跨域</li><li>location.hash + iframe</li><li>window.name + iframe跨域</li><li>postMessage跨域</li><li>跨域资源共享（CORS）</li><li>nginx代理跨域</li><li>nodejs中间件代理跨域</li><li>WebSocket协议跨域</li></ul></li></ul><h3 id="前端持久化的方式、区别"><a href="#前端持久化的方式、区别" class="headerlink" title="前端持久化的方式、区别"></a>前端持久化的方式、区别</h3><p>最容易想到的解决方案是：</p><p>1.使用前端cookie技术来保存本地化数据，如jquery.cookie.js；<br>2.使用html5提供的Web Storage技术来提供解决方案；</p><p>用cookie存储永久数据存在以下几个问题：<br>1.大小：cookie的大小被限制在4KB。<br>2.带宽：cookie是随HTTP事务一起被发送的，因此会浪费一部分发送cookie时使用的带宽。<br>3.复杂性：要正确的操纵cookie是很困难的。</p><p>针对这些问题，在HTML5中，重新提供了一种在客户端本地保存数据的功能，它就是Web Storage。<br>具体来说，Web Storage又分为两种：<br>1.sessionStorage：将数据保存在session对象中。所谓session，是指用户在浏览某个网站时，从进入网站到浏览器关闭所经过的这段时间，也就是用户浏览这个网站所花费的时间。session对象可以用来保存在这段时间内所要求保存的任何数据。<br>2.localStorage：将数据保存在客户端本地的硬件设备(通常指硬盘，也可以是其他硬件设备)中，即使浏览器被关闭了，该数据仍然存在，下次打开浏览器访问网站时仍然可以继续使用。</p><p>这两者的区别在于，sessionStorage为临时保存，而localStorage为永久保存。</p><p><a href="http://www.cnblogs.com/DevinnZ/p/6752574.html" target="_blank" rel="noopener">前端持久化–evercookie</a></p><h3 id="介绍http2-0"><a href="#介绍http2-0" class="headerlink" title="介绍http2.0"></a>介绍http2.0</h3><ul><li>所有数据以二进制传输。HTTP1.x是基于文本的，无法保证健壮性，HTTP2.0绝对使用新的二进制格式，方便且健壮</li><li>同一个连接里面发送多个请求不再需要按照顺序来</li><li>头信息压缩以及推送等提高效率的功能</li></ul><p><a href="https://www.jdon.com/dl/http2.html" target="_blank" rel="noopener">Http 2.0协议简介</a><br><a href="http://www.513bk.com/xdjq/1159147.html#top" target="_blank" rel="noopener">HTTP 2.0 详细介绍，http2.0详细介绍</a><br><a href="https://www.zhihu.com/question/34074946" target="_blank" rel="noopener">HTTP/2.0 相比1.0有哪些重大改进</a></p><h3 id="通过什么做到并发请求"><a href="#通过什么做到并发请求" class="headerlink" title="通过什么做到并发请求"></a>通过什么做到并发请求</h3><p>我能想到的只有<code>Promise.all()</code>,欢迎补充</p><h3 id="b和strong的区别"><a href="#b和strong的区别" class="headerlink" title="b和strong的区别"></a>b和strong的区别</h3><p><code>&lt;b&gt;</code> 粗体文本，<code>&lt;strong&gt;</code> 用于强调文本,他们的样式是一样的<br>有一种说法，是<code>&lt;strong&gt;</code>貌似在盲人用的机器上会读两遍。因为没有对应的测试条件，所以没做验证。</p><h3 id="Access-Control-Allow-Origin在服务端哪里配置"><a href="#Access-Control-Allow-Origin在服务端哪里配置" class="headerlink" title="Access-Control-Allow-Origin在服务端哪里配置"></a>Access-Control-Allow-Origin在服务端哪里配置</h3><p><code>header(&#39;Access-Control-Allow-Origin:*&#39;);</code></p><h3 id="csrf跨站攻击怎么解决"><a href="#csrf跨站攻击怎么解决" class="headerlink" title="csrf跨站攻击怎么解决"></a>csrf跨站攻击怎么解决</h3><p>CSRF，全称为Cross-Site Request Forgery，跨站请求伪造，是一种网络攻击方式，它可以在用户毫不知情的情况下，以用户的名义伪造请求发送给被攻击站点，从而在未授权的情况下进行权限保护内的操作。</p><p>具体来讲，可以这样理解CSRF。攻击者借用用户的名义，向某一服务器发送恶意请求，对服务器来讲，这一请求是完全合法的，但攻击者确完成了一个恶意操作，比如以用户的名义发送邮件，盗取账号，购买商品等等</p><p>一般网站防御CSRF攻击的方案:<br>(1)验证token值。<br>(2)验证HTTP头的Referer。<br>(3)在HTTP头中自定义属性并验证<br>(4)服务器端表单hash认证<br>在所有的表单里面随机生成一个hash，server在表单处理时去验证这个hash值是否正确，这样工作量比较大</p><p><a href="https://www.cnblogs.com/xinaixia/p/5852379.html" target="_blank" rel="noopener">CSRF(跨站请求伪造攻击)漏洞详解</a></p><hr><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="清除浮动的方式"><a href="#清除浮动的方式" class="headerlink" title="清除浮动的方式"></a>清除浮动的方式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 第一种</span><br><span class="line"><span class="selector-class">.ovh</span>&#123;</span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line">// 第二种</span><br><span class="line"><span class="selector-class">.clear</span>&#123;</span><br><span class="line">  <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line">// 第三种</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123; </span><br><span class="line">　content:"";//设置内容为空</span><br><span class="line">　height:0;//高度为0</span><br><span class="line">　line-height:0;//行高为0</span><br><span class="line">　display:block;//将文本转为块级元素</span><br><span class="line">　visibility:hidden;//将元素隐藏</span><br><span class="line">　clear:both//清除浮动</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">　zoom:1;为了兼容IE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://segmentfault.com/l/1500000012666812" target="_blank" rel="noopener">免费公开课带你彻底掌握 CSS 浮动</a></p><blockquote><p>当给父元素设置”overflow:hidden”时，实际上创建了一个超级属性BFC，此超级属性反过来决定了”height:auto”是如何计算的。在“BFC布局规则”中提到：计算BFC的高度时，浮动元素也参与计算。因此，父元素在计算其高度时，加入了浮动元素的高度，“顺便”达成了清除浮动的目标，所以父元素就包裹住了子元素。</p></blockquote><h3 id="BFC是什么"><a href="#BFC是什么" class="headerlink" title="BFC是什么"></a>BFC是什么</h3><p>BFC(Block Formatting Context),块级格式化上下文,是Web页面中盒模型布局的CSS渲染模式。它的定位体系属于常规文档流。</p><blockquote><p>浮动，绝对定位元素，inline-blocks, table-cells, table-captions,和overflow的值不为visible的元素，（除了这个值已经被传到了视口的时候）将创建一个新的块级格式化上下文。</p></blockquote><p>上面的引述几乎总结了一个BFC是怎样形成的。但是让我们以另一种方式来重新定义以便能更好的去理解。一个BFC是一个HTML盒子并且至少满足下列条件中的任何一个：</p><ul><li>float的值不为none</li><li>position的值不为static或者relative</li><li>display的值为 table-cell, table-caption, inline-block, flex, 或者 inline-flex中的其中一个</li><li>overflow的值不为visible</li></ul><p>参考链接：<br><a href="https://www.w3cplus.com/css/understanding-block-formatting-contexts-in-css.html" target="_blank" rel="noopener">理解CSS中BFC</a></p><h3 id="讲flex，手写出flex常用的属性，并且讲出作用"><a href="#讲flex，手写出flex常用的属性，并且讲出作用" class="headerlink" title="讲flex，手写出flex常用的属性，并且讲出作用"></a>讲flex，手写出flex常用的属性，并且讲出作用</h3><p>这个直接看 <a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">阮一峰:Flex 布局教程</a></p><h3 id="介绍css3中position-sticky"><a href="#介绍css3中position-sticky" class="headerlink" title="介绍css3中position:sticky"></a>介绍css3中position:sticky</h3><p>单词sticky的中文意思是“粘性的”，position:sticky表现也符合这个粘性的表现。基本上，可以看出是position:relative和position:fixed的结合体——当元素在屏幕内，表现为relative，就要滚出显示器屏幕的时候，表现为fixed。</p><p>详细讲解的还是看大神的吧，<a href="https://www.zhangxinxu.com/wordpress/2018/12/css-position-sticky/" target="_blank" rel="noopener">张鑫旭:position:sticky</a></p><hr><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="js三座大山"><a href="#js三座大山" class="headerlink" title="js三座大山"></a>js三座大山</h3><p>原型与原型链，作用域及闭包，异步和单线程。<br>三座大山，真不是一两句可以说清楚的，只有靠大家多看，多用，多理解，放点链接吧。</p><p><a href="https://finget.github.io/2018/09/13/proto/" target="_blank" rel="noopener">原型，原型链，call/apply</a><br><a href="https://finget.github.io/2018/05/10/javascript-prototype/" target="_blank" rel="noopener">JavaScript从初级往高级走系列————prototype</a><br><a href="https://finget.github.io/2018/05/21/async/" target="_blank" rel="noopener">JavaScript从初级往高级走系列————异步</a><br><a href="https://finget.github.io/2018/03/01/javascriptPrecompile/" target="_blank" rel="noopener">JavaScript的预编译过程</a><br><a href="https://yangbo5207.github.io/wutongluo/ji-chu-jin-jie-xi-lie/yi-3001-nei-cun-kong-jian-xiang-jie.html" target="_blank" rel="noopener">内存空间详解</a><br><a href="https://yangbo5207.github.io/wutongluo/ji-chu-jin-jie-xi-lie/si-3001-zuo-yong-yu-lian-yu-bi-bao.html" target="_blank" rel="noopener">作用域和闭包</a><br><a href="https://github.com/mqyqingfeng/Blog/issues/3" target="_blank" rel="noopener">JavaScript深入之词法作用域和动态作用域</a><br><a href="https://github.com/mqyqingfeng/Blog/issues/6" target="_blank" rel="noopener">JavaScript深入之作用域链</a><br><a href="https://yangbo5207.github.io/wutongluo/ji-chu-jin-jie-xi-lie/shi-er-3001-shi-jian-xun-huan-ji-zhi.html" target="_blank" rel="noopener">事件循环机制</a></p><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p>参考链接：<br><a href="https://mp.weixin.qq.com/s/OthfFRwf-rQmVbMnXAqnCg" target="_blank" rel="noopener">什么是闭包？https://mp.weixin.qq.com/s/OthfFRwf-rQmVbMnXAqnCg</a><br><a href="https://yangbo5207.github.io/wutongluo/ji-chu-jin-jie-xi-lie/si-3001-zuo-yong-yu-lian-yu-bi-bao.html" target="_blank" rel="noopener">作用域与闭包https://yangbo5207.github.io/wutongluo/ji-chu-jin-jie-xi-lie/si-3001-zuo-yong-yu-lian-yu-bi-bao.html</a></p><p>简言之，闭包是由函数引用其周边状态（词法环境）绑在一起形成的（封装）组合结构。在 JavaScript 中，闭包在每个函数被创建时形成。</p><p>这是基本原理，但为什么我们关心这些？实际上，由于闭包与它的词法环境绑在一起，因此闭包让我们能够从一个函数内部访问其外部函数的作用域。</p><p>要使用闭包，只需要简单地将一个函数定义在另一个函数内部，并将它暴露出来。要暴露一个函数，可以将它返回或者传给其他函数。</p><p>内部函数将能够访问到外部函数作用域中的变量，即使外部函数已经执行完毕。</p><p>在 JavaScript 中，闭包是用来实现数据私有的原生机制。当你使用闭包来实现数据私有时，被封装的变量只能在闭包容器函数作用域中使用。你无法绕过对象被授权的方法在外部访问这些数据。在 JavaScript 中，任何定义在闭包作用域下的公开方法才可以访问这些数据。</p><h3 id="宏任务-与-微任务"><a href="#宏任务-与-微任务" class="headerlink" title="宏任务 与 微任务"></a>宏任务 与 微任务</h3><p>参考链接：<br><a href="https://segmentfault.com/a/1190000012806637" target="_blank" rel="noopener">js引擎执行机制https://segmentfault.com/a/1190000012806637</a><br><a href="https://yangbo5207.github.io/wutongluo/ji-chu-jin-jie-xi-lie/shi-er-3001-shi-jian-xun-huan-ji-zhi.html" target="_blank" rel="noopener">事件循环机制</a></p><ul><li><p>一个线程中，事件循环是唯一的，但是任务队列可以拥有多个。</p></li><li><p>任务队列又分为macro-task（宏任务）与micro-task（微任务），在最新标准中，它们被分别称为task与jobs。</p></li><li><p>macro-task大概包括：script(整体代码), setTimeout, setInterval, setImmediate, I/O, UI rendering。</p></li><li><p>micro-task大概包括: process.nextTick, Promise, Object.observe(已废弃), MutationObserver(html5新特性)</p></li><li><p>setTimeout/Promise等我们称之为任务源。而进入任务队列的是他们指定的具体执行任务。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setTimeout中的回调函数才是进入任务队列的任务</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'xxxx'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 非常多的同学对于setTimeout的理解存在偏差。所以大概说一下误解：</span></span><br><span class="line"><span class="comment">// setTimeout作为一个任务分发器，这个函数会立即执行，而它所要分发的任务，也就是它的第一个参数，才是延迟执行</span></span><br></pre></td></tr></table></figure><ul><li><p>来自不同任务源的任务会进入到不同的任务队列。其中setTimeout与setInterval是同源的。</p></li><li><p><strong>事件循环的顺序，决定了JavaScript代码的执行顺序。它从script(整体代码)开始第一次循环。之后全局上下文进入函数调用栈。直到调用栈清空(只剩全局)，然后执行所有的micro-task。当所有可执行的micro-task执行完毕之后。循环再次从macro-task开始，找到其中一个任务队列执行完毕，然后再执行所有的micro-task，这样一直循环下去。</strong></p></li><li><p>其中每一个任务的执行，无论是macro-task还是micro-task，都是借助函数调用栈来完成。</p></li></ul><p><img src="https://i.imgur.com/otax4mX.png" alt></p><h3 id="promise里面和then里面执行有什么区别"><a href="#promise里面和then里面执行有什么区别" class="headerlink" title="promise里面和then里面执行有什么区别"></a>promise里面和then里面执行有什么区别</h3><p>promise里面的是宏任务，then后面的是微任务。</p><h3 id="JS为什么要区分微任务和宏任务"><a href="#JS为什么要区分微任务和宏任务" class="headerlink" title="JS为什么要区分微任务和宏任务"></a>JS为什么要区分微任务和宏任务</h3><p>这个问题本质就是为啥需要异步。如果js不是异步的话，由于js代码本身是自上而下执行的，那么如果上一行代码需要执行很久，下面的代码就会被阻塞，对用户来说，就是”卡死”，这样的话，会造成很差的用户体验。</p><h3 id="JavaScript-实现异步编程的4种方法"><a href="#JavaScript-实现异步编程的4种方法" class="headerlink" title="JavaScript 实现异步编程的4种方法"></a>JavaScript 实现异步编程的4种方法</h3><p>你可能知道，Javascript语言的执行环境是”单线程”（single thread）。</p><p>所谓”单线程”，就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。</p><p>这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。</p><p>为了解决这个问题，Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous）。</p><ul><li>回调函数</li></ul><p>假定有两个函数f1和f2，后者等待前者的执行结果。<br>如果f1是一个很耗时的任务，可以考虑改写f1，把f2写成f1的回调函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">　setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">　<span class="comment">// f1的任务代码</span></span><br><span class="line">　　callback();</span><br><span class="line">　&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>回调函数的优点是简单、容易理解和部署，缺点是不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。</p><ul><li>事件监听</li></ul><p>另一种思路是采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f1.on(<span class="string">'done'</span>, f2);</span><br></pre></td></tr></table></figure><p>上面这行代码的意思是，当f1发生done事件，就执行f2。然后，对f1进行改写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">　<span class="comment">// f1的任务代码</span></span><br><span class="line">　　f1.trigger(<span class="string">'done'</span>);</span><br><span class="line">　&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>发布订阅</li></ul><p>我们假定，存在一个”信号中心”，某个任务执行完成，就向信号中心”发布”（publish）一个信号，其他任务可以向信号中心”订阅”（subscribe）这个信号，从而知道什么时候自己可以开始执行。这就叫做”发布/订阅模式”（publish-subscribe pattern），又称”观察者模式”（observer pattern）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery.subscribe(<span class="string">"done"</span>, f2);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// f1的任务代码</span></span><br><span class="line">    jQuery.publish(<span class="string">"done"</span>);</span><br><span class="line">　&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Promise</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f1().then(f2).then(f3);</span><br></pre></td></tr></table></figure><h3 id="new-的过程"><a href="#new-的过程" class="headerlink" title="new 的过程"></a>new 的过程</h3><ol><li>新生成了一个对象</li><li>链接到原型</li><li>绑定 this</li><li>返回新对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个空的对象</span></span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">    <span class="comment">// 获得构造函数</span></span><br><span class="line">    <span class="keyword">let</span> Con = [].shift.call(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="comment">// 链接到原型</span></span><br><span class="line">    obj.__proto__ = Con.prototype</span><br><span class="line">    <span class="comment">// 绑定 this，执行构造函数</span></span><br><span class="line">    <span class="keyword">let</span> result = Con.apply(obj, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="comment">// 确保 new 出来的是个对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">'object'</span> ? result : obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原型继承与类继承"><a href="#原型继承与类继承" class="headerlink" title="原型继承与类继承"></a>原型继承与类继承</h3><p><a href="http://www.cnblogs.com/constantince/p/4754992.html" target="_blank" rel="noopener">JS原型继承和类式继承http://www.cnblogs.com/constantince/p/4754992.html</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类继承</span></span><br><span class="line"><span class="keyword">var</span> father = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">52</span>;</span><br><span class="line">  <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'hello i am '</span>+ <span class="keyword">this</span>.name <span class="string">' and i am '</span>+<span class="keyword">this</span>.age + <span class="string">'years old'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> child = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'bill'</span>;</span><br><span class="line">  father.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> child();</span><br><span class="line">man.say();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原型继承</span></span><br><span class="line"><span class="keyword">var</span> father = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">father.prototype.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> child = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//开始继承</span></span><br><span class="line">child.prototype = <span class="keyword">new</span> father();</span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> child();</span><br><span class="line">man.a();</span><br></pre></td></tr></table></figure><p>和原型对比起来，构造函数（类）式继承有什么不一样呢？首先，构造函数继承的方法都会存在父对象之中，每一次实例，都会将funciton保存在内存中，这样的做法毫无以为会带来性能上的问题。其次类式继承是不可变的。在运行时，无法修改或者添加新的方法，这种方式是一种固步自封的死方法。而原型继承是可以通过改变原型链接而对子类进行修改的。另外就是类式继承不支持多重继承，而对于原型继承来说，你只需要写好extend对对象进行扩展即可。</p><h3 id="和-的区别，什么情况下用相等"><a href="#和-的区别，什么情况下用相等" class="headerlink" title="== 和 ===的区别，什么情况下用相等=="></a>== 和 ===的区别，什么情况下用相等==</h3><p>==是===类型转换（又称强制）,==只需要值相等就会返回true，而===必须值和数据类型都相同才会返回true。</p><h3 id="bind、call、apply的区别"><a href="#bind、call、apply的区别" class="headerlink" title="bind、call、apply的区别"></a>bind、call、apply的区别</h3><p>1.每个函数都包含两个非继承而来的方法：call()方法和apply()方法。<br>2.相同点：这两个方法的作用是一样的。<br>都是在特定的作用域中调用函数，等于设置函数体内this对象的值，以扩充函数赖以运行的作用域。<br>一般来说，this总是指向调用某个方法的对象，但是使用call()和apply()方法时，就会改变this的指向。<br>3.不同点：接收参数的方式不同。</p><p>apply()方法 接收两个参数，一个是函数运行的作用域（this），另一个是参数数组。<br>语法：apply([thisObj [,argArray] ]);，调用一个对象的一个方法，2另一个对象替换当前对象。<br>说明：如果argArray不是一个有效数组或不是arguments对象，那么将导致一个TypeError，如果没有提供argArray和thisObj任何一个参数，那么Global对象将用作thisObj。<br>call()方法 第一个参数和apply()方法的一样，但是传递给函数的参数必须列举出来。<br>语法：call([thisObject[,arg1 [,arg2 [,…,argn]]]]);，应用某一对象的一个方法，用另一个对象替换当前对象。<br>说明： call方法可以用来代替另一个对象调用一个方法，call方法可以将一个函数的对象上下文从初始的上下文改变为thisObj指定的新对象，如果没有提供thisObj参数，那么Global对象被用于thisObj。</p><p>bind和call、apply最大的区别就是，call、apply不仅改变this的指向，还会直接支持代码，而bind不会。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">  name: <span class="string">'咪咪'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">beatTheMonster</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">beatTheMonster.call(cat);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.call 改变了this的指向。改变到了cat上。</span></span><br><span class="line"><span class="comment">// 2.beatTheMonster函数/方法执行了</span></span><br><span class="line"><span class="comment">// 3.bind()，保存了方法，并没有直接调用它</span></span><br></pre></td></tr></table></figure><h3 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span> onchange=<span class="string">"showPreview(this)"</span> /&gt;</span><br><span class="line">&lt;img id=<span class="string">"portrait"</span> src=<span class="string">""</span> width=<span class="string">"70"</span> height=<span class="string">"75"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showPreview</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> file = source.files[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">window</span>.FileReader) &#123;</span><br><span class="line">      <span class="keyword">var</span> fr = <span class="keyword">new</span> FileReader();</span><br><span class="line">      fr.onloadend = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"portrait"</span>).src = e.target.result;</span><br><span class="line">      &#125;;</span><br><span class="line">      fr.readAsDataURL(file);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扁平化多维数组"><a href="#扁平化多维数组" class="headerlink" title="扁平化多维数组"></a>扁平化多维数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = []</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unfold</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt; arr.length;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> arr[i]==<span class="string">"object"</span> &amp;&amp; arr[i].length&gt;<span class="number">1</span>) &#123;</span><br><span class="line">       unfold(arr[i]);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;        </span><br><span class="line">       result.push(arr[i]);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,[<span class="number">6</span>,[<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>],<span class="number">9</span>],[<span class="number">2</span>,<span class="number">5</span>,[<span class="number">1</span>,<span class="number">5</span>]],[<span class="number">5</span>]];</span><br><span class="line">unfold(arr)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,[<span class="number">6</span>,[<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>],<span class="number">9</span>],[<span class="number">2</span>,<span class="number">5</span>,[<span class="number">1</span>,<span class="number">5</span>]],[<span class="number">5</span>]];</span><br><span class="line"><span class="keyword">var</span> b = c.toString().split(<span class="string">','</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,[<span class="number">6</span>,[<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>],<span class="number">9</span>],[<span class="number">2</span>,<span class="number">5</span>,[<span class="number">1</span>,<span class="number">5</span>]],[<span class="number">5</span>]];</span><br><span class="line"><span class="keyword">const</span> flatten = <span class="function"><span class="params">arr</span> =&gt;</span> arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.concat(<span class="built_in">Array</span>.isArray(b) ? flatten(b) : b), []);</span><br><span class="line"><span class="keyword">var</span> result = flatten(arr)</span><br></pre></td></tr></table></figure><h3 id="this的指向问题"><a href="#this的指向问题" class="headerlink" title="this的指向问题"></a>this的指向问题</h3><p>参考链接：<br><a href="https://finget.github.io/2018/11/28/this/" target="_blank" rel="noopener">归纳总结this的指向问题https://finget.github.io/2018/11/28/this/</a><br><a href="https://github.com/mqyqingfeng/Blog/issues/7" target="_blank" rel="noopener">ECMAScript规范解读thishttps://github.com/mqyqingfeng/Blog/issues/7</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">a: <span class="number">2</span>,</span><br><span class="line">foo: foo</span><br><span class="line">&#125;</span><br><span class="line">obj.foo()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上两者情况 `this` 只依赖于调用函数前的对象，优先级是第二个情况大于第一个情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下情况是优先级最高的，`this` 只会绑定在 `c` 上，不会被任何方式修改 `this` 指向</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> foo()</span><br><span class="line">c.a = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(c.a)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还有种就是利用 call，apply，bind 改变 this，这个优先级仅次于 new</span></span><br></pre></td></tr></table></figure><p>箭头函数中的this：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a()()())</span><br></pre></td></tr></table></figure></p><p>箭头函数其实是没有 this 的，这个函数中的 this 只取决于他外面的第一个不是箭头函数的函数的 this。在这个例子中，因为调用 a 符合前面代码中的第一个情况，所以 this 是 window。并且 this 一旦绑定了上下文，就不会被任何代码改变。</p><h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><p><a href="https://segmentfault.com/a/1190000007535316" target="_blank" rel="noopener">理解 JavaScript 的 async/awaithttps://segmentfault.com/a/1190000007535316</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'async1 start'</span>)</span><br><span class="line">  <span class="keyword">await</span> async2()</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'async1 end'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log( <span class="string">'async2'</span>)</span><br><span class="line">&#125;</span><br><span class="line">async1()</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'script start'</span>)</span><br></pre></td></tr></table></figure><p>这里注意一点，可能大家都知道await会让出线程，阻塞后面的代码，那么上面例子中， <code>async2</code> 和 <code>script start</code> 谁先打印呢？<br>是从左向右执行，一旦碰到await直接跳出，阻塞 async2() 的执行？<br>还是从右向左，先执行async2后，发现有await关键字，于是让出线程，阻塞代码呢？<br>实践的结论是，<strong><em>从右向左的</em></strong>。先打印async2，后打印的 script start。<br>之所以提一嘴，是因为我经常看到这样的说法，「一旦遇到await就立刻让出线程，阻塞后面的代码」。</p><h3 id="Promise-和-async-await-和-callback的区别"><a href="#Promise-和-async-await-和-callback的区别" class="headerlink" title="Promise 和 async/await 和 callback的区别"></a>Promise 和 async/await 和 callback的区别</h3><p>我的理解：callback是解决异步的早期方案，但是会导致‘回调地狱’，然后就出现了Promise，利用<code>.then</code>优化了回调地狱的问题，而async/await是在promise 进一步封装，利用看似同步的方式解决异步问题。Promise和async/await都是语法糖。就是写起来更简单，阅读性和维护性增强。</p><p>Promise 和 async/await在执行时都干了什么，推荐看看：<a href="https://mp.weixin.qq.com/s/2fnJADWMneTg6Zxl_oVahA" target="_blank" rel="noopener">8 张图帮你一步步看清 async/await 和 promise 的执行顺序</a></p><h3 id="手写实现promise"><a href="#手写实现promise" class="headerlink" title="手写实现promise"></a>手写实现promise</h3><p>直接粘贴大神的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三种状态</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">"pending"</span>;</span><br><span class="line"><span class="keyword">const</span> RESOLVED = <span class="string">"resolved"</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">"rejected"</span>;</span><br><span class="line"><span class="comment">// promise 接收一个函数参数，该函数会立即执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">  _this.currentState = PENDING;</span><br><span class="line">  _this.value = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="comment">// 用于保存 then 中的回调，只有当 promise</span></span><br><span class="line">  <span class="comment">// 状态为 pending 时才会缓存，并且每个实例至多缓存一个</span></span><br><span class="line">  _this.resolvedCallbacks = [];</span><br><span class="line">  _this.rejectedCallbacks = [];</span><br><span class="line"></span><br><span class="line">  _this.resolve = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">      <span class="comment">// 如果 value 是个 Promise，递归执行</span></span><br><span class="line">      <span class="keyword">return</span> value.then(_this.resolve, _this.reject)</span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 异步执行，保证执行顺序</span></span><br><span class="line">      <span class="keyword">if</span> (_this.currentState === PENDING) &#123;</span><br><span class="line">        _this.currentState = RESOLVED;</span><br><span class="line">        _this.value = value;</span><br><span class="line">        _this.resolvedCallbacks.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  _this.reject = <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 异步执行，保证执行顺序</span></span><br><span class="line">      <span class="keyword">if</span> (_this.currentState === PENDING) &#123;</span><br><span class="line">        _this.currentState = REJECTED;</span><br><span class="line">        _this.value = reason;</span><br><span class="line">        _this.rejectedCallbacks.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 用于解决以下问题</span></span><br><span class="line">  <span class="comment">// new Promise(() =&gt; throw Error('error))</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    fn(_this.resolve, _this.reject);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    _this.reject(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPromise.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// 规范 2.2.7，then 必须返回一个新的 promise</span></span><br><span class="line">  <span class="keyword">var</span> promise2;</span><br><span class="line">  <span class="comment">// 规范 2.2.onResolved 和 onRejected 都为可选参数</span></span><br><span class="line">  <span class="comment">// 如果类型不是函数需要忽略，同时也实现了透传</span></span><br><span class="line">  <span class="comment">// Promise.resolve(4).then().then((value) =&gt; console.log(value))</span></span><br><span class="line">  onResolved = <span class="keyword">typeof</span> onResolved === <span class="string">'function'</span> ? onResolved : <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line">  onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="params">r</span> =&gt;</span> <span class="keyword">throw</span> r;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (self.currentState === RESOLVED) &#123;</span><br><span class="line">    <span class="keyword">return</span> (promise2 = <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 规范 2.2.4，保证 onFulfilled，onRjected 异步执行</span></span><br><span class="line">      <span class="comment">// 所以用了 setTimeout 包裹下</span></span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> x = onResolved(self.value);</span><br><span class="line">          resolutionProcedure(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (reason) &#123;</span><br><span class="line">          reject(reason);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (self.currentState === REJECTED) &#123;</span><br><span class="line">    <span class="keyword">return</span> (promise2 = <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 异步执行onRejected</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> x = onRejected(self.value);</span><br><span class="line">          resolutionProcedure(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (reason) &#123;</span><br><span class="line">          reject(reason);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (self.currentState === PENDING) &#123;</span><br><span class="line">    <span class="keyword">return</span> (promise2 = <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      self.resolvedCallbacks.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 考虑到可能会有报错，所以使用 try/catch 包裹</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> x = onResolved(self.value);</span><br><span class="line">          resolutionProcedure(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (r) &#123;</span><br><span class="line">          reject(r);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      self.rejectedCallbacks.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">var</span> x = onRejected(self.value);</span><br><span class="line">          resolutionProcedure(promise2, x, resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (r) &#123;</span><br><span class="line">          reject(r);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 规范 2.3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolutionProcedure</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 规范 2.3.1，x 不能和 promise2 相同，避免循环引用</span></span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Error"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 规范 2.3.2</span></span><br><span class="line">  <span class="comment">// 如果 x 为 Promise，状态为 pending 需要继续等待否则执行</span></span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x.currentState === PENDING) &#123;</span><br><span class="line">      x.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 再次调用该函数是为了确认 x resolve 的</span></span><br><span class="line">        <span class="comment">// 参数是什么类型，如果是基本类型就再次 resolve</span></span><br><span class="line">        <span class="comment">// 把值传给下个 then</span></span><br><span class="line">        resolutionProcedure(promise2, value, resolve, reject);</span><br><span class="line">      &#125;, reject);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      x.then(resolve, reject);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 规范 2.3.3.3.3</span></span><br><span class="line">  <span class="comment">// reject 或者 resolve 其中一个执行过得话，忽略其他的</span></span><br><span class="line">  <span class="keyword">let</span> called = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 规范 2.3.3，判断 x 是否为对象或者函数</span></span><br><span class="line">  <span class="keyword">if</span> (x !== <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">"object"</span> || <span class="keyword">typeof</span> x === <span class="string">"function"</span>)) &#123;</span><br><span class="line">    <span class="comment">// 规范 2.3.3.2，如果不能取出 then，就 reject</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 规范 2.3.3.1</span></span><br><span class="line">      <span class="keyword">let</span> then = x.then;</span><br><span class="line">      <span class="comment">// 如果 then 是函数，调用 x.then</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">"function"</span>) &#123;</span><br><span class="line">        <span class="comment">// 规范 2.3.3.3</span></span><br><span class="line">        then.call(</span><br><span class="line">          x,</span><br><span class="line">          y =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 规范 2.3.3.3.1</span></span><br><span class="line">            resolutionProcedure(promise2, y, resolve, reject);</span><br><span class="line">          &#125;,</span><br><span class="line">          e =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 规范 2.3.3.4</span></span><br><span class="line">        resolve(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 规范 2.3.4，x 为基本类型</span></span><br><span class="line">    resolve(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Promise-all实现原理"><a href="#Promise-all实现原理" class="headerlink" title="Promise.all实现原理"></a>Promise.all实现原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">MyPromise.all = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'参数应该是一个数组!'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>, result = [];</span><br><span class="line">    next();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//如果不是MyPromise对象，需要转换</span></span><br><span class="line">      MyPromise.resolve(arr[i]).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        result.push(res);</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">if</span> (i === arr.length) &#123;</span><br><span class="line">            resolve(result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next();</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;, reject);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>参考链接：<br><a href="https://juejin.im/post/5bfc9e4ee51d451dca4794af?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">原生es6封装一个Promise对象</a></p><h3 id="手写函数防抖和函数节流"><a href="#手写函数防抖和函数节流" class="headerlink" title="手写函数防抖和函数节流"></a>手写函数防抖和函数节流</h3><p>你是否在日常开发中遇到一个问题，在滚动事件中需要做个复杂计算或者实现一个按钮的防二次点击操作。</p><p>这些需求都可以通过函数防抖动来实现。尤其是第一个需求，如果在频繁的事件回调中做复杂计算，很有可能导致页面卡顿，不如将多次计算合并为一次计算，只在一个精确点做操作。</p><p>PS：防抖和节流的作用都是防止函数多次调用。区别在于，假设一个用户一直触发这个函数，且每次触发函数的间隔小于wait，防抖的情况下只会调用一次，而节流的 情况会每隔一定时间（参数wait）调用函数。</p><p>我们先来看一个袖珍版的防抖理解一下防抖的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// func是用户传入需要防抖的函数</span></span><br><span class="line"><span class="comment">// wait是等待时间</span></span><br><span class="line"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">func, wait = <span class="number">50</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 缓存一个定时器id</span></span><br><span class="line">  <span class="keyword">let</span> timer = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 这里返回的函数是每次用户实际调用的防抖函数</span></span><br><span class="line">  <span class="comment">// 如果已经设定过定时器了就清空上一次的定时器</span></span><br><span class="line">  <span class="comment">// 开始一个新的定时器，延迟执行用户传入的方法</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) clearTimeout(timer)</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    &#125;, wait)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不难看出如果用户调用该函数的间隔小于wait的情况下，上一次的时间还未到就被清除了，并不会执行函数</span></span><br></pre></td></tr></table></figure><p>这是一个简单版的防抖，但是有缺陷，这个防抖只能在最后调用。一般的防抖会有immediate选项，表示是否立即调用。这两者的区别，举个栗子来说：</p><ul><li>例如在搜索引擎搜索问题的时候，我们当然是希望用户输入完最后一个字才调用查询接口，这个时候适用<code>延迟执行</code>的防抖函数，它总是在一连串（间隔小于wait的）函数触发之后调用。</li><li>例如用户给interviewMap点star的时候，我们希望用户点第一下的时候就去调用接口，并且成功之后改变star按钮的样子，用户就可以立马得到反馈是否star成功了，这个情况适用<code>立即执行</code>的防抖函数，它总是在第一次调用，并且下一次调用必须与前一次调用的时间间隔大于wait才会触发。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个是用来获取当前时间戳的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">now</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param  &#123;function&#125; func        回调函数</span></span><br><span class="line"><span class="comment"> * @param  &#123;number&#125;   wait        表示时间窗口的间隔</span></span><br><span class="line"><span class="comment"> * @param  &#123;boolean&#125;  immediate   设置为ture时，是否立即调用函数</span></span><br><span class="line"><span class="comment"> * @return &#123;function&#125;             返回客户调用函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span> (<span class="params">func, wait = <span class="number">50</span>, immediate = true</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer, context, args</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 延迟执行函数</span></span><br><span class="line">  <span class="keyword">const</span> later = <span class="function"><span class="params">()</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 延迟函数执行完毕，清空缓存的定时器序号</span></span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 延迟执行的情况下，函数会在延迟函数中执行</span></span><br><span class="line">    <span class="comment">// 使用到之前缓存的参数和上下文</span></span><br><span class="line">    <span class="keyword">if</span> (!immediate) &#123;</span><br><span class="line">      func.apply(context, args)</span><br><span class="line">      context = args = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, wait)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里返回的函数是每次实际调用的函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...params</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果没有创建延迟执行函数（later），就创建一个</span></span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = later()</span><br><span class="line">      <span class="comment">// 如果是立即执行，调用函数</span></span><br><span class="line">      <span class="comment">// 否则缓存参数和调用上下文</span></span><br><span class="line">      <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">        func.apply(<span class="keyword">this</span>, params)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        context = <span class="keyword">this</span></span><br><span class="line">        args = params</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">// 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个</span></span><br><span class="line">    <span class="comment">// 这样做延迟函数会重新计时</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      clearTimeout(timer)</span><br><span class="line">      timer = later()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>节流：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * underscore 节流函数，返回函数连续调用时，func 执行频率限定为 次 / wait</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param  &#123;function&#125;   func      回调函数</span></span><br><span class="line"><span class="comment"> * @param  &#123;number&#125;     wait      表示时间窗口的间隔</span></span><br><span class="line"><span class="comment"> * @param  &#123;object&#125;     options   如果想忽略开始函数的的调用，传入&#123;leading: false&#125;。</span></span><br><span class="line"><span class="comment"> *                                如果想忽略结尾函数的调用，传入&#123;trailing: false&#125;</span></span><br><span class="line"><span class="comment"> *                                两者不能共存，否则函数不能执行</span></span><br><span class="line"><span class="comment"> * @return &#123;function&#125;             返回客户调用函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">_.throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context, args, result;</span><br><span class="line">    <span class="keyword">var</span> timeout = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 之前的时间戳</span></span><br><span class="line">    <span class="keyword">var</span> previous = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 如果 options 没传则设为空对象</span></span><br><span class="line">    <span class="keyword">if</span> (!options) options = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 定时器回调函数</span></span><br><span class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 如果设置了 leading，就将 previous 设为 0</span></span><br><span class="line">      <span class="comment">// 用于下面函数的第一个 if 判断</span></span><br><span class="line">      previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span> : _.now();</span><br><span class="line">      <span class="comment">// 置空一是为了防止内存泄漏，二是为了下面的定时器判断</span></span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line">      result = func.apply(context, args);</span><br><span class="line">      <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 获得当前时间戳</span></span><br><span class="line">      <span class="keyword">var</span> now = _.now();</span><br><span class="line">      <span class="comment">// 首次进入前者肯定为 true</span></span><br><span class="line">  <span class="comment">// 如果需要第一次不执行函数</span></span><br><span class="line">  <span class="comment">// 就将上次时间戳设为当前的</span></span><br><span class="line">      <span class="comment">// 这样在接下来计算 remaining 的值时会大于0</span></span><br><span class="line">      <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now;</span><br><span class="line">      <span class="comment">// 计算剩余时间</span></span><br><span class="line">      <span class="keyword">var</span> remaining = wait - (now - previous);</span><br><span class="line">      context = <span class="keyword">this</span>;</span><br><span class="line">      args = <span class="built_in">arguments</span>;</span><br><span class="line">      <span class="comment">// 如果当前调用已经大于上次调用时间 + wait</span></span><br><span class="line">      <span class="comment">// 或者用户手动调了时间</span></span><br><span class="line">   <span class="comment">// 如果设置了 trailing，只会进入这个条件</span></span><br><span class="line">  <span class="comment">// 如果没有设置 leading，那么第一次会进入这个条件</span></span><br><span class="line">  <span class="comment">// 还有一点，你可能会觉得开启了定时器那么应该不会进入这个 if 条件了</span></span><br><span class="line">  <span class="comment">// 其实还是会进入的，因为定时器的延时</span></span><br><span class="line">  <span class="comment">// 并不是准确的时间，很可能你设置了2秒</span></span><br><span class="line">  <span class="comment">// 但是他需要2.2秒才触发，这时候就会进入这个条件</span></span><br><span class="line">      <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</span><br><span class="line">        <span class="comment">// 如果存在定时器就清理掉否则会调用二次回调</span></span><br><span class="line">        <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">          clearTimeout(timeout);</span><br><span class="line">          timeout = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        previous = now;</span><br><span class="line">        result = func.apply(context, args);</span><br><span class="line">        <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断是否设置了定时器和 trailing</span></span><br><span class="line">    <span class="comment">// 没有的话就开启一个定时器</span></span><br><span class="line">        <span class="comment">// 并且不能不能同时设置 leading 和 trailing</span></span><br><span class="line">        timeout = setTimeout(later, remaining);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h3 id="图片懒加载与预加载"><a href="#图片懒加载与预加载" class="headerlink" title="图片懒加载与预加载"></a>图片懒加载与预加载</h3><blockquote><p>懒加载也就是延迟加载<br>原理：<br>页面中的img元素，如果没有src属性，浏览器就不会发出请求去下载图片，只有通过javascript设置了图片路径，浏览器才会发送请求。<br>懒加载的原理就是先在页面中把所有的图片统一使用一张占位图进行占位，把正真的路径存在元素的“data-url”（这个名字起个自己认识好记的就行）属性里，要用的时候就取出来，再设置</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 懒加载</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve(img)</span><br><span class="line">    &#125;</span><br><span class="line">    img.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      reject(<span class="string">'图片加载失败'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    img.src = src</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>预加载 提前加载图片，当用户需要查看时可直接从本地缓存中渲染</p></blockquote><p>实现预加载的三种方法：</p><ol><li>用CSS和JavaScript实现预加载</li><li>仅使用JavaScript实现预加载</li><li>使用Ajax实现预加载</li></ol><ul><li>用CSS和JavaScript实现预加载</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#preload-01</span> &#123; <span class="attribute">background</span>: <span class="built_in">url</span>(http://domain.tld/image-01.png) no-repeat -<span class="number">9999px</span> -<span class="number">9999px</span>; &#125;  </span><br><span class="line"><span class="selector-id">#preload-02</span> &#123; <span class="attribute">background</span>: <span class="built_in">url</span>(http://domain.tld/image-02.png) no-repeat -<span class="number">9999px</span> -<span class="number">9999px</span>; &#125;  </span><br><span class="line"><span class="selector-id">#preload-03</span> &#123; <span class="attribute">background</span>: <span class="built_in">url</span>(http://domain.tld/image-03.png) no-repeat -<span class="number">9999px</span> -<span class="number">9999px</span>; &#125;</span><br></pre></td></tr></table></figure><p>将这三个ID选择器应用到(X)HTML元素中，我们便可通过CSS的background属性将图片预加载到屏幕外的背景上。只要这些图片的路径保持不变，当它们在Web页面的其他地方被调用时，浏览器就会在渲染过程中使用预加载（缓存）的图片。简单、高效，不需要任何JavaScript。</p><p>该方法虽然高效，但仍有改进余地。使用该法加载的图片会同页面的其他内容一起加载，增加了页面的整体加载时间。为了解决这个问题，我们增加了一些JavaScript代码，来推迟预加载的时间，直到页面加载完毕。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preloader</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById) &#123;  </span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"preload-01"</span>).style.background = <span class="string">"url(http://domain.tld/image-01.png) no-repeat -9999px -9999px"</span>;  </span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"preload-02"</span>).style.background = <span class="string">"url(http://domain.tld/image-02.png) no-repeat -9999px -9999px"</span>;  </span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"preload-03"</span>).style.background = <span class="string">"url(http://domain.tld/image-03.png) no-repeat -9999px -9999px"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addLoadEvent</span>(<span class="params">func</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> oldonload = <span class="built_in">window</span>.onload;  </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">'function'</span>) &#123;  </span><br><span class="line">        <span class="built_in">window</span>.onload = func;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">            <span class="keyword">if</span> (oldonload) &#123;  </span><br><span class="line">                oldonload();  </span><br><span class="line">            &#125;  </span><br><span class="line">            func();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">addLoadEvent(preloader);</span><br></pre></td></tr></table></figure><ul><li>仅使用JavaScript实现预加载</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> images = <span class="keyword">new</span> <span class="built_in">Array</span>()  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preload</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; preload.arguments.length; i++) &#123;  </span><br><span class="line">    images[i] = <span class="keyword">new</span> Image()  </span><br><span class="line">    images[i].src = preload.arguments[i]  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">preload(  </span><br><span class="line">  <span class="string">"http://domain.tld/gallery/image-001.jpg"</span>,  </span><br><span class="line">   <span class="string">"http://domain.tld/gallery/image-002.jpg"</span>,  </span><br><span class="line">   <span class="string">"http://domain.tld/gallery/image-003.jpg"</span>  </span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>使用Ajax实现预加载</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="comment">// XHR to request a JS and a CSS  </span></span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();  </span><br><span class="line">        xhr.open(<span class="string">'GET'</span>, <span class="string">'http://domain.tld/preload.js'</span>);  </span><br><span class="line">        xhr.send(<span class="string">''</span>);  </span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();  </span><br><span class="line">        xhr.open(<span class="string">'GET'</span>, <span class="string">'http://domain.tld/preload.css'</span>);  </span><br><span class="line">        xhr.send(<span class="string">''</span>);  </span><br><span class="line">        <span class="comment">// preload image  </span></span><br><span class="line">        <span class="keyword">new</span> Image().src = <span class="string">"http://domain.tld/preload.png"</span>;  </span><br><span class="line">    &#125;, <span class="number">1000</span>);  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码预加载了“preload.js”、“preload.css”和“preload.png”。1000毫秒的超时是为了防止脚本挂起，而导致正常页面出现功能问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="comment">// reference to &lt;head&gt;  </span></span><br><span class="line">        <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];  </span><br><span class="line">        <span class="comment">// a new CSS  </span></span><br><span class="line">        <span class="keyword">var</span> css = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>);  </span><br><span class="line">        css.type = <span class="string">"text/css"</span>;  </span><br><span class="line">        css.rel  = <span class="string">"stylesheet"</span>;  </span><br><span class="line">        css.href = <span class="string">"http://domain.tld/preload.css"</span>;  </span><br><span class="line">        <span class="comment">// a new JS  </span></span><br><span class="line">        <span class="keyword">var</span> js  = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);  </span><br><span class="line">        js.type = <span class="string">"text/javascript"</span>;  </span><br><span class="line">        js.src  = <span class="string">"http://domain.tld/preload.js"</span>;  </span><br><span class="line">        <span class="comment">// preload JS and CSS  </span></span><br><span class="line">        head.appendChild(css);  </span><br><span class="line">        head.appendChild(js);  </span><br><span class="line">        <span class="comment">// preload image  </span></span><br><span class="line">        <span class="keyword">new</span> Image().src = <span class="string">"http://domain.tld/preload.png"</span>;  </span><br><span class="line">    &#125;, <span class="number">1000</span>);  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里，我们通过DOM创建三个元素来实现三个文件的预加载。正如上面提到的那样，使用Ajax，加载文件不会应用到加载页面上。从这点上看，Ajax方法优越于JavaScript。</p><p>参考链接:<br><a href="http://web.jobbole.com/86785/" target="_blank" rel="noopener">Javascript图片预加载详解</a></p><h3 id="使用es5实现es6的class"><a href="#使用es5实现es6的class" class="headerlink" title="使用es5实现es6的class"></a>使用es5实现es6的class</h3><p>借用<a href="https://babeljs.io/repl/" target="_blank" rel="noopener">babel工具</a>可以学习一下，es6的class 编译成es5时，长什么样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">   <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  say() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">  run() &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'run fast'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 静态方法，类调用</span></span><br><span class="line">  <span class="keyword">static</span> getGirl()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'girl friend'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">var</span> _createClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">defineProperties</span>(<span class="params">target, props</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; props.length; i++) &#123; </span><br><span class="line">  <span class="keyword">var</span> descriptor = props[i];</span><br><span class="line">    <span class="comment">// 枚举</span></span><br><span class="line">          descriptor.enumerable = descriptor.enumerable || <span class="literal">false</span>;</span><br><span class="line">          <span class="comment">// 可配置</span></span><br><span class="line">          descriptor.configurable = <span class="literal">true</span>; </span><br><span class="line">      <span class="keyword">if</span> (<span class="string">"value"</span> <span class="keyword">in</span> descriptor) </span><br><span class="line">        <span class="comment">// 可写</span></span><br><span class="line">      descriptor.writable = <span class="literal">true</span>;</span><br><span class="line">          </span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(target, descriptor.key, descriptor); </span><br><span class="line">    &#125; </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">Constructor, protoProps, staticProps</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (protoProps) </span><br><span class="line">  defineProperties(Constructor.prototype, protoProps); </span><br><span class="line">  <span class="keyword">if</span> (staticProps) </span><br><span class="line">  defineProperties(Constructor, staticProps); </span><br><span class="line">  <span class="keyword">return</span> Constructor; </span><br><span class="line">  &#125;; </span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁止 直接调用 Person()</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123; </span><br><span class="line"><span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123; </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    _classCallCheck(<span class="keyword">this</span>, Person);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _createClass(Person, [&#123;</span><br><span class="line">    key: <span class="string">'say'</span>,</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    key: <span class="string">'run'</span>,</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'run fast'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;], [&#123;</span><br><span class="line">    key: <span class="string">'getGirl'</span>,</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span> <span class="title">getGirl</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'girl friend'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]);</span><br><span class="line">  <span class="keyword">return</span> Person;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>关于对象的<code>enumerable</code>、<code>writable</code>、<code>configurable</code>,可以看看<a href="http://arqex.com/967/javascript-properties-enumerable-writable-configurable" target="_blank" rel="noopener">Javascript properties are enumerable, writable and configurable</a></p><h3 id="JavaScript的sort方法内部使用的什么排序"><a href="#JavaScript的sort方法内部使用的什么排序" class="headerlink" title="JavaScript的sort方法内部使用的什么排序"></a>JavaScript的sort方法内部使用的什么排序</h3><p>默认排序顺序是根据字符串Unicode码点</p><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><blockquote><p>函数式编程的本质，函数式编程中的函数这个术语不是指计算机中的函数，而是指数学中的函数，即自变量的映射。也就是说一个函数的值仅决定于函数参数的值，不依赖其他状态。比如sqrt(x)函数计算x的平方根，只要x不变，无论什么时候调用，调用几次，值都是不变的。<br>函数式的最主要的好处是不可变性带来的。没有可变的状态，函数就是引用透明的没有副作用。函数即不依赖外部的状态也不修改外部的状态，函数调用的结果不依赖调用的时间和位置，这样写的代码容易进行推理，不容易出错。这使得单元测试和调试更容易。</p></blockquote><p>参考链接：<br><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html#%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">js函数式编程指南</a></p><h3 id="回调函数的坏处"><a href="#回调函数的坏处" class="headerlink" title="回调函数的坏处"></a>回调函数的坏处</h3><p>回调地狱、代码的可阅读性和可维护性降低</p><h3 id="如何实现一个可设置过期时间的localStorage"><a href="#如何实现一个可设置过期时间的localStorage" class="headerlink" title="如何实现一个可设置过期时间的localStorage"></a>如何实现一个可设置过期时间的localStorage</h3><p>直接上链接：<a href="https://mp.weixin.qq.com/s/6-FjnGwZHxHfnE-ZVmpIaw" target="_blank" rel="noopener">如何给localStorage设置一个过期时间？</a></p><h3 id="用JavaScript的异步实现sleep函数"><a href="#用JavaScript的异步实现sleep函数" class="headerlink" title="用JavaScript的异步实现sleep函数"></a>用JavaScript的异步实现sleep函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>)</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> sleep(<span class="number">1000</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, ms))</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>参考链接：<br><a href="https://www.cnblogs.com/pompey/p/6644977.html" target="_blank" rel="noopener">JavaScript的sleep实现–Javascript异步编程学习</a></p><h3 id="手写实现jsonp"><a href="#手写实现jsonp" class="headerlink" title="手写实现jsonp"></a>手写实现jsonp</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>._pt_lt = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="built_in">window</span>._pt_sp_2 = [];</span><br><span class="line">_pt_sp_2.push(<span class="string">'setAccount,2953009d'</span>);</span><br><span class="line"><span class="keyword">var</span> _protocol = ((<span class="string">"https:"</span> == <span class="built_in">document</span>.location.protocol) ? <span class="string">" https://"</span> : <span class="string">" http://"</span>);</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> atag = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">  atag.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">  atag.async = <span class="literal">true</span>;</span><br><span class="line">  atag.src = _protocol + <span class="string">'js.ptengine.cn/2953009d.js'</span>;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'script'</span>)[<span class="number">0</span>];</span><br><span class="line">  s.parentNode.insertBefore(atag, s);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="浅拷贝和深拷贝的区别"><a href="#浅拷贝和深拷贝的区别" class="headerlink" title="浅拷贝和深拷贝的区别"></a>浅拷贝和深拷贝的区别</h3><blockquote><p>浅拷贝只是对指针的拷贝，拷贝后两个指针指向同一个内存空间，深拷贝不但对指针进行拷贝，而且对指针指向的内容进行拷贝，经深拷贝后的指针是指向两个不同地址的指针。</p></blockquote><p>参考链接：<br><a href="https://www.zybuluo.com/Bios/note/1142554" target="_blank" rel="noopener">js浅拷贝和深拷贝</a></p><h3 id="for-in-和-for-of-的区别"><a href="#for-in-和-for-of-的区别" class="headerlink" title="for..in 和 for..of 的区别"></a>for..in 和 for..of 的区别</h3><ol><li>推荐在循环对象属性的时候，使用for…in,在遍历数组的时候的时候使用for…of。</li><li>for…in…遍历对象会遍历出对象的所有可枚举的属性</li><li>for…in循环出的是key，for…of循环出的是value</li><li>注意，for…of是ES6新引入的特性。修复了ES5引入的for…in的不足</li><li>for…of不能循环普通的对象，需要通过和Object.keys()搭配使用</li></ol><h3 id="cookie和localStorage的区别"><a href="#cookie和localStorage的区别" class="headerlink" title="cookie和localStorage的区别"></a>cookie和localStorage的区别</h3><table><br>    <tr><br>        <th>特性</th><br>        <th>cookie</th><br>        <th>sessionStorage</th><br>        <th>localStorage</th><br>    </tr><br>    <tr><br>        <td>数据生命期</td><br>        <td>生成时就会被指定一个maxAge值，这就是cookie的生存周期，在这个周期内cookie有效，默认关闭浏览器失效</td><br>        <td>页面会话期间可用</td><br>        <td>除非数据被清除，否则一直存在</td><br>    </tr><br>    <tr><br>        <td>存放数据大小</td><br>        <td>4K左右（因为每次http请求都会携带cookie）</td><br>        <td colspan="2">一般5M或更大</td><br>    </tr><br>    <tr><br>        <td>与服务器通信</td><br>        <td>由对服务器的请求来传递，每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td><br>        <td colspan="2">数据不是由每个服务器请求传递的，而是只有在请求时使用数据，不参与和服务器的通信</td><br>    </tr><br>    <tr><br>        <td>易用性</td><br>        <td>cookie需要自己封装setCookie，getCookie</td><br>        <td colspan="2">可以用源生接口，也可再次封装来对Object和Array有更好的支持</td><br>    </tr><br>    <tr><br>        <td>共同点</td><br>        <td colspan="3">都是保存在浏览器端，和服务器端的session机制不同</td><br>    </tr><br></table><h3 id="JS执行过程中分为哪些阶段"><a href="#JS执行过程中分为哪些阶段" class="headerlink" title="JS执行过程中分为哪些阶段"></a>JS执行过程中分为哪些阶段</h3><p><img src="https://i.imgur.com/9LkJ8hC.png" alt></p><h3 id="数组里面有10万个数据，取第一个元素和第10万个元素的时间相差多少"><a href="#数组里面有10万个数据，取第一个元素和第10万个元素的时间相差多少" class="headerlink" title="数组里面有10万个数据，取第一个元素和第10万个元素的时间相差多少"></a>数组里面有10万个数据，取第一个元素和第10万个元素的时间相差多少</h3><p>时间一样。引用类型的变量都是堆内存。堆内存就像书架一样，只要你知道书名，就能直接找到对应的书。</p><h3 id="内存空间"><a href="#内存空间" class="headerlink" title="内存空间"></a>内存空间</h3><p>var a = {b: 1} 存放在哪里？<br>var a = {b: {c: 1}}存放在哪里？<br>var a = {name: “前端开发”}; var b = a; a = null, 那么b输出什么？</p><blockquote><p>js变量可以用来保存两种类型的值：基本类型值和引用类型值。在ES6之前共有6种数据类型：Undefined、Null、Boolean、Number，String和Object，其中前5种是基本类型值。</p></blockquote><ul><li>基本类型值在内存中占据固定大小的空间，因此被保存在栈内存中。</li><li>从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本。</li><li>引用类型的值是对象，保存在堆内存中。</li><li>包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针</li><li>理解队列数据结构的目的主要是为了清晰的明白事件循环（Event Loop）的机制到底是怎么回事。</li></ul><h3 id="jquery-document-ready-与window-onload的区别"><a href="#jquery-document-ready-与window-onload的区别" class="headerlink" title="jquery $(document).ready() 与window.onload的区别"></a>jquery $(document).ready() 与window.onload的区别</h3><p>1.执行时间</p><blockquote><p>window.onload必须等到页面内包括图片的所有元素加载完毕后才能执行。<br>$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。</p></blockquote><p>2.编写个数不同 </p><blockquote><p>window.onload不能同时编写多个，如果有多个window.onload方法，只会执行一个<br>$(document).ready()可以同时编写多个，并且都可以得到执行</p></blockquote><p>3.简化写法 </p><blockquote><p>window.onload没有简化写法<br><code>$(document).ready(function(){})</code>可以简写成<code>$(function(){})</code>;</p></blockquote><h3 id="一个是数组中所有数都出现了两次，只有一个元素只出现了一次，找出这个数"><a href="#一个是数组中所有数都出现了两次，只有一个元素只出现了一次，找出这个数" class="headerlink" title="一个是数组中所有数都出现了两次，只有一个元素只出现了一次，找出这个数"></a>一个是数组中所有数都出现了两次，只有一个元素只出现了一次，找出这个数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">8</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">num = num^item <span class="comment">// 异或运算</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">get</span>()</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/Garrettzxd/article/details/82390653" target="_blank" rel="noopener">https://blog.csdn.net/Garrettzxd/article/details/82390653</a></p><hr><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="Vue-生命周期"><a href="#Vue-生命周期" class="headerlink" title="Vue 生命周期"></a>Vue 生命周期</h3><p>1.beforcreate<br>2.created<br>3.beformount<br>4.mounted<br>5.beforeUpdate<br>6.updated<br>7.actived<br>8.deatived<br>9.beforeDestroy<br>10.destroyed</p><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt></p><h3 id="vue里面的虚拟dom是怎么回事，虚拟DOM主要做了什么"><a href="#vue里面的虚拟dom是怎么回事，虚拟DOM主要做了什么" class="headerlink" title="vue里面的虚拟dom是怎么回事，虚拟DOM主要做了什么"></a>vue里面的虚拟dom是怎么回事，虚拟DOM主要做了什么</h3><p><a href="https://finget.github.io/2018/05/22/virtualDom/" target="_blank" rel="noopener">JavaScript从初级往高级走系列————Virtual Dom</a></p><h3 id="vue双向绑定讲一讲"><a href="#vue双向绑定讲一讲" class="headerlink" title="vue双向绑定讲一讲"></a>vue双向绑定讲一讲</h3><blockquote><p>Vue3基于Proxy 的新数据监听系统，全语音特性支持 + 更好的性能</p></blockquote><p>Vue2.x用的是基于ES5的getter/setter,也就是Object.defineProperty这个API。</p><blockquote><p>每个vue 组件都会代理它所包含的 data、props、computed,这些代理都是通过Object.defineProperty实现的，大量的Object.defineProperty是很大的性能消耗</p></blockquote><p>利用Proxy减少组件实例初始化开销，暴露给用户的这个this，其实是一个真正的组件实例的一个Proxy</p><blockquote><p>基于Proxy的监听是所谓的Lazy by default，只有当一个数据被用到的时候才会监听</p></blockquote><h3 id="讲vue-lazyloader的原理，手写伪代码"><a href="#讲vue-lazyloader的原理，手写伪代码" class="headerlink" title="讲vue-lazyloader的原理，手写伪代码"></a>讲vue-lazyloader的原理，手写伪代码</h3><p><img src="https://i.imgur.com/j9hH9vr.png" alt></p><p>原理简述：</p><ol><li>vue-lazyload是通过指令的方式实现的，定义的指令是v-lazy指令</li><li>指令被bind时会创建一个listener，并将其添加到listener queue里面， 并且搜索target dom节点，为其注册dom事件(如scroll事件)</li><li>上面的dom事件回调中，会遍历 listener queue里的listener，判断此listener绑定的dom是否处于页面中perload的位置，如果处于则加载异步加载当前图片的资源</li><li>同时listener会在当前图片加载的过程的loading，loaded，error三种状态触发当前dom渲染的函数，分别渲染三种状态下dom的内容</li></ol><p>参考链接：<br><a href="https://blog.csdn.net/u010014658/article/details/73477232" target="_blank" rel="noopener">Vue-lazyload原理详解之源码解析</a></p><h3 id="讲vue的响应式原理、依赖收集、监听数组、虚拟dom"><a href="#讲vue的响应式原理、依赖收集、监听数组、虚拟dom" class="headerlink" title="讲vue的响应式原理、依赖收集、监听数组、虚拟dom"></a>讲vue的响应式原理、依赖收集、监听数组、虚拟dom</h3><p><a href="https://ustbhuangyi.github.io/vue-analysis/" target="_blank" rel="noopener">Vue.js 技术揭秘</a></p><h3 id="手写vue双向绑定"><a href="#手写vue双向绑定" class="headerlink" title="手写vue双向绑定"></a>手写vue双向绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>双向绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  手写一个简单双向绑定<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"model"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"modelText"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> model = <span class="built_in">document</span>.querySelector(<span class="string">"#model"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> modelText = <span class="built_in">document</span>.querySelector(<span class="string">"#modelText"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> defaultName = <span class="string">"defaultName"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> userInfo = &#123;&#125;</span></span><br><span class="line"><span class="undefined">  model.value = defaultName;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">Object</span>.defineProperty(userInfo, <span class="string">"name"</span>, &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">get</span>: function () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> defaultName;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="keyword">set</span>: function (value) &#123;</span></span><br><span class="line"><span class="undefined">      defaultName = value;</span></span><br><span class="line"><span class="undefined">      model.value = value;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"-----value"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(value);</span></span><br><span class="line"><span class="undefined">      modelText.textContent = value;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  userInfo.name = <span class="string">"new value"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> isEnd = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  model.addEventListener(<span class="string">"keyup"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (isEnd) &#123;</span></span><br><span class="line"><span class="javascript">      userInfo.name = <span class="keyword">this</span>.value;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;, <span class="literal">false</span>)</span></span><br><span class="line"><span class="javascript">  <span class="comment">//加入监听中文输入事件</span></span></span><br><span class="line"><span class="javascript">  model.addEventListener(<span class="string">"compositionstart"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"开始输入中文"</span>);</span></span><br><span class="line"><span class="javascript">    isEnd = <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  model.addEventListener(<span class="string">"compositionend"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    isEnd = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"结束输入中文"</span>);</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="vue-router的原理"><a href="#vue-router的原理" class="headerlink" title="vue-router的原理"></a>vue-router的原理</h3><p>参考链接：<br><a href="https://www.cnblogs.com/tiedaweishao/p/9144531.html" target="_blank" rel="noopener">前端路由简介以及vue-router实现原理</a><br><a href="https://zhuanlan.zhihu.com/p/27588422" target="_blank" rel="noopener">【源码拾遗】从vue-router看前端路由的两种实现</a><br><a href="https://www.jianshu.com/p/4295aec31302" target="_blank" rel="noopener">浅谈vue-router原理</a></p><h3 id="router-link-与-a-标签的区别"><a href="#router-link-与-a-标签的区别" class="headerlink" title="router-link 与 a 标签的区别"></a>router-link 与 a 标签的区别</h3><p><code>&lt;router-link&gt;</code>组件支持用户在具有路由功能的应用中 (点击) 导航。 通过 to 属性指定目标地址，默认渲染成带有正确链接的 <code>&lt;a&gt;</code> 标签，可以通过配置 tag 属性生成别的标签.。另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名。</p><p><code>&lt;router-link&gt;</code>比起写死的<code>&lt;a href=&quot;...&quot;&gt;</code>会好一些，理由如下：</p><ul><li><p>无论是 HTML5 history 模式还是 hash 模式，它的表现行为一致，所以，当你要切换路由模式，或者在 IE9 降级使用 hash 模式，无须作任何变动。</p></li><li><p>在 HTML5 history 模式下，<code>router-link</code>会守卫点击事件，让浏览器不再重新加载页面。</p></li><li><p>当你在 HTML5 history 模式下使用 <code>base</code> 选项之后，所有的 <code>to</code>属性都不需要写 (基路径) 了。</p><h3 id="手写vue的mixin方法"><a href="#手写vue的mixin方法" class="headerlink" title="手写vue的mixin方法"></a>手写vue的mixin方法</h3></li></ul><p>参考链接：<br><a href="https://blog.csdn.net/sinat_17775997/article/details/66967854" target="_blank" rel="noopener">react-router从Link组件和a标签的区别说起</a></p><h3 id="vue里面哪儿不会用到双向绑定"><a href="#vue里面哪儿不会用到双向绑定" class="headerlink" title="vue里面哪儿不会用到双向绑定"></a>vue里面哪儿不会用到双向绑定</h3><p>对于非UI控件来说，不存在双向，只有单向。只有UI控件才有双向的问题。</p><hr><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li><p>实例化<br>getDefaultProps<br>getInitialState<br>componentWillMount<br>render<br>componentDidMount</p></li><li><p>存在期<br>componentWillReceiveProps<br>shouldComponentUpdate<br>componentWillUpdate<br>componentDidUpdate</p></li><li><p>销毁时<br>componentWillUnmount</p></li></ul><h3 id="state是怎么注入到组件的，从reducer到组件经历了什么样的过程"><a href="#state是怎么注入到组件的，从reducer到组件经历了什么样的过程" class="headerlink" title="state是怎么注入到组件的，从reducer到组件经历了什么样的过程"></a>state是怎么注入到组件的，从reducer到组件经历了什么样的过程</h3><h3 id="调用-setState-之后发生了什么？"><a href="#调用-setState-之后发生了什么？" class="headerlink" title="调用 setState 之后发生了什么？"></a>调用 setState 之后发生了什么？</h3><p>在代码中调用setState函数之后，React 会将传入的参数对象与组件当前的状态合并，然后触发所谓的调和过程（Reconciliation）。经过调和过程，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个UI界面。在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。</p><h3 id="React-中-Element-与-Component-的区别是？"><a href="#React-中-Element-与-Component-的区别是？" class="headerlink" title="React 中 Element 与 Component 的区别是？"></a>React 中 Element 与 Component 的区别是？</h3><p>简单而言，<strong>React Element 是描述屏幕上所见内容的数据结构</strong>，是对于 UI 的对象表述。典型的 React Element 就是利用 JSX 构建的声明式代码片然后被转化为createElement的调用组合。而 <strong>React Component 则是可以接收参数输入并且返回某个React Element的函数或者类</strong>。更多介绍可以参考React Elements vs React Components。</p><h3 id="在什么情况下你会优先选择使用-Class-Component-而不是-Functional-Component？"><a href="#在什么情况下你会优先选择使用-Class-Component-而不是-Functional-Component？" class="headerlink" title="在什么情况下你会优先选择使用 Class Component 而不是 Functional Component？"></a>在什么情况下你会优先选择使用 Class Component 而不是 Functional Component？</h3><p>在组件需要包含内部状态或者使用到生命周期函数的时候使用 Class Component ，否则使用函数式组件。</p><h3 id="React-中-refs-的作用是什么？"><a href="#React-中-refs-的作用是什么？" class="headerlink" title="React 中 refs 的作用是什么？"></a>React 中 refs 的作用是什么？</h3><p>Refs 是 React 提供给我们的安全访问 DOM 元素或者某个组件实例的句柄。我们可以为元素添加ref属性然后在回调函数中接受该元素在 DOM 树中的句柄，该值会作为回调函数的第一个参数返回：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomForm</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleSubmit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Input Value: "</span>, <span class="keyword">this</span>.input.value)</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">'text'</span></span><br><span class="line">          ref=&#123;(input) =&gt; <span class="keyword">this</span>.input = input&#125; /&gt;</span><br><span class="line">        &lt;button type=<span class="string">'submit'</span>&gt;Submit&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>form&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中的input域包含了一个ref属性，该属性声明的回调函数会接收input对应的 DOM 元素，我们将其绑定到this指针以便在其他的类函数中使用。另外值得一提的是，refs 并不是类组件的专属，函数式组件同样能够利用闭包暂存其值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CustomForm</span> (<span class="params">&#123;handleSubmit&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> inputElement</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form onSubmit=&#123;() =&gt; handleSubmit(inputElement.value)&#125;&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        type=<span class="string">'text'</span></span><br><span class="line">        ref=&#123;(input) =&gt; inputElement = input&#125; /&gt;</span><br><span class="line">      &lt;button type=<span class="string">'submit'</span>&gt;Submit&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>form&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="React-中-keys-的作用是什么？"><a href="#React-中-keys-的作用是什么？" class="headerlink" title="React 中 keys 的作用是什么？"></a>React 中 keys 的作用是什么？</h3><p>Keys 是 React 用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">render () &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &#123;<span class="keyword">this</span>.state.todoItems.map(<span class="function">(<span class="params">&#123;task, uid&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;uid&#125;</span>&gt;</span>&#123;task&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      &#125;)&#125;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>在开发过程中，我们需要保证某个元素的 key 在其同级元素中具有唯一性。在 React Diff 算法中 React 会借助元素的 Key 值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染。此外，React 还需要借助 Key 值来判断元素与本地状态的关联关系，因此我们绝不可忽视转换函数中 Key 的重要性。</p><h3 id="Controlled-Component-与-Uncontrolled-Component-之间的区别是什么？"><a href="#Controlled-Component-与-Uncontrolled-Component-之间的区别是什么？" class="headerlink" title="Controlled Component 与 Uncontrolled Component 之间的区别是什么？"></a>Controlled Component 与 Uncontrolled Component 之间的区别是什么？</h3><p>React 的核心组成之一就是能够维持内部状态的自治组件，不过当我们引入原生的HTML表单元素时（input,select,textarea 等），我们是否应该将所有的数据托管到 React 组件中还是将其仍然保留在 DOM 元素中呢？这个问题的答案就是受控组件与非受控组件的定义分割。受控组件（Controlled Component）代指那些交由 React 控制并且所有的表单数据统一存放的组件。譬如下面这段代码中username变量值并没有存放到DOM元素中，而是存放在组件状态数据中。任何时候我们需要改变username变量值时，我们应当调用setState函数进行修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControlledForm</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    username: <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line">  updateUsername = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      username: e.target.value,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  handleSubmit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">'text'</span></span><br><span class="line">          value=&#123;<span class="keyword">this</span>.state.username&#125;</span><br><span class="line">          onChange=&#123;<span class="keyword">this</span>.updateUsername&#125; /&gt;</span><br><span class="line">        &lt;button type=<span class="string">'submit'</span>&gt;Submit&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>form&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而非受控组件（Uncontrolled Component）则是由DOM存放表单数据，并非存放在 React 组件中。我们可以使用 refs 来操控DOM元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnControlledForm</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleSubmit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Input Value: "</span>, <span class="keyword">this</span>.input.value)</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">'text'</span></span><br><span class="line">          ref=&#123;(input) =&gt; <span class="keyword">this</span>.input = input&#125; /&gt;</span><br><span class="line">        &lt;button type=<span class="string">'submit'</span>&gt;Submit&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>form&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>竟然非受控组件看上去更好实现，我们可以直接从 DOM 中抓取数据，而不需要添加额外的代码。不过实际开发中我们并不提倡使用非受控组件，因为实际情况下我们需要更多的考虑表单验证、选择性的开启或者关闭按钮点击、强制输入格式等功能支持，而此时我们将数据托管到 React 中有助于我们更好地以声明式的方式完成这些功能。引入 React 或者其他 MVVM 框架最初的原因就是为了将我们从繁重的直接操作 DOM 中解放出来。</p><h3 id="在生命周期中的哪一步你应该发起-AJAX-请求？"><a href="#在生命周期中的哪一步你应该发起-AJAX-请求？" class="headerlink" title="在生命周期中的哪一步你应该发起 AJAX 请求？"></a>在生命周期中的哪一步你应该发起 AJAX 请求？</h3><p>我们应当将AJAX 请求放到 componentDidMount 函数中执行，主要原因有下：</p><ul><li><p>React 下一代调和算法 Fiber 会通过开始或停止渲染的方式优化应用性能，其会影响到 componentWillMount 的触发次数。对于 componentWillMount 这个生命周期函数的调用次数会变得不确定，React 可能会多次频繁调用 componentWillMount。如果我们将 AJAX 请求放到 componentWillMount 函数中，那么显而易见其会被触发多次，自然也就不是好的选择。</p></li><li><p>如果我们将 AJAX 请求放置在生命周期的其他函数中，我们并不能保证请求仅在组件挂载完毕后才会要求响应。如果我们的数据请求在组件挂载之前就完成，并且调用了setState函数将数据添加到组件状态中，对于未挂载的组件则会报错。而在 componentDidMount 函数中进行 AJAX 请求则能有效避免这个问题。</p></li></ul><h3 id="shouldComponentUpdate-的作用是啥以及为何它这么重要？"><a href="#shouldComponentUpdate-的作用是啥以及为何它这么重要？" class="headerlink" title="shouldComponentUpdate 的作用是啥以及为何它这么重要？"></a>shouldComponentUpdate 的作用是啥以及为何它这么重要？</h3><p>shouldComponentUpdate允许我们手动地判断是否要进行组件更新，根据组件的应用场景设置函数的合理返回值能够帮我们避免不必要的更新。</p><h3 id="如何告诉-React-它应该编译生产环境版本？"><a href="#如何告诉-React-它应该编译生产环境版本？" class="headerlink" title="如何告诉 React 它应该编译生产环境版本？"></a>如何告诉 React 它应该编译生产环境版本？</h3><p>通常情况下我们会使用 Webpack 的 DefinePlugin 方法来将 NODE_ENV 变量值设置为 production。编译版本中 React 会忽略 propType 验证以及其他的告警信息，同时还会降低代码库的大小，React 使用了 Uglify 插件来移除生产环境下不必要的注释等信息。</p><h3 id="为什么我们需要使用-React-提供的-Children-API-而不是-JavaScript-的-map？"><a href="#为什么我们需要使用-React-提供的-Children-API-而不是-JavaScript-的-map？" class="headerlink" title="为什么我们需要使用 React 提供的 Children API 而不是 JavaScript 的 map？"></a>为什么我们需要使用 React 提供的 Children API 而不是 JavaScript 的 map？</h3><p>props.children并不一定是数组类型，譬如下面这个元素：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Parent&gt;</span><br><span class="line">  &lt;h1&gt;Welcome.&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Parent&gt;</span><br></pre></td></tr></table></figure></p><h3 id="概述下-React-中的事件处理逻辑"><a href="#概述下-React-中的事件处理逻辑" class="headerlink" title="概述下 React 中的事件处理逻辑"></a>概述下 React 中的事件处理逻辑</h3><p>为了解决跨浏览器兼容性问题，React 会将浏览器原生事件（Browser Native Event）封装为合成事件（SyntheticEvent）传入设置的事件处理器中。这里的合成事件提供了与原生事件相同的接口，不过它们屏蔽了底层浏览器的细节差异，保证了行为的一致性。另外有意思的是，React 并没有直接将事件附着到子元素上，而是以单一事件监听器的方式将所有的事件发送到顶层进行处理。这样 React 在更新 DOM 的时候就不需要考虑如何去处理附着在 DOM 上的事件监听器，最终达到优化性能的目的。</p><h3 id="createElement-与-cloneElement-的区别是什么？"><a href="#createElement-与-cloneElement-的区别是什么？" class="headerlink" title="createElement 与 cloneElement 的区别是什么？"></a>createElement 与 cloneElement 的区别是什么？</h3><p>createElement 函数是 JSX 编译之后使用的创建 React Element 的函数，而 cloneElement 则是用于复制某个元素并传入新的 Props。</p><h3 id="传入-setState-函数的第二个参数的作用是什么？"><a href="#传入-setState-函数的第二个参数的作用是什么？" class="headerlink" title="传入 setState 函数的第二个参数的作用是什么？"></a>传入 setState 函数的第二个参数的作用是什么？</h3><p>该函数会在setState函数调用完成并且组件开始重渲染的时候被调用，我们可以用该函数来监听渲染是否完成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(</span><br><span class="line">  &#123; <span class="attr">username</span>: <span class="string">'tylermcginnis33'</span> &#125;,</span><br><span class="line">  () =&gt; <span class="built_in">console</span>.log(<span class="string">'setState has finished and the component has re-rendered.'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="setState为什么默认是异步，什么时候是同步的"><a href="#setState为什么默认是异步，什么时候是同步的" class="headerlink" title="setState为什么默认是异步，什么时候是同步的"></a>setState为什么默认是异步，什么时候是同步的</h3><h3 id="下述代码有错吗？"><a href="#下述代码有错吗？" class="headerlink" title="下述代码有错吗？"></a>下述代码有错吗？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    streak: prevState.streak + props.count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这段代码没啥问题，不过只是不太常用罢了，详细可以参考React中setState同步更新策略</p><h3 id="React组件中怎么做事件代理"><a href="#React组件中怎么做事件代理" class="headerlink" title="React组件中怎么做事件代理"></a>React组件中怎么做事件代理</h3><ol><li>区别于浏览器事件处理方式，React并未将事件处理函数与对应的DOM节点直接关联，而是在顶层使用了一个全局事件监听器监听所有的事件；</li><li>React会在内部维护一个映射表记录事件与组件事件处理函数的对应关系；</li><li>当某个事件触发时，React根据这个内部映射表将事件分派给指定的事件处理函数；</li><li>当映射表中没有事件处理函数时，React不做任何操作；</li><li>当一个组件安装或者卸载时，相应的事件处理函数会自动被添加到事件监听器的内部映射表中或从表中删除。</li></ol><p>参考链接：</p><p><a href="https://blog.csdn.net/qq_38160012/article/details/80679420" target="_blank" rel="noopener">深入浅出React（五）（React组件事件详解）</a></p><hr><h2 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h2><h3 id="express框架的设计思想"><a href="#express框架的设计思想" class="headerlink" title="express框架的设计思想"></a>express框架的设计思想</h3><p>参考链接：<br><a href="https://blog.csdn.net/likendsl/article/details/52474820" target="_blank" rel="noopener">Express框架详解</a><br><a href="https://blog.csdn.net/u011413061/article/details/50442478" target="_blank" rel="noopener">深入理解express框架</a><br><a href="https://www.jianshu.com/p/492386e827e2?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">express框架的简单实现</a></p><h3 id="浏览器的事件循环和nodejs事件循环的区别"><a href="#浏览器的事件循环和nodejs事件循环的区别" class="headerlink" title="浏览器的事件循环和nodejs事件循环的区别"></a>浏览器的事件循环和nodejs事件循环的区别</h3><p><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">阮一峰：JavaScript 运行机制详解：再谈Event Loop</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="怎么配webpack"><a href="#怎么配webpack" class="headerlink" title="怎么配webpack"></a>怎么配webpack</h3><p><a href="http://webpack.wuhaolin.cn/" target="_blank" rel="noopener">深入浅出 Webpack</a></p><h3 id="npm2和npm3-有什么区别"><a href="#npm2和npm3-有什么区别" class="headerlink" title="npm2和npm3+有什么区别"></a>npm2和npm3+有什么区别</h3><p><a href="https://www.jianshu.com/p/69ba32550c08" target="_blank" rel="noopener">npm3 与 npm2 相比有什么改进?</a></p><h3 id="打包时Hash码是怎么生成的"><a href="#打包时Hash码是怎么生成的" class="headerlink" title="打包时Hash码是怎么生成的"></a>打包时Hash码是怎么生成的</h3><p><a href="https://www.cnblogs.com/ihardcoder/p/5623411.html?locationNum=13&amp;fps=1" target="_blank" rel="noopener">Webpack中hash与chunkhash的区别</a></p><h2 id="推荐链接"><a href="#推荐链接" class="headerlink" title="推荐链接"></a>推荐链接</h2><ol><li><a href="https://finget.github.io/2018/07/03/http/" target="_blank" rel="noopener">前端工程师，揭开HTTP的神秘面纱</a></li><li><a href="https://yuchengkai.cn/docs/frontend/" target="_blank" rel="noopener">前端工程师，必备知识</a></li><li><a href="http://webpack.wuhaolin.cn/" target="_blank" rel="noopener">深入浅出 Webpack</a></li><li><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/" target="_blank" rel="noopener">js函数式编程指南</a></li><li><a href="https://ustbhuangyi.github.io/vue-analysis/" target="_blank" rel="noopener">Vue.js技术揭秘</a></li><li><a href="https://funteas.com/topic/5a64e9482630e6f31583701d" target="_blank" rel="noopener">从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a></li><li><a href="https://yangbo5207.github.io/wutongluo/ji-chu-jin-jie-xi-lie.html" target="_blank" rel="noopener">前端基础进阶</a></li><li><a href="https://juejin.im/post/597724c26fb9a06bb75260e8" target="_blank" rel="noopener">八段代码彻底掌握Promise</a></li><li><a href="https://segmentfault.com/a/1190000009183220" target="_blank" rel="noopener">通俗大白话来理解TCP协议的三次握手和四次分手</a></li><li><a href="https://github.com/FinGet/Blog-1" target="_blank" rel="noopener">js深入底层系列</a></li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      网上找到的各种面试题整理，长期更新。
    
    </summary>
    
      <category term="面试题" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式之代理模式</title>
    <link href="http://yoursite.com/2018/11/28/proxy/"/>
    <id>http://yoursite.com/2018/11/28/proxy/</id>
    <published>2018-11-28T10:06:49.000Z</published>
    <updated>2019-05-05T08:13:43.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代理模式简介"><a href="#代理模式简介" class="headerlink" title="代理模式简介"></a>代理模式简介</h2><blockquote><p>使用者无权访问目标对象，中间加代理，通过代理做授权和控制</p></blockquote><p>什么Nginx代理、JSONP、科学上网…，你平时的工作中可能都用了代理模式，只是你不知道。</p><p>模式作用：</p><ol><li>远程代理(一个对象将不同空间的对象进行局部代理)</li><li>虚拟代理(根据需要创建开销很大的对象如渲染网页暂时用占位图代替真图)</li><li>安全代理(控制真实对象的访问权限，经纪人一般都是暴露自己的电话，明星的电话一般情况都不会泄漏)</li><li>智能指引(调用对象代理处理另外一些事情如垃圾回收机制)</li></ol><p>UML类图<br><img src="https://i.imgur.com/hF04ECE.png" alt></p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代理模式需要三方(买房的过程)</span></span><br><span class="line"><span class="comment">// 1.买家</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buyer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'FinGet'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.中介</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">agency</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 卖房</span></span><br><span class="line">agency.prototype.sellhouse = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">new</span> seller(<span class="keyword">new</span> buyer()).sell(<span class="string">'100W'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.卖家</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">seller</span>(<span class="params">buyer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.buyerName = buyer.name</span><br><span class="line">  <span class="keyword">this</span>.sell = <span class="function"><span class="keyword">function</span>(<span class="params">money</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`收到了<span class="subst">$&#123;<span class="keyword">this</span>.buyerName&#125;</span>的<span class="subst">$&#123;money&#125;</span>,房子卖出`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ES6-Proxy"><a href="#ES6-Proxy" class="headerlink" title="ES6 Proxy"></a>ES6 Proxy</h2><blockquote><p><a href="http://es6.ruanyifeng.com/#docs/proxy" target="_blank" rel="noopener">阮一峰ES6,http://es6.ruanyifeng.com/#docs/proxy</a></p></blockquote><blockquote><p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 明星</span></span><br><span class="line"><span class="keyword">let</span> star = &#123;</span><br><span class="line">  name: <span class="string">'张XX'</span>,</span><br><span class="line">  age: <span class="number">25</span>,</span><br><span class="line">  phone: <span class="string">'13910733521'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 经纪人</span></span><br><span class="line"><span class="keyword">let</span> agent = <span class="keyword">new</span> <span class="built_in">Proxy</span>(star, &#123;</span><br><span class="line">  <span class="keyword">get</span>: function (target, key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">'phone'</span>) &#123;</span><br><span class="line">      <span class="comment">// 返回经纪人自己的手机号</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'18611112222'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">'price'</span>) &#123;</span><br><span class="line">      <span class="comment">// 明星不报价，经纪人报价</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">120000</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target[key]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span>: function (target, key, val) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">'customPrice'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (val &lt; <span class="number">100000</span>) &#123;</span><br><span class="line">        <span class="comment">// 最低 10w</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'价格太低'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        target[key] = val</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主办方</span></span><br><span class="line"><span class="built_in">console</span>.log(agent.name)</span><br><span class="line"><span class="built_in">console</span>.log(agent.age)</span><br><span class="line"><span class="built_in">console</span>.log(agent.phone)</span><br><span class="line"><span class="built_in">console</span>.log(agent.price)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 想自己提供报价（砍价，或者高价争抢）</span></span><br><span class="line">agent.customPrice = <span class="number">150000</span></span><br><span class="line"><span class="comment">// agent.customPrice = 90000  // 报错：价格太低</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'customPrice'</span>, agent.customPrice)</span><br></pre></td></tr></table></figure><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>适配器模式与代理模式：</p><ul><li>适配器模式：提供一个不同的接口（如不同的插头）</li><li>代理模式： 提供一模一样的接口<br>装饰器模式与代理模式：</li><li>装饰器模式： 扩展功能，原有功能不变且可以直接使用</li><li>代理模式： 显示原有功能，但是经过限制或者是阉割之后的</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      学习设计模式笔记————JavaScript设计模式之代理模式
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>归纳总结this的指向问题</title>
    <link href="http://yoursite.com/2018/11/28/this/"/>
    <id>http://yoursite.com/2018/11/28/this/</id>
    <published>2018-11-28T06:00:20.000Z</published>
    <updated>2019-05-05T08:13:43.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><blockquote><p>this:上下文,会根据执行环境变化而发生指向的改变.</p></blockquote><p>1.单独的this，指向的是window这个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="keyword">this</span>); <span class="comment">// this -&gt; window</span></span><br></pre></td></tr></table></figure><p>2.全局函数中的this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>); <span class="comment">// this -&gt; window</span></span><br><span class="line">&#125;</span><br><span class="line">demo();</span><br></pre></td></tr></table></figure><p><strong>在严格模式下，this是undefined.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  alert(<span class="keyword">this</span>); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line">demo();</span><br></pre></td></tr></table></figure><p>3.函数调用的时候，前面加上new关键字</p><blockquote><p>所谓构造函数，就是通过这个函数生成一个新对象，这时，this就指向这个对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//alert(this); // this -&gt; object</span></span><br><span class="line">  <span class="keyword">this</span>.testStr = <span class="string">'this is a test'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> demo();</span><br><span class="line">alert(a.testStr); <span class="comment">// 'this is a test'</span></span><br></pre></td></tr></table></figure><p>4.用call与apply的方式调用函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">demo.call(<span class="string">'abc'</span>); <span class="comment">// abc</span></span><br><span class="line">demo.call(<span class="literal">null</span>); <span class="comment">// this -&gt; window</span></span><br><span class="line">demo.call(<span class="literal">undefined</span>); <span class="comment">// this -&gt; window</span></span><br></pre></td></tr></table></figure><p>5.定时器中的this，指向的是window</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>); <span class="comment">// this -&gt; window ，严格模式 也是指向window</span></span><br><span class="line">&#125;,<span class="number">500</span>)</span><br></pre></td></tr></table></figure><p>6.元素绑定事件，事件触发后，执行的函数中的this，指向的是当前元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> $btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">  $btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>); <span class="comment">// this -&gt; 当前触发</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.函数调用时如果绑定了bind，那么函数中的this指向了bind中绑定的元素<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> $btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">  $btn.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>); <span class="comment">// window</span></span><br><span class="line">  &#125;.bind(<span class="built_in">window</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>8.对象中的方法，该方法被哪个对象调用了，那么方法中的this就指向该对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'finget'</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'FinGet'</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.getName(); <span class="comment">// FinGet</span></span><br><span class="line">---------------------------分割线----------------------------</span><br><span class="line"><span class="keyword">let</span> fn = obj.getName;</span><br><span class="line">fn(); <span class="comment">//finget   this -&gt; window</span></span><br></pre></td></tr></table></figure><p><strong>腾讯笔试题</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  x: <span class="number">15</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.x</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a.fn());</span><br><span class="line"><span class="built_in">console</span>.log((a.fn())());</span><br><span class="line"><span class="built_in">console</span>.log(a.fn()());</span><br><span class="line"><span class="built_in">console</span>.log(a.fn()() == (a.fn())());</span><br><span class="line"><span class="built_in">console</span>.log(a.fn().call(<span class="keyword">this</span>));</span><br><span class="line"><span class="built_in">console</span>.log(a.fn().call(a));</span><br></pre></td></tr></table></figure><p><strong>答案</strong></p><p>1.<code>console.log(a.fn());</code><br>对象调用方法，返回了一个方法。<br><code># function() {return this.x}</code></p><p>2.<code>console.log((a.fn())());</code><br>a.fn()返回的是一个函数，<code>()()</code>这是自执行表达式。this -&gt; window<br><code># 20</code></p><p>3.<code>console.log(a.fn()());</code><br>a.fn()相当于在全局定义了一个函数，然后再自己调用执行。this -&gt; window<br><code># 20</code></p><p>4.<code>console.log(a.fn()() == (a.fn())());</code><br><code># true</code></p><p>5.<code>console.log(a.fn().call(this));</code><br>这段代码在全局环境中执行，this -&gt; window<br><code># 20</code></p><p>6.<code>console.log(a.fn().call(a));</code><br>this -&gt; a<br><code># 15</code></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      this关键字，指向问题总结
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="this" scheme="http://yoursite.com/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式之装饰器模式</title>
    <link href="http://yoursite.com/2018/11/22/decorator/"/>
    <id>http://yoursite.com/2018/11/22/decorator/</id>
    <published>2018-11-22T09:41:36.000Z</published>
    <updated>2019-05-05T08:13:43.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><blockquote><p>为对象添加新功能；不改变其原有的结构和功能。</p></blockquote><p>手机壳就是装饰器，没有它手机也能正常使用，原有的功能不变，手机壳可以减轻手机滑落的损耗。<br><img src="https://i.imgur.com/16vwyqI.png" alt></p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  draw() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'画一个圆形'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(circle) &#123;</span><br><span class="line">    <span class="keyword">this</span>.circle = circle</span><br><span class="line">  &#125;</span><br><span class="line">  draw() &#123;</span><br><span class="line">    <span class="keyword">this</span>.circle.draw()</span><br><span class="line">    <span class="keyword">this</span>.setRedBorder(circle)</span><br><span class="line">  &#125;</span><br><span class="line">  setRedBorder(circle) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'设置红色边框'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">let</span> circle = <span class="keyword">new</span> Circle()</span><br><span class="line">circle.draw()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> decorator = <span class="keyword">new</span> Decorator(cicle)</span><br><span class="line">decorator.draw()</span><br></pre></td></tr></table></figure><h3 id="ES7装饰器"><a href="#ES7装饰器" class="headerlink" title="ES7装饰器"></a>ES7装饰器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单的装饰器</span></span><br><span class="line">@testDec <span class="comment">// 装饰器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDec</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">  target.isDec = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Demo.isDec) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 装饰器原理</span></span><br><span class="line">@decorator</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line">A = decorator(A) || A; <span class="comment">// 把A 作为参数，返回运行的结果</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testDec</span>(<span class="params">isDec</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123; <span class="comment">// 这里要 return 一个函数</span></span><br><span class="line">    target.isDec = isDec;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@testDec(<span class="literal">true</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">alert(Demo.isDec) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="装饰类"><a href="#装饰类" class="headerlink" title="装饰类"></a>装饰类</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixins</span>(<span class="params">...list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(target.prototype, ...list)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Foo = &#123;</span><br><span class="line">  foo() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@mixins(Foo)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myclass = <span class="keyword">new</span> MyClass()</span><br><span class="line">myclass.foo() <span class="comment">// 'foo'</span></span><br></pre></td></tr></table></figure><h4 id="装饰方法"><a href="#装饰方法" class="headerlink" title="装饰方法"></a>装饰方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例1 只读</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readonly</span>(<span class="params">target, name, descriptor</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// descriptor对象原来的值如下</span></span><br><span class="line">  <span class="comment">// &#123;</span></span><br><span class="line">  <span class="comment">//   value: specifiedFunction,</span></span><br><span class="line">  <span class="comment">//   enumerable: false, // 可枚举</span></span><br><span class="line">  <span class="comment">//   configurable: true, // 可配置</span></span><br><span class="line">  <span class="comment">//   writable: true // 可写</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line">  descriptor.writable = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.first = <span class="string">'A'</span></span><br><span class="line">    <span class="keyword">this</span>.last = <span class="string">'B'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @readonly</span><br><span class="line">  name() &#123; <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.first&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.last&#125;</span>`</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(p.name())</span><br><span class="line">p.name = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 这里会报错，因为 name 是只读属性</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例2 打印日志</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">target, name, descriptor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> oldValue = descriptor.value;</span><br><span class="line"></span><br><span class="line">  descriptor.value = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 先打印日子</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Calling <span class="subst">$&#123;name&#125;</span> with`</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// 2. 执行原来的代码，并返回</span></span><br><span class="line">    <span class="keyword">return</span> oldValue.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Math</span> </span>&#123;</span><br><span class="line">  @log</span><br><span class="line">  add(a, b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> math = <span class="keyword">new</span> <span class="built_in">Math</span>();</span><br><span class="line"><span class="keyword">const</span> result = math.add(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'result'</span>, result);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/jayphelps/core-decorators" target="_blank" rel="noopener">成熟的装饰器库</a></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      学习设计模式笔记————JavaScript设计模式之装饰器模式
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式之适配器模式</title>
    <link href="http://yoursite.com/2018/11/22/adapter/"/>
    <id>http://yoursite.com/2018/11/22/adapter/</id>
    <published>2018-11-22T08:32:25.000Z</published>
    <updated>2019-05-05T08:13:43.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><blockquote><p>适配器模式(Adapter)是将一个类(对象)的接口(方法或属性)转换成客户希望的另外一个接口(方法或属性),适配器模式使得原本由于接口不兼容而不能一起工作的那些类(对象)可以一起工作。[旧接口格式和使用者不兼容，中间加一个适配器转换接口。]</p></blockquote><p><img src="https://i.imgur.com/6gHYqna.png" alt><br><img src="https://i.imgur.com/cWifkCQ.png" alt></p><p>UML<br><img src="https://i.imgur.com/FLUn9OL.png" alt></p><p>模式作用： </p><ul><li>使用一个已经存在的对象，但其方法或接口不符合你的要求。</li><li>创建一个可复用的对象，该对象可以与其他不相关或不可见的对象协同工作。</li><li>使用已经存在的一个或多个对象，但是不能进行继承已匹配它的接口。</li></ul><p>注意事项：</p><ul><li>与代理模式的区别，代理模式是不改变原接口，适配是原接口不符合规范</li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//谷歌地图show方法</span></span><br><span class="line"><span class="keyword">var</span> googleMap = &#123;</span><br><span class="line">  googlShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"谷歌地图"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//百度地图show方法</span></span><br><span class="line"><span class="keyword">var</span> baiduMap = &#123;</span><br><span class="line">  baiduShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"百度地图"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//渲染地图函数</span></span><br><span class="line"><span class="keyword">var</span> renderMap=<span class="function"><span class="keyword">function</span>(<span class="params">map</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(map.show <span class="keyword">instanceof</span> <span class="built_in">Function</span>)&#123;</span><br><span class="line">    map.show();        </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">renderMap(googleMap);<span class="comment">//输出:开始渲染谷歌地图</span></span><br><span class="line">renderMap(baiduMap);<span class="comment">//输出:开始渲染百度地图</span></span><br></pre></td></tr></table></figure><p>适配器模式还有数据的适配，在现在开发中，各种UI框架层出不穷(elementUI),每个框架中对组件数据格式的定义不一样，后台返回的数据也不能完全按照框架的格式，这时作为前端程序猿，我们就需要把后台返回的数据做一次修改，以适应框架。这就是设配器的想法，不要听到设计模式就很恼火，说不定你每天都在用！！！</p><p><img src="https://i.imgur.com/7j1VIsF.png" alt></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      学习设计模式笔记————JavaScript设计模式之适配器模式
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式之单例模式</title>
    <link href="http://yoursite.com/2018/11/06/single/"/>
    <id>http://yoursite.com/2018/11/06/single/</id>
    <published>2018-11-06T06:37:01.000Z</published>
    <updated>2019-05-05T08:13:43.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote><p>系统中被唯一使用，一个类只有一个实例。实现方法一般是先判断实例是否存在，如果存在就返回，不存在就创建再返回。<br>在JavaScript里，单例作为空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象。</p></blockquote><p>模式作用：</p><ul><li>模块间通信</li><li>系统中某个类的对象只能存在一个</li><li>保护自己的属性和方法</li></ul><p>注意事项：</p><ul><li>注意this的使用</li><li>闭包容易造成内存泄漏，不需要的赶快干掉</li><li>注意new的成本</li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>java中的单例模式<br><img src="https://i.imgur.com/hAMkgsZ.png" alt><br>java请类型可以私有化，外部new就会报错。</p><p>JavaScript中的单例模式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleObject</span> </span>&#123;</span><br><span class="line">  login() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'login'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 利用闭包实现了私有变量</span></span><br><span class="line">SingleObject.getInstance = (fucntion () &#123;</span><br><span class="line">  <span class="keyword">let</span> instance</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">  instance = <span class="keyword">new</span> SingleObject()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = SingleObject.getInstance()</span><br><span class="line">obj1.login()</span><br><span class="line"><span class="keyword">let</span> obj2 = SingleObject.getInstance()</span><br><span class="line">obj2.login()</span><br><span class="line"><span class="comment">// 两者是否相等</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1 === obj2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// js弱类型，没有私有方法，使用者还是可以直接new 一个 SingleObject，也会有 login方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'------------分割线------------'</span>)</span><br><span class="line"><span class="keyword">let</span> obj3 = <span class="keyword">new</span> SingleObject()</span><br><span class="line">obj3.login()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'obj1===obj3'</span>,obj1 === obj3) <span class="comment">// false 不是单例</span></span><br></pre></td></tr></table></figure></p><blockquote><p>最简单的单例模式，就是对象。在 JavaScript 中 定义一个对象(Object)，那么它的属性，就只能通过它自己调用。就算两个不同的对象，有相同的属性名，也不能相互调用，保护了自己属性。</p></blockquote><p>登录框 单例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'hide'</span></span><br><span class="line">  &#125;</span><br><span class="line">  show() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'show'</span>) &#123;</span><br><span class="line">      alert(<span class="string">'已经显示'</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'show'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'登录框已显示'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  hide() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === <span class="string">'hide'</span>) &#123;</span><br><span class="line">      alert(<span class="string">'已经隐藏'</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'hide'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'登录框已隐藏'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">LoginForm.getInstance = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> instance</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> LoginForm();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个页面中调用登录框</span></span><br><span class="line"><span class="keyword">let</span> login1 = LoginForm.getInstance()</span><br><span class="line">login1.show()</span><br><span class="line"><span class="comment">// login1.hide()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一个页面中调用登录框</span></span><br><span class="line"><span class="keyword">let</span> login2 = LoginForm.getInstance()</span><br><span class="line">login2.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两者是否相等</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'login1 === login2'</span>, login1 === login2)</span><br></pre></td></tr></table></figure></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      学习设计模式笔记————JavaScript设计模式之单例模式
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式之工厂模式</title>
    <link href="http://yoursite.com/2018/10/12/factory/"/>
    <id>http://yoursite.com/2018/10/12/factory/</id>
    <published>2018-10-12T07:21:45.000Z</published>
    <updated>2019-05-05T08:13:43.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工厂模式-简介"><a href="#工厂模式-简介" class="headerlink" title="工厂模式 简介"></a>工厂模式 简介</h2><blockquote><p>工厂模式定义一个用于创建对象的接口，这个接口由子类决定实例化哪一个类。该模式使一个类的实例化延迟到了子类。而子类可以重写接口方法以便创建的时候指定自己的对象类型(抽象工厂)。<br>将 new 操作单独封装，遇到new时，就要考虑是否该用工厂模式</p></blockquote><p>模式作用： </p><ul><li>对象的构建十分复杂</li><li>需要依赖具体的环境创建不同实例</li><li>处理大量具有相同属性的小对象</li></ul><p>注意事项：</p><ul><li>不能滥用工厂，有的时候仅仅是给代码增加复杂度</li></ul><p>UML<br><img src="https://i.imgur.com/yUjiRn8.png" alt></p><h3 id="在jquery中的应用"><a href="#在jquery中的应用" class="headerlink" title="在jquery中的应用"></a>在jquery中的应用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// product</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jQuery</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(selector) &#123;</span><br><span class="line">    <span class="keyword">let</span> slice = <span class="built_in">Array</span>.prototype.slice</span><br><span class="line">    <span class="keyword">let</span> dom = slice.call(<span class="built_in">document</span>.querySelectorAll(selector))</span><br><span class="line">    <span class="keyword">let</span> len = dom ? dom.length : <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">this</span>[i] = dom[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.length = len</span><br><span class="line">    <span class="keyword">this</span>.selector = selector || <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line">  append(node) &#123;&#125;</span><br><span class="line">  addClass(name) &#123;&#125;</span><br><span class="line">  html(data) &#123;&#125;</span><br><span class="line"><span class="comment">// 此处省略若干 API</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 工厂</span></span><br><span class="line"><span class="built_in">window</span>.$ = <span class="function"><span class="keyword">function</span> (<span class="params">selector</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> jQuery(selector)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单工厂-与-抽象工厂"><a href="#简单工厂-与-抽象工厂" class="headerlink" title="简单工厂 与 抽象工厂"></a>简单工厂 与 抽象工厂</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><blockquote><p>简单工厂模式：又叫静态工厂方法，由一个工厂对象决定创建某一种产品对象类的示例。主要用来创建同一类对象。</p></blockquote><p>去KFC点一个汉堡，服务员给你的是个汉堡，而不是牛肉、面粉、佐料…<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// KFC的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KFC</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 做汉堡</span></span><br><span class="line">  makeHbg () &#123;</span><br><span class="line"><span class="comment">// ...繁琐的工序</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'汉堡一个'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 炸鸡腿</span></span><br><span class="line">  makeChk () &#123;</span><br><span class="line"><span class="comment">// ...繁琐的工序</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'鸡腿一个'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 某一家KFC的店铺</span></span><br><span class="line"><span class="keyword">let</span> kfcFactory = <span class="function"><span class="keyword">function</span> (<span class="params">food</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> kfc = <span class="keyword">new</span> KFC()</span><br><span class="line">  <span class="keyword">switch</span> (food) &#123;</span><br><span class="line"><span class="keyword">case</span> hamburger:</span><br><span class="line">  <span class="keyword">return</span> kfc.makeHbg()</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> chicken:</span><br><span class="line">  <span class="keyword">return</span> kfc.makeChk()</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于顾客来说，他只需要‘传入’他需要的东西就好了，不用关心汉堡是怎么做出来的</span></span><br><span class="line">kfcFactory(hamburger); <span class="comment">// '汉堡一个'</span></span><br></pre></td></tr></table></figure></p><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><blockquote><p>工厂方法：通过对产品类的抽象使其创建业务主要负责用于创建多类产品的实例。</p></blockquote><p>现在有个工厂来生成所有的共享单车，模拟一下工厂模式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 别较真 栗子不好吃 理解这种方式就行</span></span><br><span class="line"><span class="keyword">let</span> Ofo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'ofo'</span></span><br><span class="line">  <span class="comment">// ... 省略每个品牌的独有的属性方法</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    div.innerHTML = <span class="string">'这是一辆ofo单车'</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>).appendChild(div)</span><br><span class="line">  &#125;)()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Mobike = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'Mobike'</span></span><br><span class="line">  <span class="comment">// ... 省略每个品牌的独有的属性方法</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    div.innerHTML = <span class="string">'这是一辆Mobike单车'</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>).appendChild(div)</span><br><span class="line">  &#125;)()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'hello'</span></span><br><span class="line">  <span class="comment">// ... 省略每个品牌的独有的属性方法</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    div.innerHTML = <span class="string">'这是一辆hello单车'</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>).appendChild(div)</span><br><span class="line">  &#125;)()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Blue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'blue'</span></span><br><span class="line">  <span class="comment">// ... 省略每个品牌的独有的属性方法</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    div.innerHTML = <span class="string">'这是一辆blue单车'</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>).appendChild(div)</span><br><span class="line">  &#125;)()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Bikefactory = <span class="function"><span class="keyword">function</span> (<span class="params">type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Ofo'</span>:</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Ofo()</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Mobike'</span>:</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Mobike()</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Hello'</span>:</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Hello()</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Blue'</span>:</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Blue()</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="安全模式类"><a href="#安全模式类" class="headerlink" title="安全模式类"></a>安全模式类</h4><blockquote><p>安全模式类是为了解决错误使用类而造成的错误。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Demo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Demo.prototype=&#123;</span><br><span class="line">  show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello Demo'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确使用</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> Demo()</span><br><span class="line">d.show();</span><br><span class="line"><span class="comment">// 错误使用</span></span><br><span class="line"><span class="keyword">var</span> d = Demo()</span><br><span class="line">d.show(); <span class="comment">// Uncaught TypeError:Cannot read property 'show' of undefined</span></span><br></pre></td></tr></table></figure><p>为了避免这类错误的发生，在构造函数开始时先判断当前对象this指代的是不是类(Demo)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Demo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Demo)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Demo()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> d =Demo();</span><br><span class="line">d.show(); <span class="comment">// 'Hello Demo'</span></span><br></pre></td></tr></table></figure><p>上面这样写，我们发现当共享单车的种类越来越多，需要添加新的共享单车时，就需要修改两处的代码，所以可以对它进行修改，按工厂模式方法来做。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Bikefactory = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用完全模式</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> Bikefactory) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="keyword">this</span>[type](name)</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Bikefactory(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Bikefactory.prototype = &#123;</span><br><span class="line">  Ofo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = <span class="string">'ofo'</span></span><br><span class="line">      <span class="comment">// ... 省略每个品牌的独有的属性方法</span></span><br><span class="line">      (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">        div.innerHTML = <span class="string">'这是一辆ofo单车'</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>).appendChild(div)</span><br><span class="line">      &#125;)()</span><br><span class="line">  &#125;,</span><br><span class="line">  Mobike: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><blockquote><p>抽象工厂模式：通过对类的工厂抽象使其业务用于对产品类簇的创建，而不负责创建某一类产品的实例。</p></blockquote><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>在JavaScript中abstract是一个保留字，所以目前来说还不能像传统的面向对象语言那样轻松的创建抽象类。抽象类是一种声明但不能使用的类，当你使用时就会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">let</span> Car = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Car.prototype = &#123;</span><br><span class="line">  run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用！'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在ES6中定义抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span>.target === Car) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span> (<span class="string">'抽象类不能实例化！'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义的Car中有一个run方法，继承与Car的子类都会拥有直接使用，需要重写。这也是抽象类的一个作用，即定义一个产品簇，并声明一些必备的方法，如果子类中没有重写这些方法，直接使用就会抛出错误。</p><h4 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> XMLHttpFactory = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">XMLHttpFactory.prototype = &#123;</span><br><span class="line"><span class="comment">// 如果真的要调用这个方法会抛出一个错误，它不能被实例化，只能用来派生子类</span></span><br><span class="line">  createFactory: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'This is an abstract class'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 经典继承</span></span><br><span class="line"><span class="keyword">var</span> XHRHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">XMLHttpFactory.call(<span class="keyword">this</span>) </span><br><span class="line">&#125;</span><br><span class="line">XHRHandler.prototype = <span class="keyword">new</span> XMLHttpFactory()</span><br><span class="line">XHRHandler.prototype.constructor = XHRHandler</span><br><span class="line"></span><br><span class="line">XHRHandler.prototype.createFactory = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> XMLHttp = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">    XMLHttp = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject)&#123;</span><br><span class="line">    XMLHttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHttp"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> XMLHttp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果没有看明白经典继承部分的代码，可以去看看<a href="https://finget.github.io/2018/09/13/proto/" target="_blank" rel="noopener">原型，原型链，call/apply</a>。</p></blockquote><p>用ES6的语法来实现一下抽象工厂，还是用共享单车的例子来改写一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 别较真 栗子不好吃 理解这种方式就行</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bike</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span>.target === Bike) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象类不能实例化!'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="comment">// ... 此处省略100行</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ... 此处省略100行</span></span><br><span class="line">  init () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'抽象方法不能调用！'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ofo</span> <span class="keyword">extends</span> <span class="title">Bike</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">'ofo'</span>)</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="comment">// ... 此处省略100行</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ... 此处省略100行</span></span><br><span class="line">  init () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是一辆ofo单车！'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mobike</span> <span class="keyword">extends</span> <span class="title">Bike</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Bike</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blue</span> <span class="keyword">extends</span> <span class="title">Bike</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... 更多的单车</span></span><br><span class="line"><span class="keyword">let</span> Bikefactory = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (name) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Ofo'</span>:</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Ofo()</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Mobike'</span>:</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Mobike()</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Hello'</span>:</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Hello()</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'Blue'</span>:</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Blue()</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>抽象工厂只留了一个“口子”，它不做具体的事，由它的子类，根据自身情况重写方法。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      学习设计模式笔记————JavaScript设计模式之工厂模式
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>原型，原型链，call/apply</title>
    <link href="http://yoursite.com/2018/09/13/proto/"/>
    <id>http://yoursite.com/2018/09/13/proto/</id>
    <published>2018-09-13T06:16:39.000Z</published>
    <updated>2019-05-05T08:13:43.823Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://finget.github.io/2018/05/10/javascript-prototype/" target="_blank" rel="noopener">JavaScript从初级往高级走系列————prototype</a></p></blockquote><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><blockquote><p>定义： 原型是function对象的一个属性，它定义了构造函数制造出的对象的公共祖先。通过该构造函数产生的对象，可以继承该原型的属性和方法。<strong>原型也是对象。</strong></p></blockquote><p>用一张图简单解释一下定义。<br><img src="https://i.imgur.com/pCqIPWN.png" alt></p><ol><li>每个函数上面都有一个原型属性(prototype)，这个属性会指向构造函数的原型对象(Person.prototype)</li><li>每个函数的原型对象(Person.protorype)默认都有一个constructor属性指向构造函数本身(Person)</li><li>每个实例都有一个隐式原型(<strong>proto</strong>)指向构造函数的原型对象(Person.prototype)</li><li>每个原型对象也有隐式原型(<strong>proto</strong>)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.LastName = <span class="string">'zhang'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Person.prototype  --- 原型 (自带的，当定义了构造函数，它就孕育而生了)</span></span><br><span class="line"><span class="comment">// Person.prototype = &#123;&#125; --- 原型对象 是祖先</span></span><br><span class="line">Person.prototype.name = <span class="string">'xiaoming'</span>;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// xiaoming (它自己没有，就会到原型(祖先)上去找)</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.LastName); <span class="comment">// zhang (它自己有，就会取自身的)</span></span><br></pre></td></tr></table></figure><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(person.constructor) <span class="comment">// function Person() &#123;&#125; </span></span><br><span class="line"><span class="comment">// person自己没有constructor,所以继承至原型</span></span><br></pre></td></tr></table></figure><p>Person.prototype:<br><img src="https://i.imgur.com/HA2kE3X.png" alt></p><blockquote><p>图中浅紫色的都是自带的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.constructor = Car; <span class="comment">// 改变constructor</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(person.constructor) <span class="comment">// function Car() &#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// __proto__</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="string">'zhangsan'</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(person.__proto__)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/CevHIfG.png" alt></p><h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><p>New的过程</p><ol><li>声明一个中间对象</li><li>将中间对象的原型指向构造函数的原型</li><li>将构造函数的this指向中间对象</li><li>返回中间对象，即实例对象</li></ol><p><a href="https://finget.github.io/2018/02/27/new/" target="_blank" rel="noopener">JavaScript —— New</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DNew</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var obj = &#123;&#125;; // var obj = new Object() 创建一个空对象 </span></span><br><span class="line">  <span class="comment">// var obj = Object.create(null);</span></span><br><span class="line">  Constructor = [].shift.call(<span class="built_in">arguments</span>); <span class="comment">// 获取第一个参数即构造函数</span></span><br><span class="line">  <span class="comment">// obj.__proto__ = Constructor.prototype; </span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(Constructor.prototype);</span><br><span class="line">  <span class="keyword">var</span> result = Constructor.apply(obj, <span class="built_in">arguments</span>); </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">'object'</span> ? result || obj : obj; <span class="comment">// 返回对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在通过<span class="keyword">new</span> 一个实例对象时：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="keyword">this</span> = &#123;</span><br><span class="line">    __proto__ : Person.prototype</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/wte5wno.png" alt></p><blockquote><p><code>person.__proto__</code> 与 <code>Person.prototype</code>是指向<strong>同一个内存地址</strong>，这也就是 为什么实例没有属性或方法会到原型上去查找</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="string">'zhangsan'</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</span><br><span class="line">Person.prototype.name = <span class="string">'lisi'</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// ???</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name = <span class="string">'zhangsan'</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  name : <span class="string">'lisi'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// ???</span></span><br></pre></td></tr></table></figure><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>先扔一张图：<br><img src="https://i.imgur.com/n00mTEp.png" alt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.__proto__ : <span class="built_in">Object</span>.prototype</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/geOTuN7.png" alt></p><p>例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Grand</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Grand.prototype.lastName = <span class="string">"zhang"</span></span><br><span class="line"><span class="keyword">var</span> grand = <span class="keyword">new</span> Grand()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Father.prototype = grand <span class="comment">// Father的原型指向grand对象</span></span><br><span class="line"><span class="keyword">var</span> father = <span class="keyword">new</span> Father()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Son.prototype = father <span class="comment">// Son的原型指向father</span></span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son()</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/I7oOvUi.png" alt></p><blockquote><p>上图中红线表示的就是原型链了</p></blockquote><h3 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.create(原型)</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">'zhang'</span>,<span class="attr">age</span>: <span class="number">23</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="built_in">Object</span>.create(obj)</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">'zhang'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="built_in">Object</span>.create(Person.prototype)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/gYLt4y8.png" alt></p><blockquote><p><code>Object.create(null)</code>,null就是一个空对象，没有原型。这也是·typeof null == ‘object’的原因</p></blockquote><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><blockquote><p><code>undefined</code>和<code>null</code>没有<code>toString()</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span>.toString()</span><br><span class="line"></span><br><span class="line"><span class="string">'abc'</span>.toString()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">123</span></span><br><span class="line">num.toString()</span><br><span class="line"><span class="comment">// 123.toString() 试一试会怎样</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">obj.toString() <span class="comment">// "[object Object]"</span></span><br></pre></td></tr></table></figure><p>toString来自哪？？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123</span></span><br><span class="line"><span class="comment">// num.toString(); --&gt; new Number(num).toString()</span></span><br><span class="line"><span class="comment">// Number重写 toString</span></span><br><span class="line"><span class="built_in">Number</span>.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Number.prototype.__proto__ = Object.prototype</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'重写toString'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</span><br><span class="line">person.toString() <span class="comment">// '重写toString'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.prototype.toString</span></span><br><span class="line"><span class="comment">// Number.prototype.toString</span></span><br><span class="line"><span class="comment">// Array.prototype.toString</span></span><br><span class="line"><span class="comment">// Boolean.prototype.toString</span></span><br><span class="line"><span class="comment">// String.prototype.toString</span></span><br></pre></td></tr></table></figure><p>toString隐藏功能：判断变量、对象的类型<br><img src="https://i.imgur.com/wN3E3GW.png" alt></p><h2 id="call-apply"><a href="#call-apply" class="headerlink" title="call/apply"></a>call/apply</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'zhang'</span>, <span class="number">23</span>)</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">Person.call(obj,<span class="string">'wang'</span>,<span class="number">30</span>) <span class="comment">// this指向obj</span></span><br><span class="line"><span class="comment">// obj = &#123;age:30,name:"wang"&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>call/apply不仅改变了this的指向，还会执行对应的方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cat = &#123;</span><br><span class="line">  name: <span class="string">'咪咪'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">beatTheMonster</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">beatTheMonster.call(cat);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.call 改变了this的指向。改变到了cat上。</span></span><br><span class="line"><span class="comment">// 2.beatTheMonster函数/方法执行了</span></span><br><span class="line"><span class="comment">// 3.bind()，保存了方法，并没有直接调用它</span></span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      重新理解一下原型与原型链
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>react-create-app 中配置使用 Mobx</title>
    <link href="http://yoursite.com/2018/08/15/mobx/"/>
    <id>http://yoursite.com/2018/08/15/mobx/</id>
    <published>2018-08-15T07:50:51.000Z</published>
    <updated>2019-05-05T08:13:43.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add mobx mobx-react</span><br><span class="line"></span><br><span class="line">yarn add babel-plugin-transform-decorators-legacy</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.dev.js webpack.congif.prod.js</span></span><br><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.(js|jsx|mjs)$/</span>,</span><br><span class="line">    include: paths.appSrc,</span><br><span class="line">    loader: <span class="built_in">require</span>.resolve(<span class="string">'babel-loader'</span>),</span><br><span class="line">    options: &#123;</span><br><span class="line">      plugins: [ <span class="comment">// 就加上这个plugins</span></span><br><span class="line">        [<span class="string">'transform-decorators-legacy'</span>]</span><br><span class="line">      ],</span><br><span class="line">      <span class="comment">// This is a feature of `babel-loader` for webpack (not Babel itself).</span></span><br><span class="line">      <span class="comment">// It enables caching results in ./node_modules/.cache/babel-loader/</span></span><br><span class="line">      <span class="comment">// directory for faster rebuilds.</span></span><br><span class="line">      cacheDirectory: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在 src 文件夹下 新建一个store文件夹<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> homeStore <span class="keyword">from</span> <span class="string">'./home_store.js'</span>;</span><br><span class="line"><span class="keyword">import</span> otherStore <span class="keyword">from</span> <span class="string">'./others.js'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;homeStore, otherStore&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// home_store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;observable, action, computed&#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeStore</span> </span>&#123;</span><br><span class="line">    @observable text;</span><br><span class="line">    @observable num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">this</span>.text = <span class="string">'Hello Word!'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @action </span><br><span class="line">    plus = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.num = ++<span class="keyword">this</span>.num</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    minus = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.num = --<span class="keyword">this</span>.num</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    change = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.text = str</span><br><span class="line">    &#125;</span><br><span class="line">    @computed</span><br><span class="line">    <span class="keyword">get</span> plusNum ()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.num + <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> homeStore = <span class="keyword">new</span> HomeStore()<span class="comment">//通过new 创建一个homeStore对象实例通过export导出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> homeStore</span><br><span class="line"></span><br><span class="line"><span class="comment">// others.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;observable, action&#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OthersStore</span> </span>&#123;</span><br><span class="line">    @observable str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.str = <span class="string">'这个值来自其他模块'</span></span><br><span class="line">    &#125;</span><br><span class="line">    @action </span><br><span class="line">    getdata = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    fetch(<span class="string">'api/comments/show?id=4199740256395164&amp;page=1'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;res.json().</span><br><span class="line">then(action(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// console.log(data);</span></span><br><span class="line"><span class="keyword">this</span>.str = data.msg;</span><br><span class="line">&#125;))</span><br><span class="line">&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> otherStore = <span class="keyword">new</span> OthersStore()<span class="comment">//通过new 创建一个homeStore对象实例通过export导出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> otherStore</span><br></pre></td></tr></table></figure></p><blockquote><p>在action 中请求数据，用action进行数据绑定</p></blockquote><p>全局注册<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js </span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'../../assets/img/logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">"mobx-react"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> store <span class="keyword">from</span> <span class="string">'../../store/index.js'</span><span class="comment">//将所有方法给预一个store的别名方面在不同组件中调用</span></span><br><span class="line"><span class="keyword">import</span> Mobx <span class="keyword">from</span> <span class="string">'../../views/mobx_test.js'</span>;</span><br><span class="line"><span class="keyword">import</span> Mobx2 <span class="keyword">from</span> <span class="string">'../../views/mobx2.js'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">          &lt;header className=<span class="string">"App-header"</span>&gt;</span><br><span class="line">            &lt;img src=&#123;logo&#125; className=<span class="string">"App-logo"</span> alt=<span class="string">"logo"</span> /&gt;</span><br><span class="line">            &lt;h1 className=<span class="string">"App-title"</span>&gt;Welcome to React&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>header&gt;</span><br><span class="line">          &lt;p className=<span class="string">"App-intro"</span>&gt;</span><br><span class="line">            To <span class="keyword">get</span> started, edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload.</span><br><span class="line">          &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">          &lt;Mobx&gt;&lt;/Mobx&gt;</span><br><span class="line">          &lt;Mobx2&gt;&lt;/Mobx2&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/Provider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure></p><p>组件中使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mobx2.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;observer,inject&#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span>;</span><br><span class="line">@inject(<span class="string">'store'</span>) <span class="comment">// 将store注入到当前组件中</span></span><br><span class="line">@observer <span class="comment">// 将该组件变成响应式组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mobx2</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.props.store.otherStore.getdata()</span><br><span class="line">&#125;</span><br><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;体现mobx的响应式&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;h2&gt;homeStore.text: &#123;this.props.store.homeStore.text&#125;&lt;/</span>h2&gt;</span><br><span class="line">&lt;h2&gt;homeStore.num: &#123;<span class="keyword">this</span>.props.store.homeStore.num&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;this.handleClick&#125;&gt; 点击获取数据修改str&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Mobx2;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mobx_test.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;observer,inject&#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span>;</span><br><span class="line">@inject(<span class="string">'store'</span>) <span class="comment">// 将store注入到当前组件中</span></span><br><span class="line">@observer <span class="comment">// 将该组件变成响应式组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mobx</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">handelPlus =<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.props.store.homeStore.plus()</span><br><span class="line">&#125;</span><br><span class="line">handelMinus =<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.store.homeStore.minus()</span><br><span class="line">&#125;</span><br><span class="line">handleChange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.props.store.homeStore.change(<span class="string">'哈哈哈哈，成功！'</span>)</span><br><span class="line">&#125;</span><br><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;Mobx Test&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;h2&gt;homeStore.text: &#123;this.props.store.homeStore.text&#125;&lt;/</span>h2&gt;</span><br><span class="line">&lt;h2&gt;homeStore.num: &#123;<span class="keyword">this</span>.props.store.homeStore.num&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">&lt;h3&gt;otherStore.str: &#123;this.props.store.otherStore.str&#125;&lt;/</span>h3&gt;</span><br><span class="line">&lt;h3&gt;homeStore.computed: &#123;<span class="keyword">this</span>.props.store.homeStore.plusNum&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">调用action: </span></span><br><span class="line"><span class="regexp">&lt;br/</span>&gt;</span><br><span class="line">&lt;button onClick=&#123;<span class="keyword">this</span>.handelMinus&#125;&gt;减&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;this.handelPlus&#125;&gt;加&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123;<span class="keyword">this</span>.handleChange&#125;&gt;改变 homeStore.text&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Mobx;</span><br></pre></td></tr></table></figure><blockquote><p>组件中使用时要注意 this 的问题，推荐使用箭头函数</p></blockquote><h2 id="另外一种只作为数据与视图的隔离"><a href="#另外一种只作为数据与视图的隔离" class="headerlink" title="另外一种只作为数据与视图的隔离"></a>另外一种只作为数据与视图的隔离</h2><blockquote><p>不做全局绑定 也没有响应</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store/good.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; observable, action &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; httpReq &#125; <span class="keyword">from</span> <span class="string">'../api/httpReq.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsModel</span> </span>&#123;</span><br><span class="line">@observable goodsList = [];</span><br><span class="line"></span><br><span class="line">@action</span><br><span class="line">getGoodsList = <span class="keyword">async</span> (id) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">'http://dev.xyf.78dk.com/v5/firstproductlists'</span>;</span><br><span class="line"><span class="keyword">const</span> method = <span class="string">'post'</span>;</span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">merchantId: id || <span class="number">1005</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> responseData = <span class="keyword">await</span> httpReq(&#123;url, method, params&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json());</span><br><span class="line"><span class="keyword">this</span>.goodsList = [].concat(responseData.data.productList);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// view/good.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;observer&#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span>;</span><br><span class="line">@observer</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="comment">// new数据实例</span></span><br><span class="line">  goodsModel = <span class="keyword">new</span> GoodsModel();</span><br><span class="line">  getProductList()&#123;</span><br><span class="line">  <span class="comment">// 调用实例方法</span></span><br><span class="line">  <span class="keyword">this</span>.goodsModel.getGoodsList();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">  <span class="comment">// 拿取数据</span></span><br><span class="line">  <span class="keyword">const</span> &#123; goodsList &#125; = <span class="keyword">this</span>.goodsModel;</span><br><span class="line">    <span class="keyword">return</span> ( </span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;goodsList&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      在react中两种使用mobx的形式
    
    </summary>
    
      <category term="mobx" scheme="http://yoursite.com/categories/mobx/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="mobx" scheme="http://yoursite.com/tags/mobx/"/>
    
  </entry>
  
  <entry>
    <title>前端工程师，揭开HTTP的神秘面纱</title>
    <link href="http://yoursite.com/2018/07/03/http/"/>
    <id>http://yoursite.com/2018/07/03/http/</id>
    <published>2018-07-03T09:25:39.000Z</published>
    <updated>2019-05-05T08:13:43.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器输入URL后HTTP请求返回过程"><a href="#浏览器输入URL后HTTP请求返回过程" class="headerlink" title="浏览器输入URL后HTTP请求返回过程"></a>浏览器输入URL后HTTP请求返回过程</h2><p><img src="https://i.imgur.com/l009YU4.png" alt></p><h2 id="网络协议分层"><a href="#网络协议分层" class="headerlink" title="网络协议分层"></a>网络协议分层</h2><h3 id="OSI七层协议"><a href="#OSI七层协议" class="headerlink" title="OSI七层协议"></a>OSI七层协议</h3><p><img src="https://i.imgur.com/Ft5xzr5.gif" alt></p><h3 id="五层协议"><a href="#五层协议" class="headerlink" title="五层协议"></a>五层协议</h3><p>五层协议只是OSI和TCP/IP的综合，实际应用还是TCP/IP的四层结构。</p><p><img src="https://i.imgur.com/FQ3DXON.png" alt></p><h3 id="TCP-IP-协议"><a href="#TCP-IP-协议" class="headerlink" title="TCP/IP 协议"></a>TCP/IP 协议</h3><blockquote><p>TCP(Transmission Control Protocol)传输控制协议</p></blockquote><p>TCP/IP协议将应用层、表示层、会话层合并为应用层，物理层和数据链路层合并为网络接口层</p><p><img src="https://i.imgur.com/Ou1tVS9.png" alt></p><h3 id="三种模型结构"><a href="#三种模型结构" class="headerlink" title="三种模型结构"></a>三种模型结构</h3><p><img src="https://i.imgur.com/3kS1Oq0.png" alt></p><p><img src="https://i.imgur.com/bsWKhAp.png" alt></p><h3 id="各层的作用"><a href="#各层的作用" class="headerlink" title="各层的作用"></a>各层的作用</h3><p><img src="https://i.imgur.com/OMCoUox.png" alt></p><ol><li><p>物理层：<br>主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。它的主要作用是传输比特流（就是由1、0转化为电流强弱来进行传输,到达目的地后在转化为1、0，也就是我们常说的数模转换与模数转换）。这一层的数据叫做比特。 　　</p></li><li><p>数据链路层：<br>定义了如何让格式化数据以进行传输，以及如何让控制对物理介质的访问。这一层通常还提供错误检测和纠正，以确保数据的可靠传输。 　　</p></li><li><p>网络层：<br>在位于不同地理位置的网络中的两个主机系统之间提供连接和路径选择。Internet的发展使得从世界各站点访问信息的用户数大大增加，而网络层正是管理这种连接的层。 　　</p></li><li><p>传输层：<br>定义了一些传输数据的协议和端口号（WWW端口80等），如：<br>TCP（transmission control protocol –传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据）<br>UDP（user datagram protocol–用户数据报协议，与TCP特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如QQ聊天数据就是通过这种方式传输的）。 主要是将从下层接收的数据进行分段和传输，到达目的地址后再进行重组。常常把这一层数据叫做段。 　　</p></li><li><p>会话层：<br>通过运输层（端口号：传输端口与接收端口）建立数据传输的通路。主要在你的系统之间发起会话或者接受会话请求（设备之间需要互相认识可以是IP也可以是MAC或者是主机名） 　　</p></li><li><p>表示层：<br>可确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。例如，PC程序与另一台计算机进行通信，其中一台计算机使用扩展二一十进制交换码（EBCDIC），而另一台则使用美国信息交换标准码（ASCII）来表示相同的字符。如有必要，表示层会通过使用一种通格式来实现多种数据格式之间的转换。 　　</p></li><li><p>应用层：<br>是最靠近用户的OSI层。这一层为用户的应用程序（例如电子邮件、文件传输和终端仿真）提供网络服务。</p></li></ol><h2 id="HTTP-发展历史"><a href="#HTTP-发展历史" class="headerlink" title="HTTP 发展历史"></a>HTTP 发展历史</h2><h3 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP/0.9"></a>HTTP/0.9</h3><ul><li style="list-style: none"><input type="checkbox" checked> 只有一个命令GET</li><li style="list-style: none"><input type="checkbox" checked> 响应类型: 仅 超文本</li><li style="list-style: none"><input type="checkbox" checked> 没有header等描述数据的信息</li><li style="list-style: none"><input type="checkbox" checked> 服务器发送完毕，就关闭TCP连接</li></ul><h3 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h3><ul><li style="list-style: none"><input type="checkbox" checked> 增加了很多命令（post HESD ）</li><li style="list-style: none"><input type="checkbox" checked> 增加status code 和 header</li><li style="list-style: none"><input type="checkbox" checked> 多字符集支持、多部分发送、权限、缓存等</li><li style="list-style: none"><input type="checkbox" checked> 响应：不再只限于超文本 (Content-Type 头部提供了传输 HTML 之外文件的能力 — 如脚本、样式或媒体文件)</li></ul><h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h3><ul><li style="list-style: none"><input type="checkbox" checked> 持久连接。TCP三次握手会在任何连接被建立之前发生一次。最终，当发送了所有数据之后，服务器发送一个消息，表示不会再有更多数据向客户端发送了；则客户端才会关闭连接（断开 TCP）</li><li style="list-style: none"><input type="checkbox" checked> 支持的方法: <code>GET</code> , <code>HEAD</code> , <code>POST</code> , <code>PUT</code> ,<code>DELETE</code> , <code>TRACE</code> , <code>OPTIONS</code></li><li style="list-style: none"><input type="checkbox" checked> 进行了重大的性能优化和特性增强，分块传输、压缩/解压、内容缓存磋商、虚拟主机（有单个IP地址的主机具有多个域名）、更快的响应，以及通过增加缓存节省了更多的带宽</li></ul><h3 id="HTTP2"><a href="#HTTP2" class="headerlink" title="HTTP2"></a>HTTP2</h3><ul><li style="list-style: none"><input type="checkbox" checked> 所有数据以二进制传输。HTTP1.x是基于文本的，无法保证健壮性，HTTP2.0绝对使用新的二进制格式，方便且健壮</li><li style="list-style: none"><input type="checkbox" checked> 同一个连接里面发送多个请求不再需要按照顺序来</li><li style="list-style: none"><input type="checkbox" checked> 头信息压缩以及<strong>推送</strong>等提高效率的功能</li></ul><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><blockquote><p>客服端和服务端在进行http请求和返回的工程中，需要创建一个<code>TCP  connection</code>（由客户端发起）,http不存在连接这个概念，它只有请求和响应。请求和响应都是数据包，它们之间的传输通道就是<code>TCP connection</code>。</p></blockquote><p><img src="https://i.imgur.com/sPsrDR1.png" alt></p><p>位码即tcp标志位，有6种标示：SYN(synchronous建立联机) ACK(acknowledgement 确认) PSH(push传送) FIN(finish结束) RST(reset重置) URG(urgent紧急)Sequence number(顺序号码) Acknowledge number(确认号码)</p><p>第一次握手：主机A发送位码为syn＝1，随机产生seq  number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；（第一次握手，由浏览器发起，告诉服务器我要发送请求了）</p><p>第二次握手：主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包；（第二次握手，由服务器发起，告诉浏览器我准备接受了，你赶紧发送吧）</p><p>第三次握手：主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功；（第三次握手，由浏览器发送，告诉服务器，我马上就发了，准备接受吧）</p><blockquote><p>谢希仁著《计算机网络》中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”。</p></blockquote><h2 id="URI、URL、URN"><a href="#URI、URL、URN" class="headerlink" title="URI、URL、URN"></a>URI、URL、URN</h2><blockquote><p>URI: Uniform Resource Identifier/统一资源标识符<br>URL: Uniform Resource Locator/统一资源定位器<br>URN: Uniform Resource Name/永久统一资源定位符</p></blockquote><p>web上的各种资源（html、图片、视频、音频等）都由一个URI标识定位。URI相当于它们的详细“家庭住址”。</p><p>URI包含了URL和URN。</p><p><img src="http://ww4.sinaimg.cn/mw690/6941baebgw1evu0o8swewj20go0avq3e.jpg" alt></p><blockquote><p>URL是URI的一种，不仅标识了Web 资源，还指定了操作或者获取方式，同时指出了主要访问机制和网络位置。</p></blockquote><blockquote><p>URN是URI的一种，用特定命名空间的名字标识资源。使用URN可以在不知道其网络位置及访问方式的情况下讨论资源。</p></blockquote><p>网上的一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 这是一个URI</span><br><span class="line">http://bitpoetry.io/posts/hello.html#intro</span><br><span class="line"></span><br><span class="line">// 资源访问方式</span><br><span class="line">http://</span><br><span class="line"></span><br><span class="line">// 资源存储位置</span><br><span class="line">bitpoetry.io/posts/hello.html</span><br><span class="line"></span><br><span class="line">#intro // 资源</span><br><span class="line"></span><br><span class="line">// URL</span><br><span class="line">http://bitpoetry.io/posts/hello.html</span><br><span class="line"></span><br><span class="line">// URN</span><br><span class="line">bitpoetry.io/posts/hello.html#intro</span><br></pre></td></tr></table></figure><h2 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h2><p>请求报文：<br><img src="https://i.imgur.com/AVQ3UcM.jpg" alt></p><p>响应报文：<br><img src="https://i.imgur.com/o0vnSMW.jpg" alt></p><h2 id="HTTP-各种特性"><a href="#HTTP-各种特性" class="headerlink" title="HTTP 各种特性"></a>HTTP 各种特性</h2><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><blockquote><p>curl命令是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。做网页处理流程和数据检索自动化，curl可以祝一臂之力。</p></blockquote><p><a href="http://man.linuxde.net/curl" target="_blank" rel="noopener">更详细的CURL，点这里。</a></p><p>curl 访问 <code>baidu.com</code>:<br><img src="https://i.imgur.com/NizwtqN.png" alt></p><p>返回的内容中，html部分只有一个meta标签，<code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=http://www.baidu.com/&quot;&gt;</code>，这是因为我们访问的是<code>baidu.com</code>，在浏览器中，浏览器会自动解析这个meta标签并重定向到<code>http://www.baidu.com/</code>，然而命令行中并没有解析的功能。</p><p>curl 访问 <code>www.baidu.com</code>:<br><img src="https://i.imgur.com/dAd9J4X.png" alt></p><h4 id="curl常用命令"><a href="#curl常用命令" class="headerlink" title="curl常用命令"></a>curl常用命令</h4><p><code>-v</code> 显示详细的请求信息</p><p><img src="https://i.imgur.com/okOHC3s.png" alt></p><p><code>-X</code> 指定请求方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET www.xxxx.com/xx/xx?xx=123</span><br><span class="line"></span><br><span class="line">curl -X POST www.xxxx.com/xx/xx?xx=123</span><br></pre></td></tr></table></figure><p><code>-o / -O</code> 保存下载的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 将文件下载到本地并命名为mygettext.html</span><br><span class="line">curl -o mygettext.html http://www.gnu.org/software/gettext/manual/gettext.html</span><br><span class="line"></span><br><span class="line">// 将文件保存到本地并命名为gettext.html</span><br><span class="line">curl -O http://www.gnu.org/software/gettext/manual/gettext.html</span><br></pre></td></tr></table></figure><h3 id="CORS跨域请求的限制与解决"><a href="#CORS跨域请求的限制与解决" class="headerlink" title="CORS跨域请求的限制与解决"></a>CORS跨域请求的限制与解决</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server1.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'request come'</span>, request.url)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> html = fs.readFileSync(<span class="string">'test.html'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  response.end(html)</span><br><span class="line">&#125;).listen(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server listening on 8888'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server2.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'request come'</span>, request.url)</span><br><span class="line"></span><br><span class="line">  response.end(<span class="string">'123'</span>)</span><br><span class="line">&#125;).listen(<span class="number">8887</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server listening on 8887'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// test.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  fetch(<span class="string">'http://127.0.0.1:8887'</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/9zkYqTV.png" alt></p><p>处理方法：<br>1.服务器端处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server2.js 服务器端设置允许跨域</span></span><br><span class="line">response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">  <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span> <span class="comment">// * 表示任何域名下都可以访问这个服务,也可以指定域名</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>2.jsonp<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// test.html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://127.0.0.1:8887"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>就算存在跨域，请求还是会发送，响应也会返回，只是浏览器端发现了存在跨域问题就将返回内容屏蔽了，并报错提示。</p></blockquote><h3 id="CORS-预请求"><a href="#CORS-预请求" class="headerlink" title="CORS 预请求"></a>CORS 预请求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// test.html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  fetch(<span class="string">'http://127.0.0.1:8887'</span>,&#123;</span></span><br><span class="line"><span class="javascript">    method: <span class="string">'post'</span>,</span></span><br><span class="line"><span class="undefined">    headers: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="string">'X-Test-Cors'</span>: <span class="string">'123'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/TdGoUJV.png" alt></p><p>我们设置的请求头中<code>X-Test-Cors</code>在跨域请求的时候，不被允许。</p><p>虽然不允许跨域，但是请求仍然会发送，并返回成功。<br><img src="https://i.imgur.com/deoApDA.png" alt></p><p>默认允许的请求方法：</p><ul><li>GET </li><li>HEAD</li><li>POST</li></ul><p>其他的方法(PUT、DELETE)都需要预请求验证的。</p><p>默认允许的<code>Content-Type</code>:</p><ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul><p>怎样设置允许我们设置的请求头：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server2.js </span></span><br><span class="line">response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">  <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">  <span class="string">'Access-Control-Allow-Headers'</span>: <span class="string">'X-Test-Cors'</span> <span class="comment">// 加上这个设置</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/gCaBgsm.png" alt></p><p>首先发送一个预请求，预请求就是告诉浏览器接下来要发送的post请求是被允许的。</p><p>设置允许的请求方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server2.js </span></span><br><span class="line">response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">  <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">  <span class="string">'Access-Control-Allow-Headers'</span>: <span class="string">'X-Test-Cors'</span>,</span><br><span class="line">  <span class="string">'Access-Control-Allow-Methods'</span>: <span class="string">'POST, PUT, DELETE'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>设置一个安全时间：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server2.js </span></span><br><span class="line">response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">  <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">  <span class="string">'Access-Control-Allow-Headers'</span>: <span class="string">'X-Test-Cors'</span>,</span><br><span class="line">  <span class="string">'Access-Control-Allow-Methods'</span>: <span class="string">'POST, PUT, DELETE'</span>,</span><br><span class="line">  <span class="string">'Access-Control-Max-Age'</span>: <span class="string">'1000'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><code>Access-Control-Max-Age</code>的单位是秒，意思就是在多少秒以内，我们设置的这些允许的请求头，请求方法，是不需要发送预请求验证的，直接就可以通过，并发送。</p><h3 id="缓存Cache-Control"><a href="#缓存Cache-Control" class="headerlink" title="缓存Cache-Control"></a>缓存Cache-Control</h3><p>常用值：<br><img src="https://i.imgur.com/mbdP7DC.png" alt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'request come'</span>, request.url)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (request.url === <span class="string">'/'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> html = fs.readFileSync(<span class="string">'test.html'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    response.end(html)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (request.url === <span class="string">'/script.js'</span>) &#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/javascript'</span>,</span><br><span class="line">      <span class="string">'Cache-Control'</span>: <span class="string">'max-age=20,public'</span> <span class="comment">// 缓存20s 多个值用逗号分开</span></span><br><span class="line">    &#125;)</span><br><span class="line">    response.end(<span class="string">'console.log("script loaded")'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).listen(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server listening on 8888'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// test.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/script.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/gDDrIrc.png" alt></p><p>刷新会发现<code>script.js</code>是从缓存中获取的，请求时间也是0。<br><img src="https://i.imgur.com/1ba21WT.png" alt></p><blockquote><p>我们希望浏览器缓存我们的图片，文件、js代码，但是服务器端代码更新了，浏览器端还是在缓存中获取的旧的文件。这就诞生了，webpack打包中出现的文件名后加上hash值，当文件改变时hash值也改变，这样浏览器就会发送新的请求到服务器端。</p></blockquote><h4 id="缓存验证"><a href="#缓存验证" class="headerlink" title="缓存验证"></a>缓存验证</h4><p><img src="https://i.imgur.com/4LpM5sO.png" alt></p><p>验证头：</p><ul><li>Last-Modified</li></ul><p>上次修改时间<br>配合If-Modified-Since或者If-Unmodified-Since使用<br>对比上次修改时间以验证资源是否需要更新</p><ul><li>Etag</li></ul><p>数据签名(内容修改，签名就会改变)<br>配合If-Match或者If-Non-Match使用<br>对比资源的签名判断是否使用缓存</p><h3 id="Redirect"><a href="#Redirect" class="headerlink" title="Redirect"></a>Redirect</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'request come'</span>, request.url)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (request.url === <span class="string">'/'</span>) &#123;</span><br><span class="line">    response.writeHead(<span class="number">302</span>, &#123;  <span class="comment">// or 301</span></span><br><span class="line">      <span class="string">'Location'</span>: <span class="string">'/new'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    response.end()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (request.url === <span class="string">'/new'</span>) &#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    response.end(<span class="string">'&lt;div&gt;this is content&lt;/div&gt;'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).listen(<span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server listening on 8888'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/El7jbFA.png" alt></p><blockquote><p>302临时跳转，301永久跳转，301从缓存种获取跳转，使用301之后，主动权就掌握在用户手里，如果用户不清理缓存，那就算服务器端改变了也没用。</p></blockquote><p><img src="https://i.imgur.com/jmiFHTk.png" alt></p><h3 id="Content-Security-Policy-网页安全政策"><a href="#Content-Security-Policy-网页安全政策" class="headerlink" title="Content Security Policy (网页安全政策)"></a>Content Security Policy (网页安全政策)</h3><p><a href="http://www.ruanyifeng.com/blog/2016/09/csp.html" target="_blank" rel="noopener"> 阮一峰:Content Security Policy 入门教程</a></p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p><img src="https://i.imgur.com/MMC47Gl.png" alt></p><p>HTTPS和HTTP的区别主要为以下四点：<br>一、https协议需要到ca申请证书，一般免费证书很少，需要交费。<br>二、http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。<br>三、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。<br>四、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      有关于网络协议、HTTP报文、跨域请求等http的基础知识的了解
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Vue 全家桶，深入Vue 的世界</title>
    <link href="http://yoursite.com/2018/06/28/vue-family/"/>
    <id>http://yoursite.com/2018/06/28/vue-family/</id>
    <published>2018-06-28T06:56:55.000Z</published>
    <updated>2019-05-05T08:13:43.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-实例上的属性"><a href="#Vue-实例上的属性" class="headerlink" title="Vue 实例上的属性"></a>Vue 实例上的属性</h2><p><img src="https://i.imgur.com/Y3Fn5lV.png" alt="Vue实例"></p><h3 id="组件树"><a href="#组件树" class="headerlink" title="组件树"></a>组件树</h3><ul><li style="list-style: none"><input type="checkbox" checked> <code>$parent</code>：用来访问组件实例的父实例</li><li style="list-style: none"><input type="checkbox" checked> <code>$root</code>: 用来访问当前组件树的根实例</li><li style="list-style: none"><input type="checkbox" checked> <code>$children</code>:用来访问当前组件实例的直接子组件实例</li><li style="list-style: none"><input type="checkbox" checked> <code>$refs</code>:用来访问ref指令的子组件</li></ul><h3 id="DOM访问"><a href="#DOM访问" class="headerlink" title="DOM访问"></a>DOM访问</h3><ul><li style="list-style: none"><input type="checkbox" checked> <code>$el</code>：用来挂载当前组件实例的dom元素</li><li style="list-style: none"><input type="checkbox" checked> <code>$els</code>：用来访问$el元素中使用了v-el指令的DOM元素</li></ul><h3 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a>数据访问</h3><ul><li style="list-style: none"><input type="checkbox" checked> <code>$data</code>：用来访问组件实例观察的数据对象</li><li style="list-style: none"><input type="checkbox" checked> <code>$options</code>：用来访问组件实例化时的初始化选项对象</li></ul><h3 id="DOM方法的使用"><a href="#DOM方法的使用" class="headerlink" title="DOM方法的使用"></a>DOM方法的使用</h3><ul><li style="list-style: none"><input type="checkbox" checked> <code>$appendTo(elementOrSelector, callback)</code>：将el所指的DOM元素插入目标元素</li><li style="list-style: none"><input type="checkbox" checked> <code>$before(elementOrSelector, callback)</code>：将el所指的DOM元素或片段插入目标元素之前</li><li style="list-style: none"><input type="checkbox" checked> <code>$after(elementOrSelector, callback)</code>：将el所指的DOM元素或片段插入目标元素之后</li><li style="list-style: none"><input type="checkbox" checked> <code>$remove(callback)</code>：将el所指的DOM元素或片段从DOM中删除</li><li style="list-style: none"><input type="checkbox" checked> <code>$nextTick(callback)</code>：用来在下一次DOM更新循环后执行指定的回调函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue 的 渲染过程是异步的</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123;text&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      text: 0</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  mounted()&#123;</span></span><br><span class="line"><span class="regexp">    setInterval(()=&gt; &#123;</span></span><br><span class="line"><span class="regexp">      this.text +=1;</span></span><br><span class="line"><span class="regexp">      this.text +=1;</span></span><br><span class="line"><span class="regexp">      this.text +=1;</span></span><br><span class="line"><span class="regexp">      this.text +=1;</span></span><br><span class="line"><span class="regexp">      this.text +=1;</span></span><br><span class="line"><span class="regexp">    &#125;,1000)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>可以看到text值的变化是0 5 10 15 … 而并没有出现 0 1 2 3 … 这样连续的变化<br><img src="https://i.imgur.com/R4QBBKU.gif" alt></p><h3 id="event方法的使用"><a href="#event方法的使用" class="headerlink" title="event方法的使用"></a>event方法的使用</h3><p>1.监听</p><ul><li style="list-style: none"><input type="checkbox" checked> <code>$on(event, callback)</code>：监听实例的自定义事件</li><li style="list-style: none"><input type="checkbox" checked> <code>$once(event, callback)</code>：同上，但只能触发一次</li><li style="list-style: none"><input type="checkbox" checked> <code>$watch(property,callback(new, old))</code>: 监听属性的变化，拿到变化前后的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line">watch: &#123;</span><br><span class="line">  text(<span class="keyword">new</span>, old) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">new</span>&#125;</span>：<span class="subst">$&#123;old&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">const</span> unWatch = <span class="keyword">this</span>.$watch(<span class="string">'text'</span>,(<span class="keyword">new</span>,old)=&gt;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">new</span>&#125;</span>：<span class="subst">$&#123;old&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 2秒后销毁 unWatch</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  unWatch();</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两种写法的结果一样，只是第二种需要在组件销毁手动销毁$watch</span></span><br></pre></td></tr></table></figure><p>2.触发</p><ul><li style="list-style: none"><input type="checkbox" checked> <code>$dispatch(event,args)</code>：派发事件，先在当前实例触发，再沿父链一层层向上，对应的监听函数返回false停止</li><li style="list-style: none"><input type="checkbox" checked> <code>$broadcast(event,args)</code>：广播事件，遍历当前实例的$children，如果对应的监听函数返回false，就停止</li><li style="list-style: none"><input type="checkbox" checked> <code>$emit(event, args)</code>：触发事件</li></ul><p>3.删除</p><ul><li style="list-style: none"><input type="checkbox" checked> <code>$off(event, callback)</code>：删除时间监听</li></ul><p>4.其他</p><ul><li style="list-style: none"><input type="checkbox" checked> <code>$forceUpdate()</code>：强制组件刷新</li><li style="list-style: none"><input type="checkbox" checked> <code>$set(ele,attr,value)</code>：给对象设置属性</li><li style="list-style: none"><input type="checkbox" checked> <code>$delete(ele,attr,value)</code>：删除对象属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123;obj.a&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      obj:&#123;&#125;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  mounted()&#123;</span></span><br><span class="line"><span class="regexp">    let i = 0;</span></span><br><span class="line"><span class="regexp">    setInterval(()=&gt; &#123;</span></span><br><span class="line"><span class="regexp">      i++;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 第一种</span></span><br><span class="line"><span class="regexp">      this.obj.a = i ;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ obj.a没有定义，vue是无法监听到这个属性的变化，所以页面的值也不会变化，这时可以用$forceUpdate进行强制渲染，当然不推荐这种用法</span></span><br><span class="line"><span class="regexp">      this.$forceUpdate();</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 第二种</span></span><br><span class="line"><span class="regexp">      this.$set(this.obj,'a',i);</span></span><br><span class="line"><span class="regexp">    &#125;,1000)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue-生命周期"><a href="#Vue-生命周期" class="headerlink" title="Vue 生命周期"></a>Vue 生命周期</h2><p>vue 官方生命周期<br><img src="https://cn.vuejs.org/images/lifecycle.png" alt="vue生命周期"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">render (h) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'render error'</span>)</span><br><span class="line">  <span class="comment">// console.log('render function invoked') // render 在beforeMount 和 mounted之间执行</span></span><br><span class="line">  <span class="comment">// return h('div', &#123;&#125;, this.text) // 虚拟DOM</span></span><br><span class="line">&#125;,</span><br><span class="line">renderError (h, err) &#123;</span><br><span class="line">  <span class="keyword">return</span> h(<span class="string">'div'</span>, &#123;&#125;, err.stack)</span><br><span class="line">&#125;,</span><br><span class="line">errorCaptured () &#123;</span><br><span class="line"><span class="comment">// 会向上冒泡，并且正式环境可以使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果要修改data里面的值，最早只能放到create生命周期中</p></blockquote><h2 id="Vue-数据绑定"><a href="#Vue-数据绑定" class="headerlink" title="Vue 数据绑定"></a>Vue 数据绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;isActive?<span class="string">'active'</span>:<span class="string">'notActive'</span>&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p&gt;&#123;&#123;arr.join(' ')&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;<span class="built_in">Date</span>.now()&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p v-html="html"&gt;&lt;/</span>p&gt; </span><br><span class="line">    &lt;div</span><br><span class="line">      :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; active: isActive &#125;"</span></span><br><span class="line">      :style=<span class="string">"[styles, styles2]"</span></span><br><span class="line">    &gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[isActive? 'active':'']"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-<span class="keyword">for</span>=<span class="string">"(item,index) in arr"</span> :key=<span class="string">"index"</span>&gt;&#123;&#123;item&#125;&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单个checkbox</span></span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> v-model=<span class="string">"a"</span>&gt; &#123;&#123;a&#125;&#125; &lt;br/&gt;</span><br><span class="line">    <span class="comment">// 多个checkbox</span></span><br><span class="line">    爱好：&lt;input type=<span class="string">"checkbox"</span> v-model=<span class="string">"b"</span> value=<span class="string">"游泳"</span>&gt; 游泳</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> v-model=<span class="string">"b"</span> value=<span class="string">"游泳"</span>&gt; 爬山</span><br><span class="line">    &lt;input type=<span class="string">"checkbox"</span> v-model=<span class="string">"b"</span> value=<span class="string">"游泳"</span>&gt; 睡觉</span><br><span class="line">    </span><br><span class="line">    性别：&lt;input type=<span class="string">"radio"</span> v-model=<span class="string">"c"</span> value=<span class="string">"男"</span>&gt; 男</span><br><span class="line">    &lt;input type=<span class="string">"radio"</span> v-model=<span class="string">"c"</span> value=<span class="string">"女"</span>&gt; 女</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 只绑定一次</span></span><br><span class="line">    &lt;p v-once=<span class="string">"a"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> </span><br><span class="line">    </span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      isActive: <span class="literal">false</span>,</span><br><span class="line">      arr: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">      html: <span class="string">'&lt;span&gt;123&lt;/span&gt;'</span>,</span><br><span class="line">      styles: &#123;</span><br><span class="line">        color: <span class="string">'red'</span>,</span><br><span class="line">        appearance: <span class="string">'none'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      styles2: &#123;</span><br><span class="line">        color: <span class="string">'black'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      a: <span class="literal">false</span>,</span><br><span class="line">      b:[], <span class="comment">// 可以拿到checkbox 的 value</span></span><br><span class="line">      c:<span class="string">''</span> <span class="comment">// 性别</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-model-的修饰符"><a href="#v-model-的修饰符" class="headerlink" title="v-model 的修饰符"></a>v-model 的修饰符</h3><p>来自官网的例子：</p><p>1.<code>.number</code><br>如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"number"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这通常很有用，因为即使在 type=”number” 时，HTML 输入元素的值也总会返回字符串。</p><p>2.<code>.trim</code><br>如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"msg"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>3.<code>.lazy</code><br>在默认情况下，<code>v-model</code> 在每次 input 事件触发后将输入框的值与数据进行同步 。你可以添加 <code>lazy</code> 修饰符，从而转变为使用 change 事件进行同步(当输入框失去焦点)：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"msg"</span> &gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="数组和对象的注意事项"><a href="#数组和对象的注意事项" class="headerlink" title="数组和对象的注意事项"></a>数组和对象的注意事项</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>由于 JavaScript 的限制，Vue 不能检测以下变动的数组：</p><ul><li>当你利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue</li><li>当你修改数组的长度时，例如：vm.items.length = newLength</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.items[<span class="number">1</span>] = <span class="string">'x'</span> <span class="comment">// 不是响应性的</span></span><br><span class="line">vm.items.length = <span class="number">2</span> <span class="comment">// 不是响应性的</span></span><br></pre></td></tr></table></figure><p>为了解决第一类问题，以下两种方式都可以实现和 <code>vm.items[indexOfItem] = newValue</code> 相同的效果，同时也将触发状态更新：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue.set</span></span><br><span class="line">Vue.set(vm.items, indexOfItem, newValue)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.prototype.splice</span></span><br><span class="line">vm.items.splice(indexOfItem, <span class="number">1</span>, newValue)</span><br></pre></td></tr></table></figure><p>你也可以使用 <code>vm.$set</code> 实例方法，该方法是全局方法 <code>Vue.set</code> 的一个别名：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.$<span class="keyword">set</span>(vm.items, indexOfItem, newValue)</span><br></pre></td></tr></table></figure></p><p>为了解决第二类问题，你可以使用 splice：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.items.splice(newLength)</span><br></pre></td></tr></table></figure></p><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>Vue 不能检测对象属性的添加或删除：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// `vm.a` 现在是响应式的</span></span><br><span class="line"></span><br><span class="line">vm.b = <span class="number">2</span></span><br><span class="line"><span class="comment">// `vm.b` 不是响应式的</span></span><br></pre></td></tr></table></figure><p>对于已经创建的实例，Vue 不能动态添加根级别的响应式属性。但是，可以使用 <code>Vue.set(object, key, value)</code> 方法向嵌套对象添加响应式属性。例如，对于：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    userProfile: &#123;</span><br><span class="line">      name: <span class="string">'Anika'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>你可以添加一个新的 <code>age</code> 属性到嵌套的 <code>userProfile</code> 对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(vm.userProfile, <span class="string">'age'</span>, <span class="number">27</span>)</span><br></pre></td></tr></table></figure></p><p>你还可以使用 <code>vm.$set</code> 实例方法，它只是全局 <code>Vue.set</code> 的别名：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.$<span class="keyword">set</span>(vm.userProfile, 'age', 27)</span><br></pre></td></tr></table></figure></p><p>有时你可能需要为已有对象赋予多个新属性，比如使用 <code>Object.assign()</code> 或 <code>_.extend()</code>。在这种情况下，你应该用两个对象的属性创建一个新的对象。所以，如果你想添加新的响应式属性，不要像这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(vm.userProfile, &#123;</span><br><span class="line">  age: <span class="number">27</span>,</span><br><span class="line">  favoriteColor: <span class="string">'Vue Green'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>你应该这样做：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vm.userProfile = <span class="built_in">Object</span>.assign(&#123;&#125;, vm.userProfile, &#123;</span><br><span class="line">  age: <span class="number">27</span>,</span><br><span class="line">  favoriteColor: <span class="string">'Vue Green'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="computed-计算属性"><a href="#computed-计算属性" class="headerlink" title="computed 计算属性"></a>computed 计算属性</h2><p>计算属性的使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;name&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      firstName: 'Fin',</span></span><br><span class="line"><span class="regexp">      lastName: 'Get',</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  computed: &#123;</span></span><br><span class="line"><span class="regexp">    name() &#123;</span></span><br><span class="line"><span class="regexp">      return `$&#123;this.firstName&#125;$&#123;this.lastName&#125;`</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p><p>双向绑定的计算属性与Vuex<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vuex state是无法直接修改的，官方给出了 v-model 的解决方案</span></span><br><span class="line">&lt;input v-model=<span class="string">"message"</span>&gt;</span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">  message: &#123;</span><br><span class="line">    <span class="keyword">get</span> () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.obj.message</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> (value) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$store.commit(<span class="string">'updateMessage'</span>, value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>如果在方法或者生命周期中使用了计算属性，则必须设置一个set</p></blockquote><h2 id="watch-监听器"><a href="#watch-监听器" class="headerlink" title="watch 监听器"></a>watch 监听器</h2><p>watch 简单使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"demo"</span>&gt;&#123;&#123; fullName &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">  el: '#demo',</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    firstName: 'Foo',</span></span><br><span class="line"><span class="regexp">    lastName: 'Bar',</span></span><br><span class="line"><span class="regexp">    fullName: 'Foo Bar'</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  watch: &#123; /</span><span class="regexp">/ watch 方法最初绑定的时候，它是不会执行的，只有变化了才会执行</span></span><br><span class="line"><span class="regexp">    firstName: function (val) &#123;</span></span><br><span class="line"><span class="regexp">      this.fullName = val + ' ' + this.lastName</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    lastName: function (val) &#123;</span></span><br><span class="line"><span class="regexp">      this.fullName = this.firstName + ' ' + val</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123; </span><br><span class="line"><span class="comment">// 声明一个handler，这样在初始化时就会执行一次 handler</span></span><br><span class="line">  firstName: &#123;</span><br><span class="line">    handler(val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.fullName = val + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    immediate: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监听对象属性的变化"><a href="#监听对象属性的变化" class="headerlink" title="监听对象属性的变化"></a>监听对象属性的变化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"demo"</span>&gt;&#123;&#123; obj.a &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;input v-model="obj.a" /</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    obj: &#123;</span><br><span class="line">      a: <span class="string">'123'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    obj: &#123;</span><br><span class="line">      handler() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'obj.a changed'</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      immediate: <span class="literal">true</span>,</span><br><span class="line">      deep: <span class="literal">true</span> <span class="comment">// 如果不加这一句，在输入框中输入值，并不会打印 obj.a changed</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这样写就能监听到属性值的变化</span></span><br><span class="line">watch: &#123;</span><br><span class="line">  <span class="string">'obj.a'</span>: &#123;</span><br><span class="line">    handler() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'obj.a changed'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue-组件"><a href="#Vue-组件" class="headerlink" title="Vue 组件"></a>Vue 组件</h2><h3 id="Vue-组件中的data为什么必须是函数"><a href="#Vue-组件中的data为什么必须是函数" class="headerlink" title="Vue 组件中的data为什么必须是函数"></a>Vue 组件中的data为什么必须是函数</h3><p><a href="https://cn.vuejs.org/v2/guide/components.html#data-%E5%BF%85%E9%A1%BB%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">官网解释</a></p><blockquote><p>在Vue组件中data必须是函数，但是在 <code>new Vue()</code>中data可以是一个对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'MyComponent'</span>, &#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;this is a component&lt;/div&gt;'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125; <span class="comment">// 返回一个唯一的对象，不要和其他组件共用一个对象进行返回</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面定义了一个<code>MyComponent</code>组件,在这里我们可以把这个组件看成一个构造函数。在其他页面引入，并注册组件时，实际上是对这个构造函数的一个引用。当在模板中正真使用组件时类似于实例化了一个组件对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟一下</span></span><br><span class="line"><span class="keyword">let</span> MyComponent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个构造函数</span></span><br><span class="line">&#125;</span><br><span class="line">MyComponent.prototype.data = &#123;</span><br><span class="line">  name: <span class="string">'component'</span>,</span><br><span class="line">  age: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化组件对象</span></span><br><span class="line"><span class="keyword">let</span> componentA = <span class="keyword">new</span> MyComponent();</span><br><span class="line"><span class="keyword">let</span> componentB = <span class="keyword">new</span> MyComponent();</span><br><span class="line"></span><br><span class="line">componentA.data.name === componentB.data.name; <span class="comment">// true</span></span><br><span class="line">componentA.data.age = <span class="number">4</span>;</span><br><span class="line">componentB.data.name;</span><br></pre></td></tr></table></figure><p>可以看出，两个实例组件对象的data是一模一样的，一个改变也会导致另一个改变，这在实际开发中是不符合组件式思想的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟一下</span></span><br><span class="line"><span class="keyword">let</span> MyComponent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定义一个构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这样就行了 写成函数，函数有自己的作用域，不会相互影响</span></span><br><span class="line">MyComponent.prototype.data = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: <span class="string">'component'</span>,</span><br><span class="line">    age: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用-Vue-use-定义全局组件"><a href="#用-Vue-use-定义全局组件" class="headerlink" title="用 Vue.use() 定义全局组件"></a>用 Vue.use() 定义全局组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个 button 组件</span></span><br><span class="line"><span class="comment">// button.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"button"</span>&gt;</span><br><span class="line">        按钮    </span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// button.js</span></span><br><span class="line"><span class="keyword">import</span> ButtonComponent <span class="keyword">from</span> <span class="string">'./button.vue'</span>;</span><br><span class="line"><span class="keyword">const</span> Button=&#123;</span><br><span class="line">  install:<span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">    Vue.component(<span class="string">'Button'</span>,ButtonComponent)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">'./component/button.js'</span>;</span><br><span class="line">Vue.use(Button);</span><br></pre></td></tr></table></figure><p>完成上面的步骤就可以在全局使用button组件了，其实最重要的<code>Vue.component(&#39;Button&#39;,ButtonComponent)</code>, <code>Vue.use(Button)</code>会执行install方法，也可以直接在<code>main.js</code>使用<code>Vue.component()</code>注册全局组件。</p><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"button"</span>&gt;</span><br><span class="line">        按钮    </span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">'msg'</span>], <span class="comment">// 没有任何限制</span></span><br><span class="line">  <span class="comment">// 输入限制</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 基础的类型检查 (`null` 匹配任何类型)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多个可能的类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必填的字符串</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的数字</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的对象</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="comment">// 对象或数组且一定会从一个工厂函数返回默认值</span></span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'success'</span>, <span class="string">'warning'</span>, <span class="string">'danger'</span>].indexOf(value) !== <span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>子组件是不能直接修改props的。</p></blockquote><p><a href="https://finget.github.io/2018/06/08/vue-react-props/" target="_blank" rel="noopener">Vue组件之间的通信问题可以看这里…</a></p><h2 id="Vue-组件-extend"><a href="#Vue-组件-extend" class="headerlink" title="Vue 组件 extend"></a>Vue 组件 extend</h2><blockquote><p>使用<code>Vue.extend</code> 就是构造了一个Vue构造函数的“子类”。它的参数是一个<strong>包含组件选项的对象</strong>，其中<code>data</code>选项必须是函数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个包含组件选项的对象</span></span><br><span class="line"><span class="keyword">const</span> compoent = &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    active: <span class="built_in">Boolean</span>,</span><br><span class="line">    propOne: <span class="built_in">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;input type="text" v-model="text"&gt;</span></span><br><span class="line"><span class="string">      &lt;span v-show="active"&gt;see me if active&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      text: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123; <span class="comment">// 这个mounted先打印</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'comp mounted'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个“子类”</span></span><br><span class="line"><span class="keyword">const</span> CompVue = Vue.extend(compoent);</span><br><span class="line"><span class="comment">// 实例化一个“子类”</span></span><br><span class="line"><span class="keyword">new</span> CompVue(&#123;</span><br><span class="line">  el: <span class="string">'#root'</span>,</span><br><span class="line">  propsData: &#123; <span class="comment">// 这里如果用props，组件内是拿不到值的</span></span><br><span class="line">    propOne: <span class="string">'xxx'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    text: <span class="string">'123'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'instance mounted'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> component2 = &#123;</span><br><span class="line">  extends: component, <span class="comment">// 继承于 component</span></span><br><span class="line">  data()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      text: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.$parent.text = <span class="string">'111111111'</span>; <span class="comment">// 可以改变父组件的值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'comp2 mounted'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  name: <span class="string">'Root'</span>,</span><br><span class="line">  el: <span class="string">'#root'</span>,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$parent.$options.name)</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Comp: componet2</span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    text: <span class="number">23333</span></span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;span&gt;&#123;&#123;text&#125;&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;comp&gt;&lt;/comp&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Vue-组件高级属性"><a href="#Vue-组件高级属性" class="headerlink" title="Vue 组件高级属性"></a>Vue 组件高级属性</h2><h3 id="Vue-组件插槽"><a href="#Vue-组件插槽" class="headerlink" title="Vue 组件插槽"></a>Vue 组件插槽</h3><blockquote><p>通常我们会向一个组件中传入一些自定义的内容，这个时候就可以用到插槽。插槽内可以包含任何模板代码，包括HTML或者是一个组件。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个带插槽的组件</span></span><br><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  name: <span class="string">'comp'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> CompVue(&#123;</span><br><span class="line">  el: <span class="string">'#root'</span>,</span><br><span class="line">  components:&#123;</span><br><span class="line">    Comp</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;comp&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;这里的内容显示在插槽内&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/comp&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><blockquote><p>官网链接:<a href="https://cn.vuejs.org/v2/guide/components-slots.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/components-slots.html</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们希望把页头放这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们希望把主要内容放这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们希望把页脚放这里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具名插槽的使用：</p><p>第一种：在一个父组件的 <code>&lt;template&gt;</code>元素上使用 <code>slot</code> 特性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种：直接在普通元素上使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="插槽的默认内容"><a href="#插槽的默认内容" class="headerlink" title="插槽的默认内容"></a>插槽的默认内容</h4><blockquote><p>在插槽中可以设置一个默认内容，如果用户没有设置新的内容，则会显示默认内容</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><blockquote><p>2.1.0+ 新增 在 2.5.0+，<code>slot-scope</code> 不再限制在 <code>&lt;template&gt;</code> 元素上使用，而可以用在插槽内的任何元素或组件上。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  name: <span class="string">'comp'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;slot value="456" name="finget"&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> CompVue(&#123;</span><br><span class="line">  el: <span class="string">'#root'</span>,</span><br><span class="line">  components:&#123;</span><br><span class="line">    Comp</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;comp&gt;</span></span><br><span class="line"><span class="string">        &lt;p slot-scope="props"&gt;&#123;&#123;props.value&#125;&#125; &#123;&#123;props.name&#125;&#125;&lt;/p&gt; // 456 finget</span></span><br><span class="line"><span class="string">      &lt;/comp&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="provide-inject-跨级组件交互"><a href="#provide-inject-跨级组件交互" class="headerlink" title="provide/inject 跨级组件交互"></a>provide/inject 跨级组件交互</h3><blockquote><p>2.2.0 新增</p></blockquote><p>这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父级组件提供 'foo'</span></span><br><span class="line"><span class="keyword">var</span> Provider = &#123;</span><br><span class="line">  provide: &#123;</span><br><span class="line">    foo: <span class="string">'bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件注入 'foo'</span></span><br><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  inject: [<span class="string">'foo'</span>],</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo) <span class="comment">// =&gt; "bar"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是注入一个父级组件内部的值，provide需要作为一个函数，类似于data</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  name: <span class="string">'comp'</span>,</span><br><span class="line">  inject: [<span class="string">"value"</span>]</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;子组件 &#123;&#123;value&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> CompVue(&#123;</span><br><span class="line">  el: <span class="string">'#root'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      value: <span class="string">'123'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  components:&#123;</span><br><span class="line">    Comp</span><br><span class="line">  &#125;,</span><br><span class="line">  provide() &#123; <span class="comment">// 这里如果只是一个对象的话是无法拿到this.value的</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      value: <span class="keyword">this</span>.value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;comp&gt;&lt;/comp&gt;</span></span><br><span class="line"><span class="string">      &lt;input type="text" v-model="value"&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要监听父级组件的属性值的变化，从而自动更新子组件的值，需要手动实现监听</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  name: <span class="string">'comp'</span>,</span><br><span class="line">  inject: [<span class="string">"data"</span>]</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;子组件 &#123;&#123;data.value&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">provide() &#123; </span><br><span class="line">  <span class="keyword">const</span> data = &#123;&#125;</span><br><span class="line">  <span class="comment">// 这是vue双向绑定的基础</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(data,<span class="string">"value"</span>,&#123;</span><br><span class="line">    <span class="keyword">get</span>: () =&gt; this.value,</span><br><span class="line">    enumerable: true</span><br><span class="line">  &#125;)</span><br><span class="line">  return &#123;</span><br><span class="line">    data</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Vue-的render"><a href="#Vue-的render" class="headerlink" title="Vue 的render"></a>Vue 的render</h2><p>Vue模板的解析：<a href="https://finget.github.io/2018/05/31/mvvm-vue/" target="_blank" rel="noopener">https://finget.github.io/2018/05/31/mvvm-vue/</a></p><h2 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h2><h3 id="router构建选项"><a href="#router构建选项" class="headerlink" title="router构建选项"></a>router构建选项</h3><h4 id="重定向："><a href="#重定向：" class="headerlink" title="重定向："></a>重定向：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/'</span>,</span><br><span class="line">  redirect: <span class="string">'/app'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="History-模式："><a href="#History-模式：" class="headerlink" title="History 模式："></a>History 模式：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: [...]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>vue-router</code> 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。</p><p>不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问 <a href="http://oursite.com/user/id" target="_blank" rel="noopener">http://oursite.com/user/id</a> 就会返回 404，这就不好看了。</p><p>给个警告页：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'*'</span>, <span class="attr">component</span>: NotFoundComponent &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="base"><a href="#base" class="headerlink" title="base"></a>base</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  base: <span class="string">'/base/'</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/hello'</span>, <span class="attr">component</span>: hello &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当访问<code>localhost:8080/hello</code>会变成<code>localhost:8080/base/hello</code>,所有的路由路径都会加上<code>/base</code>,当然手动删除<code>/base</code>还是可以打开页面</p><h4 id="linkActiveClass-和-linkExactActiveClass"><a href="#linkActiveClass-和-linkExactActiveClass" class="headerlink" title="linkActiveClass 和 linkExactActiveClass"></a>linkActiveClass 和 linkExactActiveClass</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/app"</span>&gt;</span>app<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>router-link</code>在页面中会渲染成<code>a</code>标签，点击之后会添加两个类名:<code>router-link-exact-active</code> 和 <code>router-link-active</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  linkActiveClass: <span class="string">'active-link'</span>,</span><br><span class="line">  linkExactActiveClass: <span class="string">'exact-active-link'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这相当于是重新命名了两个类名。</p><p>两者的不同点：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/login/exact"</span>&gt;</span>login exact<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面这两个路由有一部分<code>/login</code>是相同的，在点击了<code>login exact</code>路由调转到<code>/login/exact</code>后：</p><p><code>/login</code> 上还保留了<code>router-link-active</code>类名<br><img src="https://i.imgur.com/GMEcJ19.png" alt></p><h4 id="scrollBehavior"><a href="#scrollBehavior" class="headerlink" title="scrollBehavior"></a>scrollBehavior</h4><p>使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，就像重新加载页面那样。</p><blockquote><p>注意: 这个功能只在支持 history.pushState 的浏览器中可用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  scrollBehavior(to, form, savedPosition)&#123;</span><br><span class="line">    <span class="keyword">if</span> (savedPosition) &#123;</span><br><span class="line">      <span class="keyword">return</span> savedPosition</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  routes: [...]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>scrollBehavior</code> 方法接收 <code>to</code> 和 <code>from</code> 路由对象。第三个参数 <code>savedPosition</code> 当且仅当 <code>popstate</code> 导航 (通过浏览器的 前进/后退 按钮触发) 时才可用。</p><h4 id="parseQuery-和-stringifyQuery"><a href="#parseQuery-和-stringifyQuery" class="headerlink" title="parseQuery 和 stringifyQuery"></a>parseQuery 和 stringifyQuery</h4><blockquote><p>提供自定义查询字符串的解析/反解析函数。覆盖默认行为。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  parseQuery (query) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(query)</span><br><span class="line">  &#125;,</span><br><span class="line">  stringifyQuery (obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="fallback"><a href="#fallback" class="headerlink" title="fallback"></a>fallback</h4><p>当浏览器不支持 <code>history.pushState</code> 控制路由是否应该回退到 <code>hash</code> 模式。默认值为 true。</p><p>在 IE9 中，设置为 false 会使得每个 <code>router-link</code> 导航都触发整页刷新。它可用于工作在 IE9 下的服务端渲染应用，因为一个 hash 模式的 URL 并不支持服务端渲染。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  fallback: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由元信息"><a href="#路由元信息" class="headerlink" title="路由元信息"></a>路由元信息</h3><p><a href="https://router.vuejs.org/zh/guide/advanced/meta.html" target="_blank" rel="noopener">官网例子：</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/foo'</span>,</span><br><span class="line">      component: Foo,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'bar'</span>,</span><br><span class="line">          component: Bar,</span><br><span class="line">          <span class="comment">// a meta field</span></span><br><span class="line">          meta: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>那么如何访问这个 <code>meta</code> 字段呢？</p><p>首先，我们称呼 <code>routes</code> 配置中的每个路由对象为 路由记录。路由记录可以是嵌套的，因此，当一个路由匹配成功后，他可能匹配多个路由记录</p><p>例如，根据上面的路由配置，<code>/foo/bar</code> 这个 <code>URL</code> 将会匹配父路由记录以及子路由记录。</p><p>一个路由匹配到的所有路由记录会暴露为 <code>$route</code> 对象 (还有在导航守卫中的路由对象) 的 <code>$route.matched</code> 数组。因此，我们需要遍历 <code>$route.matched</code> 来检查路由记录中的 <code>meta</code> 字段。</p><p>下面例子展示在全局导航守卫中检查元字段：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.matched.some(<span class="function"><span class="params">record</span> =&gt;</span> record.meta.requiresAuth)) &#123;</span><br><span class="line">    <span class="comment">// this route requires auth, check if logged in</span></span><br><span class="line">    <span class="comment">// if not, redirect to login page.</span></span><br><span class="line">    <span class="keyword">if</span> (!auth.loggedIn()) &#123;</span><br><span class="line">      next(&#123;</span><br><span class="line">        path: <span class="string">'/login'</span>,</span><br><span class="line">        query: &#123; <span class="attr">redirect</span>: to.fullPath &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next() <span class="comment">// 确保一定要调用 next()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h3><blockquote><p>在一个路由下展示多个视图组件,用的并不多</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在这个页面中要分别展示三个视图</span></span><br><span class="line">&lt;router-view&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span> // 默认的</span></span><br><span class="line">&lt;router-view name="a"&gt;&lt;/router-view&gt; // 视图a</span><br><span class="line">&lt;router-view name="b"&gt;&lt;/router-view&gt; // 视图b</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      components: &#123; <span class="comment">// 加s</span></span><br><span class="line">        <span class="keyword">default</span>: Foo, <span class="comment">// 对应默认router-view</span></span><br><span class="line">        a: Bar, <span class="comment">// name = "a"</span></span><br><span class="line">        b: Baz <span class="comment">// name = "b"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><blockquote><p>路由改变时，按顺序触发的钩子函数</p></blockquote><h4 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'before each invoked'</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br><span class="line">router.beforeResolve(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'before resolve invoked'</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>每个守卫方法接收三个参数：</p><ul><li><p><code>to: Route</code>: 即将要进入的目标 <strong>路由对象</strong></p></li><li><p><code>from: Route</code>: 当前导航正要离开的 <strong>路由对象</strong></p></li><li><p><code>next: Function</code>: 一定要调用该方法来 <code>resolve</code> 这个钩子。执行效果依赖 <code>next</code> 方法的调用参数。</p><ul><li><p><code>next()</code>: 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 <code>confirmed</code> (确认的)。</p></li><li><p><code>next(false)</code>: 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 <code>URL</code> 地址会重置到 <code>from</code> 路由对应的地址。</p></li><li><p><code>next(&#39;/&#39;)</code> 或者 <code>next({ path: &#39;/&#39; })</code>: 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 <code>next</code> 传递任意位置对象，且允许设置诸如 <code>replace: true、name: &#39;home&#39;</code> 之类的选项以及任何用在 <code>router-link</code> 的 <code>to</code> <code>prop</code> 或 <code>router.push</code> 中的选项。</p></li><li><p><code>next(error)</code>: (2.4.0+) 如果传入 <code>next</code> 的参数是一个 <code>Error</code> 实例，则导航会被终止且该错误会被传递给 <code>router.onError()</code> 注册过的回调。</p></li></ul></li></ul><p><strong>确保要调用 <code>next</code> 方法，否则钩子就不会被 <code>resolved</code>。</strong>    </p><h5 id="路由对象"><a href="#路由对象" class="headerlink" title="路由对象"></a>路由对象</h5><blockquote><p>一个路由对象 (route object) 表示当前激活的路由的状态信息，包含了当前 URL 解析得到的信息，还有 URL 匹配到的路由记录 (route records)。</p></blockquote><p>路由对象是不可变 (immutable) 的，每次成功的导航后都会产生一个新的对象。</p><p>路由对象属性：</p><ul><li><p>$route.path</p><ul><li>类型: string<br>  字符串，对应当前路由的路径，总是解析为绝对路径，如 “/foo/bar”。</li></ul></li><li><p>$route.params</p><ul><li>类型: Object<br>  一个 key/value对象，包含了动态片段和全匹配片段，如果没有路由参数，就是一个空对象。</li></ul></li><li><p>$route.query</p><ul><li>类型: Object<br>  一个 key/value 对象，表示 URL 查询参数。例如，对于路径 /foo?user=1，则有 $route.query.user == 1，如果没有查询参数，则是个空对象。</li></ul></li><li><p>$route.hash</p><ul><li>类型: string<br>  当前路由的 hash 值 (带 #) ，如果没有 hash 值，则为空字符串。</li></ul></li><li><p>$route.fullPath</p><ul><li>类型: string<br>  完成解析后的 URL，包含查询参数和 hash 的完整路径。</li></ul></li><li><p>$route.matched</p><ul><li>类型: Array<routerecord><br>  一个数组，包含当前路由的所有嵌套路径片段的路由记录 。路由记录就是 routes 配置数组中的对象副本 (还有在 children 数组)。</routerecord></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    <span class="comment">// 下面的对象就是路由记录</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo,</span><br><span class="line">      children: [</span><br><span class="line">        <span class="comment">// 这也是个路由记录</span></span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">'bar'</span>, <span class="attr">component</span>: Bar &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当 URL 为 /foo/bar，<code>$route.matched</code> 将会是一个包含从上到下的所有对象 (副本)。</p><ul><li><p>$route.name<br>  当前路由的名称，如果有的话。(查看命名路由)</p></li><li><p>$route.redirectedFrom<br>  如果存在重定向，即为重定向来源的路由的名字</p></li></ul><h4 id="全局后置钩子"><a href="#全局后置钩子" class="headerlink" title="全局后置钩子"></a>全局后置钩子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'after each invoked'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/foo'</span>,</span><br><span class="line">      component: Foo,</span><br><span class="line">      beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="组件内的守卫"><a href="#组件内的守卫" class="headerlink" title="组件内的守卫"></a>组件内的守卫</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = &#123;</span><br><span class="line">  template: <span class="string">`...`</span>,</span><br><span class="line">  beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">    <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beforeRouteEnter 守卫 不能 访问 this，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。</p><p>不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">  next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 `vm` 访问组件实例</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a>完整的导航解析流程</h4><ol><li>导航被触发。</li><li>在失活的组件里调用离开守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 <code>DOM</code> 更新。</li><li>用创建好的实例调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数。</li></ol><h3 id="异步路由"><a href="#异步路由" class="headerlink" title="异步路由"></a>异步路由</h3><p>在路由文件中，直接import所有组件势必造成页面首次渲染时间变长，异步路由，当进入对应的路由才加载对应的页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../view/...'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这种写法需要安装<code>syntax-dynamic-import</code>,并在<code>.babelrc</code>进行配置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// .babelrc</span><br><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [&quot;syntax-dynamic-import&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vux"><a href="#Vux" class="headerlink" title="Vux"></a>Vux</h2><blockquote><p>以下内容来自<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">官网：https://vuex.vuejs.org/zh/</a></p></blockquote><h3 id="简单使用vuex"><a href="#简单使用vuex" class="headerlink" title="简单使用vuex"></a>简单使用vuex</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    updateCount(state, num) &#123;</span><br><span class="line">      state.count = num</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/store.js'</span></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  store, <span class="comment">// 挂载</span></span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 任意组件</span></span><br><span class="line">mounted()&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.$store)</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">'updateCount'</span>, i++)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  count() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Apue7Qc.png" alt></p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><blockquote><p>Vuex 使用单一状态树——是的，用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (SSOT)”而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</p></blockquote><p>大白话： state就相当于是个全局对象，通过<code>Vue.use(Vuex)</code>全局注册了vuex之后，在任意组件中可以用<code>this.$store.state</code>拿到该对象</p><p>Vuex的状态存储是响应式的，从store实例中读取状态最简单的方法就是在计算属性中返回某个状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  count() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当<code>state</code>中的<code>count</code>变化时，自动会更新<code>computed</code>，从而改变相关<code>DOM</code></p><h5 id="mapState-辅助函数"><a href="#mapState-辅助函数" class="headerlink" title="mapState 辅助函数"></a>mapState 辅助函数</h5><p>当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用<code>mapState</code>辅助函数帮助我们生成计算属性，让你少按几次键：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  computed: mapState(&#123;</span><br><span class="line">    <span class="comment">// 箭头函数可使代码更简练</span></span><br><span class="line">    count: <span class="function"><span class="params">state</span> =&gt;</span> state.count,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传字符串参数 'count' 等同于 `state =&gt; state.count`</span></span><br><span class="line">    countAlias: <span class="string">'count'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了能够使用 `this` 获取局部状态，必须使用常规函数 不能用箭头函数</span></span><br><span class="line">    countPlusLocalState (state) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.count + <span class="keyword">this</span>.localCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">computed: mapState([</span><br><span class="line">  <span class="comment">// 映射 this.count 为 store.state.count</span></span><br><span class="line">  <span class="string">'count'</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用操作</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapState([<span class="string">'count'</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 换一个变量名</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(&#123;</span><br><span class="line">    count1 : <span class="string">'count'</span>,</span><br><span class="line">    count2 : <span class="function"><span class="params">state</span> =&gt;</span> state.count</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h4><blockquote><p>Getter就是vuex种state的computed，通过state派生出新的state，而且它会被缓存起来，只有依赖的state发生变化才会重新计算</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  fullName(state) &#123; <span class="comment">// 默认接收state作为第一个参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;state.firstName&#125;</span><span class="subst">$&#123;state.lastName&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="mapGetters-辅助函数"><a href="#mapGetters-辅助函数" class="headerlink" title="mapGetters 辅助函数"></a>mapGetters 辅助函数</h5><p>getter的使用和state类似，可以把它看成state来用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">  <span class="comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class="line">    ...mapGetters([</span><br><span class="line">      <span class="string">'doneTodosCount'</span>,</span><br><span class="line">      <span class="string">'anotherGetter'</span>,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想给getter换个名字，方法和state一样，不重复</p><h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><blockquote><p>Mutation必须是同步的</p></blockquote><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.commit(<span class="string">'increment'</span>)</span><br></pre></td></tr></table></figure><h5 id="提交载荷-传参"><a href="#提交载荷-传参" class="headerlink" title="提交载荷(传参)"></a>提交载荷(传参)</h5><p>你可以向 <code>store.commit</code> 传入额外的参数，即 <code>mutation</code> 的 载荷（payload）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, n) &#123;</span><br><span class="line">    state.count += n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.commit(<span class="string">'increment'</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>在大多数情况下，载荷应该是一个<strong>对象</strong>，这样可以包含多个字段并且记录的 mutation 会更易读：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">store.commit(<span class="string">'increment'</span>, &#123;</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="对象风格的提交方式"><a href="#对象风格的提交方式" class="headerlink" title="对象风格的提交方式"></a>对象风格的提交方式</h5><p>提交 <code>mutation</code> 的另一种方式是直接使用包含 <code>type</code> 属性的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">store.commit(&#123;</span><br><span class="line">  type: <span class="string">'increment'</span>,</span><br><span class="line">  amount: <span class="number">10</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当使用对象风格的提交方式，整个对象都作为载荷传给 mutation 函数，因此 handler 保持不变：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mutations: &#123;</span><br><span class="line">  increment (state, payload) &#123;</span><br><span class="line">    state.count += payload.amount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="使用常量替代-Mutation-事件类型"><a href="#使用常量替代-Mutation-事件类型" class="headerlink" title="使用常量替代 Mutation 事件类型"></a>使用常量替代 Mutation 事件类型</h5><p>使用常量替代<code>mutation</code> 事件类型在各种 <code>Flux</code> 实现中是很常见的模式。这样可以使 <code>linter</code> 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 <code>app</code> 包含的 <code>mutation</code> 一目了然：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mutation-types.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SOME_MUTATION = <span class="string">'SOME_MUTATION'</span></span><br><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> &#123; SOME_MUTATION &#125; <span class="keyword">from</span> <span class="string">'./mutation-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="comment">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span><br><span class="line">    [SOME_MUTATION] (state) &#123;</span><br><span class="line">      <span class="comment">// mutate state</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="在组件中提交-Mutation"><a href="#在组件中提交-Mutation" class="headerlink" title="在组件中提交 Mutation"></a>在组件中提交 Mutation</h5><p>你可以在组件中使用 <code>this.$store.commit(&#39;xxx&#39;)</code> 提交 <code>mutation</code>，或者使用 <code>mapMutations</code> 辅助函数将组件中的 <code>methods</code> 映射为 <code>store.commit</code> 调用（需要在根节点注入 store）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations([</span><br><span class="line">      <span class="string">'increment'</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.commit('increment')`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapMutations` 也支持载荷：</span></span><br><span class="line">      <span class="string">'incrementBy'</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit('incrementBy', amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      add: <span class="string">'increment'</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.commit('increment')`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><blockquote><p>Action 可以包含异步操作</p></blockquote><p>Action跟Mutation类似，Action是调用<code>commit</code>方法，提交<code>mutation</code>的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.commit(<span class="string">'increment'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 <code>context.commit</code> 提交一个 <code>mutation</code>，或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 <code>state</code> 和 <code>getters</code>。</p><p>实践中，我们会经常用到 ES2015 的 参数解构 来简化代码（特别是我们需要调用 commit 很多次的时候）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line"><span class="comment">// &#123;commit&#125; = context 解构出来</span></span><br><span class="line">  increment (&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">'increment'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实际代码：<br><img src="https://i.imgur.com/haIqnu6.png" alt></p><h5 id="在组件中分发-Action"><a href="#在组件中分发-Action" class="headerlink" title="在组件中分发 Action"></a>在组件中分发 Action</h5><p>你在组件中使用 <code>this.$store.dispatch(&#39;xxx&#39;)</code> 分发 <code>action</code>，或者使用 <code>mapActions</code> 辅助函数将组件的 <code>methods</code> 映射为 <code>store.dispatch</code> 调用（需要先在根节点注入 store）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions([</span><br><span class="line">      <span class="string">'increment'</span>, <span class="comment">// 将 `this.increment()` 映射为 `this.$store.dispatch('increment')`</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// `mapActions` 也支持载荷：</span></span><br><span class="line">      <span class="string">'incrementBy'</span> <span class="comment">// 将 `this.incrementBy(amount)` 映射为 `this.$store.dispatch('incrementBy', amount)`</span></span><br><span class="line">    ]),</span><br><span class="line">    ...mapActions(&#123;</span><br><span class="line">      add: <span class="string">'increment'</span> <span class="comment">// 将 `this.add()` 映射为 `this.$store.dispatch('increment')`</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>开启严格模式，仅需在创建 store 的时候传入 strict: true：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  strict: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。</p><h4 id="开发环境与发布环境"><a href="#开发环境与发布环境" class="headerlink" title="开发环境与发布环境"></a>开发环境与发布环境</h4><p><strong>不要在发布环境下启用严格模式！</strong>严格模式会深度监测状态树来检测不合规的状态变更——请确保在发布环境下关闭严格模式，以避免性能损失。</p><p>类似于插件，我们可以让构建工具来处理这种情况：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  strict: process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      Vue Vue-router Vuex
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 与 React 父子组件之间的家长里短</title>
    <link href="http://yoursite.com/2018/06/08/vue-react-props/"/>
    <id>http://yoursite.com/2018/06/08/vue-react-props/</id>
    <published>2018-06-08T08:43:50.000Z</published>
    <updated>2019-05-05T08:13:43.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// father.js</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"father"</span>&gt;</span><br><span class="line">      这是父组件：</span><br><span class="line">      &lt;p&gt;父组件&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Child ref="child" :msg="msg" @click="faClick"&gt;&lt;/</span>Child&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">'./child'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'父组件传给子组件'</span> <span class="comment">// 传递给子组件的值</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Child</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    faClick(msg) &#123; <span class="comment">// msg 子组件传递给父组件的值</span></span><br><span class="line">      alert(msg);</span><br><span class="line">    &#125;,</span><br><span class="line">    childSayHello() &#123; <span class="comment">// 父组件调用子组件的方法</span></span><br><span class="line">      <span class="keyword">this</span>.$refs,child.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// child.js</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"child"</span>&gt;</span><br><span class="line">      这是子组件：&lt;p&gt;父组件传递的值：&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button @click="click"&gt;接收父组件方法&lt;/</span>button&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">'msg'</span>],</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      childMsg : <span class="string">'哈哈哈'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    click() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'click'</span>,<span class="keyword">this</span>.childMsg); <span class="comment">// 第一个参数为派发的事件名， 第二个参数为传递的值</span></span><br><span class="line">    &#125;,</span><br><span class="line">    sayHello() &#123;</span><br><span class="line">      alert(<span class="string">'I am child!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="父组件向子组件传值："><a href="#父组件向子组件传值：" class="headerlink" title="父组件向子组件传值："></a>父组件向子组件传值：</h3><ol><li>在父组件中引入并注册子组件</li><li>在子组件中定义 <code>props:[&#39;msg&#39;]</code> (不能省略引号)</li><li>通过 <code>:msg=&quot;msg&quot;</code> 的方法传递变量，也可以通过 <code>msg=&quot;msg&quot;</code> 传递字符串</li></ol><h3 id="父组件调用子组件的方法："><a href="#父组件调用子组件的方法：" class="headerlink" title="父组件调用子组件的方法："></a>父组件调用子组件的方法：</h3><ol><li>在父组件中给子组件绑定一个 <code>ref=&quot;xxx&quot;</code> 属性</li><li>通过 <code>this.$refs.xxx.方法</code> 调用</li></ol><h3 id="子组件向父组件传值："><a href="#子组件向父组件传值：" class="headerlink" title="子组件向父组件传值："></a>子组件向父组件传值：</h3><ol><li>在子组件中定义一个方法</li><li>通过 <code>this.$emit(&#39;事件名&#39;,&#39;参数&#39;)</code> 派发一个事件，并传递参数</li><li>父组件中通过 <code>@事件名</code> 的方式监听事件</li><li>父组件中定一个一个方法，该方法的参数对应子组件传递过来的参数</li></ol><h3 id="子组件调用父组件的方法："><a href="#子组件调用父组件的方法：" class="headerlink" title="子组件调用父组件的方法："></a>子组件调用父组件的方法：</h3><p>子组件可以通过<code>this.$parent.xxx</code> 直接调用父组件的方法。</p><blockquote><p>通过子组件派发的事件，不仅可以向父组件传递参数，父组件也可以通过传递的参数，改变向子组件传递的值，从而改变子组件。</p></blockquote><p>props 还可以进行一系列的格式校验，更多内容<a href="https://cn.vuejs.org/v2/guide/components-props.html#ad" target="_blank" rel="noopener">查看官网</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    <span class="comment">// 基础的类型检查 (`null` 匹配任何类型)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多个可能的类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必填的字符串</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的数字</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的对象</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="comment">// 对象或数组且一定会从一个工厂函数返回默认值</span></span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'success'</span>, <span class="string">'warning'</span>, <span class="string">'danger'</span>].indexOf(value) !== <span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// father.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">'./child.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      con: <span class="string">'父组件给子组件'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 传递给子组件的方法，并接收子组件实例，绑定在this.child上</span></span><br><span class="line">  onRef = <span class="function">(<span class="params">ref</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.child = ref</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过this.child 就可以直接调用子组件的内部方法</span></span><br><span class="line">  click = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.child.sayHello();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 传递个子组件的方法</span></span><br><span class="line">  faClick = <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    alert(msg);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;这是父组件&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;this.click&#125;&gt;调用子组件方法&lt;/</span>button&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          这是子组件</span><br><span class="line">          &lt;Child onRef=&#123;<span class="keyword">this</span>.onRef&#125; connect=&#123;<span class="keyword">this</span>.state.con&#125; click=&#123;(msg) =&gt; <span class="keyword">this</span>.faClick(msg)&#125;/&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Father;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// child.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用父组件传递的方法，并传递子组件实例</span></span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onRef(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用父组件传递的方法</span></span><br><span class="line">  click= <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.click(<span class="string">'哈啊哈'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 子组件内部方法</span></span><br><span class="line">  sayHello = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    alert(<span class="string">'I am child'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">         &lt;p&gt;&#123;<span class="keyword">this</span>.props.connect&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">         &lt;button onClick=&#123;this.click&#125;&gt;接收父组件的方法&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Child;</span></span><br></pre></td></tr></table></figure><h3 id="父组件向子组件传值：-1"><a href="#父组件向子组件传值：-1" class="headerlink" title="父组件向子组件传值："></a>父组件向子组件传值：</h3><ol><li>在父组件中引入子组件</li><li>通过 <code>connect={this.state.con}</code> 方式可以传递值</li><li>子组件通过 <code>this.props.connect</code> 接收</li></ol><h3 id="父组件调用子组件的方法：-1"><a href="#父组件调用子组件的方法：-1" class="headerlink" title="父组件调用子组件的方法："></a>父组件调用子组件的方法：</h3><ol><li>给子组件传递一个方法 <code>onRef={this.onRef}</code></li><li>子组件在 <code>componentDidMount</code> 生命周期里 调用这个方法，并回传自身实例</li><li>父组在该方法中接收子组件实例，并挂载在父组件实例属性上，例：<code>this.child = ref</code></li><li>最后就可以通过 <code>this.child.xxx</code> 直接调用子组件方法</li></ol><h3 id="子组件向父组件传参："><a href="#子组件向父组件传参：" class="headerlink" title="子组件向父组件传参："></a>子组件向父组件传参：</h3><ol><li>在父组件中给子组件传递一个方法，<code>click={(msg) =&gt; this.faClick(msg)}</code></li><li>在子组件中通过一个事件接收这个方法，<code>onClick={this.click}</code></li><li>通过<code>click= ()=&gt; {this.props.click(&#39;哈啊哈&#39;);}</code> 从而传递参数</li></ol><h3 id="子组件调用父组件方法"><a href="#子组件调用父组件方法" class="headerlink" title="子组件调用父组件方法"></a>子组件调用父组件方法</h3><ol><li>父组件可以直接传递一个方法给子组件</li><li>子组件可以通过 <code>this.props.xxx</code> 调用</li></ol><blockquote><p>不能直接通过 <code>&lt;button onClick={this.props.click(&#39;哈啊哈&#39;)}&gt;接收父组件的方法&lt;/button&gt;</code> 进行传参，这样在组件初始化时，事件就执行了。</p></blockquote><h2 id="Vue-与-React-的不同："><a href="#Vue-与-React-的不同：" class="headerlink" title="Vue 与 React 的不同："></a>Vue 与 React 的不同：</h2><ol><li>React 的子组件中不用定义父组件传值对应的变量</li><li>React 的子组件不用派发事件，父组件可以直接传递方法</li><li>子组件通过<code>this.props.click</code> 可以调用父组件传递的方法，并传参<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2></li></ol><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      记录一下，vue与react父子组件之间的通信问题
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript从初级往高级走系列————MVVM-Vue</title>
    <link href="http://yoursite.com/2018/05/31/mvvm-vue/"/>
    <id>http://yoursite.com/2018/05/31/mvvm-vue/</id>
    <published>2018-05-31T07:38:33.000Z</published>
    <updated>2019-05-05T08:13:43.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><ul><li>如何理解 MVVM</li><li>如何实现 MVVM</li><li>是否解读过 Vue 的源码</li></ul><h3 id="Jquery-与-框架的区别"><a href="#Jquery-与-框架的区别" class="headerlink" title="Jquery 与 框架的区别"></a>Jquery 与 框架的区别</h3><h4 id="jquery-实现-todo-list"><a href="#jquery-实现-todo-list" class="headerlink" title="jquery 实现 todo-list"></a>jquery 实现 todo-list</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"txt-title"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-submit"</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul-list"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $txtTitle = $(<span class="string">'#txt-title'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $btnSubmit = $(<span class="string">'#btn-submit'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $ulList = $(<span class="string">'#ul-list'</span>);</span></span><br><span class="line"><span class="javascript">    $btnSubmit.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> title = $txtTitle.val();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!title) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> $li = $(<span class="string">'&lt;li&gt;'</span> + title + <span class="string">'&lt;/li&gt;'</span>);</span></span><br><span class="line"><span class="undefined">        $ulList.append($li);</span></span><br><span class="line"><span class="javascript">        $txtTitle.val(<span class="string">''</span>);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="vue-实现-todo-list"><a href="#vue-实现-todo-list" class="headerlink" title="vue 实现 todo-list"></a>vue 实现 todo-list</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add"</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// data 独立</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> data = &#123;</span></span><br><span class="line"><span class="javascript">      title: <span class="string">''</span>,</span></span><br><span class="line"><span class="undefined">      list: []</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 初始化 Vue 实例</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">      data: data,</span></span><br><span class="line"><span class="undefined">      methods: &#123;</span></span><br><span class="line"><span class="javascript">          add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.list.push(<span class="keyword">this</span>.title);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.title = <span class="string">''</span>;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h4><ul><li><p>数据和视图的分离，解耦（开放封闭原则，对扩展开放，对修改封闭）</p><p>在jQuery中在jQuery代码中操作视图和数据，混在一块了</p></li><li><p>以数据驱动视图，只关心数据变化，DOM操作被封装</p><p>只改数据，视图自动更新</p></li></ul><h3 id="MVVM的理解"><a href="#MVVM的理解" class="headerlink" title="MVVM的理解"></a>MVVM的理解</h3><ul><li><p>MVC （Model View Controller）</p><p><img src="https://i.imgur.com/VBt5082.png" alt></p><p><img src="https://i.imgur.com/I8pCHF8.png" alt></p></li><li><p>MVVM （Model View ViewModel）</p></li></ul><p><img src="https://i.imgur.com/nbERAJ8.png" alt> </p><blockquote><p>View 通过 <code>事件绑定</code> (DOM Listeners) 操作Model; Model通过 <code>数据绑定</code> (Data Bindings)操作View。</p></blockquote><h2 id="Vue-三要素"><a href="#Vue-三要素" class="headerlink" title="Vue 三要素"></a>Vue 三要素</h2><ul><li>响应式： Vue 如何监听到 data 的每个属性变化？</li><li>模板引擎： Vue 的模板如何被解析，指令如何处理？</li><li>渲染：Vue 的模板如何被渲染成Html？</li></ul><h3 id="Vue中如何实现响应式"><a href="#Vue中如何实现响应式" class="headerlink" title="Vue中如何实现响应式"></a>Vue中如何实现响应式</h3><h4 id="什么是响应式"><a href="#什么是响应式" class="headerlink" title="什么是响应式"></a>什么是响应式</h4><ul><li>修改 data 属性之后， Vue 立刻监听到</li><li>data 属性被代理到 vm上</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: <span class="string">'zhangsan'</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// vm.name = 'zhangsan'</span></span><br><span class="line"><span class="comment">// vm.age = '20'</span></span><br></pre></td></tr></table></figure><h4 id="Object-defineProperty，Vue核心函数"><a href="#Object-defineProperty，Vue核心函数" class="headerlink" title="Object.defineProperty，Vue核心函数"></a>Object.defineProperty，Vue核心函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zhangsan'</span>,</span><br><span class="line">  age: <span class="number">25</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// 获取属性的时候，如何监听</span></span><br><span class="line">obj.age = <span class="number">26</span>; <span class="comment">// 赋值属性的时候，如何监听</span></span><br></pre></td></tr></table></figure><p>上面是无法监听对象的属性的访问以及赋值操作的，直接就产生了操作的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> _name = <span class="string">'shangsan'</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'name'</span>, &#123;</span><br><span class="line">  <span class="keyword">get</span>: function () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'get'</span>, _name) <span class="comment">// 监听</span></span><br><span class="line">    <span class="keyword">return</span> _name</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span>: function (newVal) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'set'</span>, newVal)  <span class="comment">// 监听</span></span><br><span class="line">    _name = newVal</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// 可以监听到</span></span><br><span class="line">obj.name = <span class="string">'lisi'</span>; <span class="comment">// 可以监听到</span></span><br></pre></td></tr></table></figure><h3 id="Vue-中何如解析模板"><a href="#Vue-中何如解析模板" class="headerlink" title="Vue 中何如解析模板"></a>Vue 中何如解析模板</h3><h4 id="模板是什么"><a href="#模板是什么" class="headerlink" title="模板是什么"></a>模板是什么</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add"</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>本质： 字符串</li><li>有逻辑， 如<code>v-if</code> <code>v-for</code> 等</li><li>与 html 标签格式很像，但有很大区别（html是静态的，模板是动态的）</li><li>最终还要转换为 html 来显示<ul><li>模板最终必须转换成 JS 代码</li><li>有逻辑（<code>v-if</code> <code>v-for</code> 等），必须用JS才能实现（图灵完备）</li><li>因此，模板最重要转成一个JS函数（render函数）</li></ul></li></ul><h4 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h4><h5 id="with-–-实际开发不推荐用"><a href="#with-–-实际开发不推荐用" class="headerlink" title="with – 实际开发不推荐用"></a>with – 实际开发不推荐用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'zhangsan'</span>,</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">  getAddress: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'beijing'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不使用with</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(obj.name)</span><br><span class="line">  alert(obj.age)</span><br><span class="line">  obj.getAddress()</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用with</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">with</span>(obj) &#123;</span><br><span class="line">    alert(age)</span><br><span class="line">    alert(name)</span><br><span class="line">    getAddress()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn1()</span><br></pre></td></tr></table></figure><h5 id="render"><a href="#render" class="headerlink" title="render"></a>render</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">  price: 100</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模板将变成下面这个样子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">with</span>(<span class="keyword">this</span>) &#123;  <span class="comment">// this 就是 vm</span></span><br><span class="line"><span class="keyword">return</span> _c(</span><br><span class="line">  <span class="string">'div'</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    attrs: &#123;<span class="string">'id'</span>: <span class="string">'app'</span>&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  [</span><br><span class="line">    _c(<span class="string">'p'</span>, [_v(_s(price))])</span><br><span class="line">  ]</span><br><span class="line">)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/anzI5vL.png" alt></p><h5 id="看todo-list的render"><a href="#看todo-list的render" class="headerlink" title="看todo-list的render"></a>看todo-list的render</h5><p>在vue源码里<code>alert</code>  <code>render</code> 函数</p><p><img src="https://i.imgur.com/uBpSBab.png" alt> </p><p>以上面vue实现的todolist为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>(<span class="keyword">this</span>)&#123;  <span class="comment">// this 就是 vm</span></span><br><span class="line">    <span class="keyword">return</span> _c( <span class="comment">// _c创建一个标签</span></span><br><span class="line">        <span class="string">'div'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            attrs:&#123;<span class="string">"id"</span>:<span class="string">"app"</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        [</span><br><span class="line">            _c(</span><br><span class="line">                <span class="string">'div'</span>,</span><br><span class="line">                [</span><br><span class="line">                    _c(</span><br><span class="line">                        <span class="string">'input'</span>,</span><br><span class="line">                        &#123;</span><br><span class="line">                            directives:[</span><br><span class="line">                                &#123;</span><br><span class="line">                                    name:<span class="string">"model"</span>,</span><br><span class="line">                                    rawName:<span class="string">"v-model"</span>,</span><br><span class="line">                                    value:(title),</span><br><span class="line">                                    expression:<span class="string">"title"</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            ],</span><br><span class="line">                            domProps:&#123;</span><br><span class="line">                                <span class="string">"value"</span>:(title)</span><br><span class="line">                            &#125;,</span><br><span class="line">                            on:&#123;</span><br><span class="line">                                <span class="string">"input"</span>:<span class="function"><span class="keyword">function</span>(<span class="params">$event</span>)</span>&#123;</span><br><span class="line">                                    <span class="keyword">if</span>($event.target.composing)<span class="keyword">return</span>;</span><br><span class="line">                                    title=$event.target.value</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ),</span><br><span class="line">                    _v(<span class="string">" "</span>),</span><br><span class="line">                    _c(</span><br><span class="line">                        <span class="string">'button'</span>,</span><br><span class="line">                        &#123;</span><br><span class="line">                            on:&#123;</span><br><span class="line">                                <span class="string">"click"</span>:add</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        [_v(<span class="string">"submit"</span>)]</span><br><span class="line">                    )</span><br><span class="line">                ]</span><br><span class="line">            ),</span><br><span class="line">            _v(<span class="string">" "</span>),</span><br><span class="line">            _c(<span class="string">'div'</span>,</span><br><span class="line">               [</span><br><span class="line">                _c(</span><br><span class="line">                    <span class="string">'ul'</span>,</span><br><span class="line">                    _l((list),<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> _c(<span class="string">'li'</span>,[_v(_s(item))])&#125;) <span class="comment">// _l 解析 v-for 循环</span></span><br><span class="line">                )</span><br><span class="line">            ]</span><br><span class="line">          )</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="render-与-Vdom"><a href="#render-与-Vdom" class="headerlink" title="render 与 Vdom"></a>render 与 Vdom</h5><p><a href="https://finget.github.io/2018/05/22/virtualDom/" target="_blank" rel="noopener">可以先看一下virtualDom</a></p><p><img src="https://i.imgur.com/8ZlZdZn.png" alt> </p><ul><li>vm._c 其实相当于 snabbdom 中的 h 函数</li><li>render 函数执行之后，返回的是 vnode</li></ul><p><img src="https://i.imgur.com/2C0Lz42.png" alt> </p><ul><li>updateComponent 中实现了 vdom 的 patch</li><li>页面首次渲染 执行updateComponent</li><li>data 中每次修改属性， 执行 updateComponent</li></ul><h5 id="vue-的整个实现流程"><a href="#vue-的整个实现流程" class="headerlink" title="vue 的整个实现流程"></a>vue 的整个实现流程</h5><ul><li>第一步： 解析模板成render函数<ul><li>with 的用法</li><li>模板中的所有信息都被render函数包含</li><li>模板中用到的data中的属性，都变成了js变量</li><li>模板中的v-model v-if v-on 都变成了 js逻辑</li><li>render 函数返回 vnode</li></ul></li></ul><p><img src="https://i.imgur.com/vXDR2CX.png" alt><br><img src="https://i.imgur.com/IM7NA6B.png" alt></p><ul><li>第二部： 响应式开始监听<ul><li>Object.defineProperty</li><li>将 data 的属性代理到 vm 上</li></ul></li></ul><p><img src="https://i.imgur.com/gA2rWmu.png" alt></p><ul><li>第三步： 首次渲染，显示页面，且绑定依赖</li></ul><p><img src="https://i.imgur.com/1b0LjjK.png" alt></p><ul><li>第四步： data 属性变化，触发 rerender</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      JavaScript从初级往高级走系列，一次学习记录吧，一直在路上
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>JSX到原生DOM是怎么炼成的</title>
    <link href="http://yoursite.com/2018/05/24/react-render/"/>
    <id>http://yoursite.com/2018/05/24/react-render/</id>
    <published>2018-05-24T09:28:24.000Z</published>
    <updated>2019-05-05T08:13:43.824Z</updated>
    
    <content type="html"><![CDATA[<p>一段很平常的JSX代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ele = <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div"</span> <span class="attr">className</span>=<span class="string">"red"</span>&gt;</span>hello</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">"blue"</span>&gt;</span>word<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(ele,<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>))</span><br></pre></td></tr></table></figure></p><h2 id="JSX语法糖"><a href="#JSX语法糖" class="headerlink" title="JSX语法糖"></a>JSX语法糖</h2><p>上面的写法是为了写起来方便也就是所谓的语法糖，我们借用babel的在线工具可以清楚的看到原生的react应该怎么写：<br><img src="https://i.imgur.com/dWU0WAr.png" alt></p><h2 id="React-createElement-真面目"><a href="#React-createElement-真面目" class="headerlink" title="React.createElement()真面目"></a>React.createElement()真面目</h2><p>那么React.createElement()，创建的react元素又是长什么样的？<br>我们可以打印ele看一看：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(ele);</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/MmWpLXK.png" alt></p><p>简化一下它的结构<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> eleObj = &#123;</span><br><span class="line">  type: <span class="string">'div'</span>, <span class="comment">// 就是什么标签嘛</span></span><br><span class="line">  props:&#123; <span class="comment">// 属性 包括子节点</span></span><br><span class="line">    className: <span class="string">'red'</span>, <span class="comment">// class</span></span><br><span class="line">    id: <span class="string">'div'</span>,  <span class="comment">// id</span></span><br><span class="line">    children:[  <span class="comment">// 子节点</span></span><br><span class="line">      <span class="string">'hello'</span>,  <span class="comment">// 文本子节点</span></span><br><span class="line">      &#123;         <span class="comment">// 子节点对象</span></span><br><span class="line">        type:<span class="string">'span'</span>,</span><br><span class="line">        props:&#123;</span><br><span class="line">          className:<span class="string">'blue'</span>,</span><br><span class="line">          children:[<span class="string">'word'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="模拟render-函数实现"><a href="#模拟render-函数实现" class="headerlink" title="模拟render()函数实现"></a>模拟render()函数实现</h2><p>ReactDOM.render()是怎么解析react元素的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟render函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">eleObj, container</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 解构出标签的类型和属性对象</span></span><br><span class="line">  <span class="keyword">let</span> &#123;type, props&#125; = eleObj;</span><br><span class="line">  <span class="comment">// 创建一个DOM元素</span></span><br><span class="line">  <span class="keyword">let</span> ele = <span class="built_in">document</span>.createElement(type);</span><br><span class="line">  <span class="comment">// 循环属性对象</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> props)&#123;</span><br><span class="line">    <span class="keyword">if</span>(attr == <span class="string">'children'</span>)&#123;</span><br><span class="line">      props[attr].forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> item == <span class="string">'string'</span>)&#123;</span><br><span class="line">          <span class="keyword">let</span> textNode = <span class="built_in">document</span>.createTextNode(item);</span><br><span class="line">          ele.appendChild(textNode);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 递归调用</span></span><br><span class="line">          render(item, ele);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(attr == <span class="string">'className'</span>) &#123;</span><br><span class="line">      ele.setAttribute(<span class="string">'class'</span>,props[attr]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ele.setAttribute(attr, props[attr]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      模拟实现ReactDOM.render()方法
    
    </summary>
    
      <category term="react" scheme="http://yoursite.com/categories/react/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript从初级往高级走系列————Virtual Dom</title>
    <link href="http://yoursite.com/2018/05/22/virtualDom/"/>
    <id>http://yoursite.com/2018/05/22/virtualDom/</id>
    <published>2018-05-22T05:02:01.000Z</published>
    <updated>2019-05-05T08:13:43.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是虚拟DOM"><a href="#什么是虚拟DOM" class="headerlink" title="什么是虚拟DOM"></a>什么是虚拟DOM</h2><ul><li>用JS模拟DOM结构</li><li>DOM变化的对比，放在JS层来做（图灵完备语言）</li><li>提高重绘性能</li></ul><h3 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h3><p>页面渲染过程：<br><img src="https://i.imgur.com/WEJCK1f.jpg" alt="重绘和回流"></p><ul><li>当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。</li><li>当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color。则就叫称为重绘。</li></ul><h3 id="模拟虚拟DOM"><a href="#模拟虚拟DOM" class="headerlink" title="模拟虚拟DOM"></a>模拟虚拟DOM</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js模拟虚拟DOM</span></span><br><span class="line">&#123;</span><br><span class="line">  tag: <span class="string">'ul'</span>,</span><br><span class="line">  attrs:&#123;</span><br><span class="line">    id: <span class="string">'list'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  children:[</span><br><span class="line">    &#123;</span><br><span class="line">      tag: <span class="string">'li'</span>,</span><br><span class="line">      attrs: &#123;<span class="attr">className</span>: <span class="string">'item'</span>&#125;,</span><br><span class="line">      children: [<span class="string">'Item 1'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      tag: <span class="string">'li'</span>,</span><br><span class="line">      attrs: &#123;<span class="attr">className</span>: <span class="string">'item'</span>&#125;,</span><br><span class="line">      children: [<span class="string">'Item 2'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/2.2.0/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-change"</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> data = [</span></span><br><span class="line"><span class="javascript">  &#123;<span class="attr">name</span>: <span class="string">'张三'</span>,<span class="attr">age</span>: <span class="string">'20'</span>,<span class="attr">address</span>: <span class="string">'北京'</span>&#125;,</span></span><br><span class="line"><span class="javascript">  &#123;<span class="attr">name</span>: <span class="string">'王五'</span>,<span class="attr">age</span>: <span class="string">'22'</span>,<span class="attr">address</span>: <span class="string">'成都'</span>&#125;,</span></span><br><span class="line"><span class="javascript">  &#123;<span class="attr">name</span>: <span class="string">'李四'</span>,<span class="attr">age</span>: <span class="string">'21'</span>,<span class="attr">address</span>: <span class="string">'上海'</span>&#125;</span></span><br><span class="line"><span class="undefined">]</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 渲染函数</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> $container = $(<span class="string">'#container'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 清空容器，重要！！！</span></span></span><br><span class="line"><span class="javascript">      $container.html(<span class="string">''</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 拼接 table</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> $table = $(<span class="string">'&lt;table&gt;'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml">      $table.append($('<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>name<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>age<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>address<span class="tag">&lt;/<span class="name">td</span>&gt;</span>/tr&gt;'));</span></span><br><span class="line"><span class="javascript">      data.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span></span><br><span class="line"><span class="xml">      $table.append($('<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>' + item.name + '<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>' + item.age + '<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>' + item.address   + '<span class="tag">&lt;/<span class="name">td</span>&gt;</span>/tr&gt;'))</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 渲染到页面</span></span></span><br><span class="line"><span class="undefined">      $container.append($table);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#btn-change'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">      data[1].age = 30;</span></span><br><span class="line"><span class="javascript">      data[<span class="number">2</span>].address = <span class="string">'深圳'</span>;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// re-render  再次渲染</span></span></span><br><span class="line"><span class="undefined">      render(data);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 页面加载完立刻执行（初次渲染）</span></span></span><br><span class="line"><span class="undefined">    render(data);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虽然只改变了两个数据，但是整个table都闪烁了（回流&amp;重绘）<br><img src="https://i.imgur.com/x7JUVud.gif" alt></p><ul><li>DOM操作是‘昂贵’的，js运行效率高</li><li>尽量减少DOM操作，尽量减少回流重绘</li></ul><h2 id="虚拟DOM如何应用，核心API是什么"><a href="#虚拟DOM如何应用，核心API是什么" class="headerlink" title="虚拟DOM如何应用，核心API是什么"></a>虚拟DOM如何应用，核心API是什么</h2><h3 id="介绍-snabbdom"><a href="#介绍-snabbdom" class="headerlink" title="介绍 snabbdom"></a>介绍 snabbdom</h3><p><a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noopener">snabbdom GitHub地址</a></p><p>官网例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> snabbdom = <span class="built_in">require</span>(<span class="string">'snabbdom'</span>);</span><br><span class="line"><span class="keyword">var</span> patch = snabbdom.init([ <span class="comment">// Init patch function with chosen modules</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/class'</span>).default, <span class="comment">// makes it easy to toggle classes</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/props'</span>).default, <span class="comment">// for setting properties on DOM elements</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/style'</span>).default, <span class="comment">// handles styling on elements with support for animations</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/eventlisteners'</span>).default, <span class="comment">// attaches event listeners</span></span><br><span class="line">]);</span><br><span class="line"><span class="keyword">var</span> h = <span class="built_in">require</span>(<span class="string">'snabbdom/h'</span>).default; <span class="comment">// helper function for creating vnodes</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// h函数生成一个虚拟节点</span></span><br><span class="line"><span class="keyword">var</span> vnode = h(<span class="string">'div#container.two.classes'</span>, &#123;<span class="attr">on</span>: &#123;<span class="attr">click</span>: someFn&#125;&#125;, [</span><br><span class="line">  h(<span class="string">'span'</span>, &#123;<span class="attr">style</span>: &#123;<span class="attr">fontWeight</span>: <span class="string">'bold'</span>&#125;&#125;, <span class="string">'This is bold'</span>),</span><br><span class="line">  <span class="string">' and this is just normal text'</span>,</span><br><span class="line">  h(<span class="string">'a'</span>, &#123;<span class="attr">props</span>: &#123;<span class="attr">href</span>: <span class="string">'/foo'</span>&#125;&#125;, <span class="string">'I\'ll take you places!'</span>)</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// Patch into empty DOM element – this modifies the DOM as a side effect</span></span><br><span class="line">patch(container, vnode); <span class="comment">// 把vnode加入到container中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据改变，重新生成一个newVnode</span></span><br><span class="line"><span class="keyword">var</span> newVnode = h(<span class="string">'div#container.two.classes'</span>, &#123;<span class="attr">on</span>: &#123;<span class="attr">click</span>: anotherEventHandler&#125;&#125;, [</span><br><span class="line">  h(<span class="string">'span'</span>, &#123;<span class="attr">style</span>: &#123;<span class="attr">fontWeight</span>: <span class="string">'normal'</span>, <span class="attr">fontStyle</span>: <span class="string">'italic'</span>&#125;&#125;, <span class="string">'This is now italic type'</span>),</span><br><span class="line">  <span class="string">' and this is still just normal text'</span>,</span><br><span class="line">  h(<span class="string">'a'</span>, &#123;<span class="attr">props</span>: &#123;<span class="attr">href</span>: <span class="string">'/bar'</span>&#125;&#125;, <span class="string">'I\'ll take you places!'</span>)</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// Second `patch` invocation</span></span><br><span class="line"><span class="comment">// 将newVnode更新到之前的vnode中，从而更新视图</span></span><br><span class="line">patch(vnode, newVnode); <span class="comment">// Snabbdom efficiently updates the old view to the new state</span></span><br></pre></td></tr></table></figure></p><h4 id="snabbdom-h-函数"><a href="#snabbdom-h-函数" class="headerlink" title="snabbdom h 函数"></a>snabbdom h 函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vnode = h(<span class="string">'ul#list'</span>,&#123;&#125;,[</span><br><span class="line">  h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 1'</span>),</span><br><span class="line">  h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 2'</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  tag: <span class="string">'ul'</span>,</span><br><span class="line">  attrs:&#123;</span><br><span class="line">    id: <span class="string">'list'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  children:[</span><br><span class="line">    &#123;</span><br><span class="line">      tag: <span class="string">'li'</span>,</span><br><span class="line">      attrs: &#123;<span class="attr">className</span>: <span class="string">'item'</span>&#125;,</span><br><span class="line">      children: [<span class="string">'Item 1'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      tag: <span class="string">'li'</span>,</span><br><span class="line">      attrs: &#123;<span class="attr">className</span>: <span class="string">'item'</span>&#125;,</span><br><span class="line">      children: [<span class="string">'Item 2'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="snabbdom-patch-函数"><a href="#snabbdom-patch-函数" class="headerlink" title="snabbdom patch 函数"></a>snabbdom patch 函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vnode = h(<span class="string">'ul#list'</span>,&#123;&#125;,[</span><br><span class="line">  h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 1'</span>),</span><br><span class="line">  h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 2'</span>)</span><br><span class="line">])</span><br><span class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span><br><span class="line">patch(container, vnode);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟改变</span></span><br><span class="line"><span class="keyword">var</span> btnChange = <span class="built_in">document</span>.getElementById(<span class="string">'btn-change'</span>);</span><br><span class="line">btnChange.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newVnode = h(<span class="string">'ul#list'</span>,&#123;&#125;,[</span><br><span class="line">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 111'</span>),</span><br><span class="line">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 222'</span>),</span><br><span class="line">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 333'</span>)</span><br><span class="line">  ])</span><br><span class="line">  patch(vnode, newVnode);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="snabbdom例子"><a href="#snabbdom例子" class="headerlink" title="snabbdom例子"></a>snabbdom例子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom-class.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom-props.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom-style.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/h.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.1/snabbdom-eventlisteners.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-change"</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> snabbdom = <span class="built_in">window</span>.snabbdom;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 定义 patch</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> patch = snabbdom.init([</span></span><br><span class="line"><span class="undefined">snabbdom_class,</span></span><br><span class="line"><span class="undefined">snabbdom_props,</span></span><br><span class="line"><span class="undefined">snabbdom_style,</span></span><br><span class="line"><span class="undefined">snabbdom_eventlisteners</span></span><br><span class="line"><span class="undefined">])</span></span><br><span class="line"><span class="javascript"><span class="comment">// 定义 h</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> h = snabbdom.h;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 生成 vnode</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vnode = h(<span class="string">'ul#list'</span>,&#123;&#125;,[</span></span><br><span class="line"><span class="javascript">  h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 1'</span>),</span></span><br><span class="line"><span class="javascript">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 2'</span>)</span></span><br><span class="line"><span class="undefined">])</span></span><br><span class="line"><span class="undefined">patch(container, vnode);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 模拟数据改变</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btnChange = <span class="built_in">document</span>.getElementById(<span class="string">'btn-change'</span>);</span></span><br><span class="line"><span class="javascript">btnChange.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> newVnode = h(<span class="string">'ul#list'</span>,&#123;&#125;,[</span></span><br><span class="line"><span class="javascript">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 1'</span>),</span></span><br><span class="line"><span class="javascript">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 222'</span>),</span></span><br><span class="line"><span class="javascript">    h(<span class="string">'li.item'</span>,&#123;&#125;,<span class="string">'Item 333'</span>)</span></span><br><span class="line"><span class="undefined">  ])</span></span><br><span class="line"><span class="undefined">  patch(vnode, newVnode);</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看图，只有修改了的数据才进行了刷新，减少了DOM操作，这其实就是vnode与newVnode对比，找出改变了的地方，然后只重新渲染改变的<br><img src="https://i.imgur.com/bkGqypK.gif" alt></p><h3 id="重做之前的demo"><a href="#重做之前的demo" class="headerlink" title="重做之前的demo"></a>重做之前的demo</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn-change"</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.0/snabbdom.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.0/snabbdom-class.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.0/snabbdom-props.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.0/snabbdom-style.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.0/snabbdom-eventlisteners.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/snabbdom/0.7.0/h.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> snabbdom = <span class="built_in">window</span>.snabbdom;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义关键函数 patch</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> patch = snabbdom.init([</span></span><br><span class="line"><span class="undefined">      snabbdom_class,</span></span><br><span class="line"><span class="undefined">      snabbdom_props,</span></span><br><span class="line"><span class="undefined">      snabbdom_style,</span></span><br><span class="line"><span class="undefined">      snabbdom_eventlisteners</span></span><br><span class="line"><span class="undefined">    ]);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义关键函数 h</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> h = snabbdom.h;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 原始数据</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> data = [</span></span><br><span class="line"><span class="javascript">      &#123;<span class="attr">name</span>: <span class="string">'张三'</span>,<span class="attr">age</span>: <span class="string">'20'</span>,<span class="attr">address</span>: <span class="string">'北京'</span>&#125;,</span></span><br><span class="line"><span class="javascript">  &#123;<span class="attr">name</span>: <span class="string">'王五'</span>,<span class="attr">age</span>: <span class="string">'22'</span>,<span class="attr">address</span>: <span class="string">'成都'</span>&#125;,</span></span><br><span class="line"><span class="javascript">  &#123;<span class="attr">name</span>: <span class="string">'李四'</span>,<span class="attr">age</span>: <span class="string">'21'</span>,<span class="attr">address</span>: <span class="string">'上海'</span>&#125;</span></span><br><span class="line"><span class="undefined">]</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 把表头也放在 data 中</span></span></span><br><span class="line"><span class="undefined">    data.unshift(&#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">'姓名'</span>,</span></span><br><span class="line"><span class="javascript">      age: <span class="string">'年龄'</span>,</span></span><br><span class="line"><span class="javascript">      address: <span class="string">'地址'</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 渲染函数</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vnode;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> newVnode = h(<span class="string">'table'</span>, &#123;&#125;, data.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> tds = [];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> i;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (i <span class="keyword">in</span> item) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (item.hasOwnProperty(i)) &#123;</span></span><br><span class="line"><span class="javascript">            tds.push(h(<span class="string">'td'</span>, &#123;&#125;, item[i] + <span class="string">''</span>));</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> h(<span class="string">'tr'</span>, &#123;&#125;, tds)</span></span><br><span class="line"><span class="undefined">      &#125;));</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (vnode) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// re-render</span></span></span><br><span class="line"><span class="undefined">        patch(vnode, newVnode);</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 初次渲染</span></span></span><br><span class="line"><span class="undefined">        patch(container, newVnode);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 存储当前的 vnode 结果</span></span></span><br><span class="line"><span class="undefined">      vnode = newVnode;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 初次渲染</span></span></span><br><span class="line"><span class="undefined">    render(data)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btnChange = <span class="built_in">document</span>.getElementById(<span class="string">'btn-change'</span>)</span></span><br><span class="line"><span class="javascript">    btnChange.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">      data[1].age = 30</span></span><br><span class="line"><span class="javascript">      data[<span class="number">2</span>].address = <span class="string">'深圳'</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// re-render</span></span></span><br><span class="line"><span class="undefined">      render(data)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/aptwoC0.gif" alt></p><h3 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h3><ul><li>h(‘&lt;标签名&gt;’,{…属性…},[…子元素…])</li><li>h(‘&lt;标签名&gt;’,{…属性…},’…’)</li><li>patch(container,vnode)</li><li>patch(vnode,newVnode)</li></ul><h2 id="简单介绍-diff-算法"><a href="#简单介绍-diff-算法" class="headerlink" title="简单介绍 diff 算法"></a>简单介绍 diff 算法</h2><h3 id="什么是-diff-算法"><a href="#什么是-diff-算法" class="headerlink" title="什么是 diff 算法"></a>什么是 diff 算法</h3><p>这里有两个文本文件：<br><img src="https://i.imgur.com/RSJ5XMS.png" alt><br>借用<code>git bash</code>中 <code>diff</code> 命令可以比较两个文件的区别：<br><img src="https://i.imgur.com/cHgP1Rv.png" alt></p><p><a href="https://www.diffchecker.com/" target="_blank" rel="noopener">在线diff工具</a></p><p><img src="https://i.imgur.com/S1yiL9h.png" alt></p><p>虚拟DOM —&gt; DOM<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个实现流程，实际情况还很复杂</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">vnode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tag = vnode.tag  <span class="comment">// 'ul'</span></span><br><span class="line">  <span class="keyword">var</span> attrs = vnode.attrs || &#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> children = vnode.children || []</span><br><span class="line">  <span class="keyword">if</span> (!tag) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建真实的 DOM 元素</span></span><br><span class="line">  <span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(tag)</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="keyword">var</span> attrName</span><br><span class="line">  <span class="keyword">for</span> (attrName <span class="keyword">in</span> attrs) &#123;</span><br><span class="line">    <span class="keyword">if</span> (attrs.hasOwnProperty(attrName)) &#123;</span><br><span class="line">      <span class="comment">// 给 elem 添加属性</span></span><br><span class="line">      elem.setAttribute(attrName, attrs[attrName])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 子元素</span></span><br><span class="line">  children.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">childVnode</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 给 elem 添加子元素</span></span><br><span class="line">    elem.appendChild(createElement(childVnode))  <span class="comment">// 递归</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回真实的 DOM 元素</span></span><br><span class="line">  <span class="keyword">return</span> elem</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>vnode —&gt; newVnode<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateChildren</span>(<span class="params">vnode, newVnode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> children = vnode.children || [];</span><br><span class="line">  <span class="keyword">var</span> newChildren = newVnode.children || [];</span><br><span class="line"></span><br><span class="line">  children.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">childVnode, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newChildVnode = newChildren[index];</span><br><span class="line">    <span class="keyword">if</span> (childVnode.tag === newChildVnode.tag) &#123;</span><br><span class="line">        <span class="comment">// 深层次对比，递归</span></span><br><span class="line">        updateChildren(childVnode, newChildVnode);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 替换</span></span><br><span class="line">        replaceNode(childVnode, newChildVnode);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceNode</span>(<span class="params">vnode, newVnode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> elem = vnode.elem;  <span class="comment">// 真实的 DOM 节点</span></span><br><span class="line">  <span class="keyword">var</span> newElem = createElement(newVnode);</span><br><span class="line">  <span class="comment">// 替换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      JavaScript从初级往高级走系列，一次学习记录吧，一直在路上
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript从初级往高级走系列————异步</title>
    <link href="http://yoursite.com/2018/05/21/async/"/>
    <id>http://yoursite.com/2018/05/21/async/</id>
    <published>2018-05-21T06:38:23.000Z</published>
    <updated>2019-05-05T08:13:43.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><ul><li>什么是单线程，和异步有什么关系</li><li>什么是event-loop</li><li>是否用过jQuery的Deferred</li><li>Promise的基本使用和原理</li><li>介绍一下async/await(和Promise的区别、联系)</li><li>异步解决方案</li></ul><h2 id="什么是单线程，和异步有什么关系"><a href="#什么是单线程，和异步有什么关系" class="headerlink" title="什么是单线程，和异步有什么关系"></a>什么是单线程，和异步有什么关系</h2><blockquote><p>单线程-只有一个线程，只做一件事。JS之所以是单线程，取决于它的实际使用，例如JS不可能同添加一个DOM和删除这个DOM，所以它只能是单线程的。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">alert(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>上面这个例子中，当执行了<code>alert(1)</code>,如果用户不点击确定按钮，<code>console.log(2)</code>是不会执行的。</p><blockquote><p>为了利用多核CPU的计算能力，HTML5提出<code>WebWorker</code>标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p></blockquote><h2 id="js异步"><a href="#js异步" class="headerlink" title="js异步"></a>js异步</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">200</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">300</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">400</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">400</span>);</span><br><span class="line">.... <span class="comment">// 这里来很多很多个console.log(400); 结果就是打印完所有的400，等一秒再打印200</span></span><br></pre></td></tr></table></figure><h2 id="event-loop"><a href="#event-loop" class="headerlink" title="event-loop"></a>event-loop</h2><p><img src="http://www.ruanyifeng.com/blogimg/asset/2014/bg2014100802.png" alt="event-loop"></p><h3 id="文字解释"><a href="#文字解释" class="headerlink" title="文字解释"></a>文字解释</h3><ul><li>事件轮询，JS实现异步的具体解决方案</li><li>同步代码，直接执行</li><li>异步函数先放在异步队列中</li><li>待同步函数执行完毕，轮询执行 异步队列 的函数</li></ul><p>上面那个例子的执行效果就是这样的：<br><img src="https://i.imgur.com/eAYeNea.png" alt><br>实例分析：<br><img src="https://i.imgur.com/tW0BkDD.png" alt><br><img src="https://i.imgur.com/EJ4jsZc.png" alt></p><blockquote><p>这个例子中有两种情况，取决于ajax的返回时间，如果ajax时间小于100ms它就先放进异步队列</p></blockquote><h2 id="Jquery-Deferred"><a href="#Jquery-Deferred" class="headerlink" title="Jquery Deferred"></a>Jquery Deferred</h2><h3 id="Jquery1-5前后的变化"><a href="#Jquery1-5前后的变化" class="headerlink" title="Jquery1.5前后的变化"></a>Jquery1.5前后的变化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ajax = $.ajax(&#123;</span><br><span class="line">  url: <span class="string">'data.json'</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success1'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success2'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success3'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'error'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ajax); <span class="comment">// 返回一个xhr对象</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链式操作</span></span><br><span class="line"><span class="keyword">var</span> ajax = $.ajax(<span class="string">'data.json'</span>);</span><br><span class="line">ajax.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'success1'</span>);</span><br><span class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'error'</span>);</span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(ajax); <span class="comment">// 返回一个deferred对象</span></span><br></pre></td></tr></table></figure><ul><li>无法改变JS异步和单线程的本质</li><li>只能从写法上杜绝callback这种形式</li><li>它是一种语法糖形式，但是解耦了代码</li><li>很好的体现：开放封闭原则（对扩展开放，对修改封闭）</li></ul><h3 id="使用Jquery-Deferred"><a href="#使用Jquery-Deferred" class="headerlink" title="使用Jquery Deferred"></a>使用Jquery Deferred</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给出一段非常简单的异步操作代码，使用setTimeout函数</span></span><br><span class="line"><span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'执行完成)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  setTimeout(task, 2000);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">wait();</span></span><br></pre></td></tr></table></figure><p>新增需求：要在执行完成之后进行某些特别复杂的操作，代码可能会很多，而且分好几个步骤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waitHandle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dtd = $.Deferred(); <span class="comment">// 创建一个deferred对象</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>)</span>&#123; <span class="comment">// 要求传入一个deferred对象</span></span><br><span class="line">    <span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'执行完成'</span>);</span><br><span class="line">      dtd.resolve(); <span class="comment">// 表示异步任务已经完成</span></span><br><span class="line">      <span class="comment">// dtd.reject(); // 表示异步任务失败或出错</span></span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(task, <span class="number">2000</span>);</span><br><span class="line">    <span class="keyword">return</span> dtd; <span class="comment">// 要求返回deferred对象</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 注意，这里一定要有返回值</span></span><br><span class="line">  <span class="keyword">return</span> wait(dtd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> w = waitHandle();</span><br><span class="line">w.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ok 1'</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'err 1'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ok 2'</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'err 2'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当执行dtd.reject()时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w = waitHandle();</span><br><span class="line">w.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ok 1'</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'err 1'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 不能链式</span></span><br><span class="line">w.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ok 2'</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'err 2'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面封装的<code>waitHandle</code>方法,由于直接返回了<code>dtd</code>（deferred对象），所以用户可以直接调用<code>w.reject()</code>方法，导致无论是成功还是失败，最后都走失败。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waitHandle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dtd = $.Deferred();</span><br><span class="line">  <span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'执行完成'</span>);</span><br><span class="line">      dtd.resolve(); </span><br><span class="line">    &#125;</span><br><span class="line">    setTimeout(task, <span class="number">2000</span>);</span><br><span class="line">    <span class="keyword">return</span> dtd.promise(); <span class="comment">// 注意这里返回的是promise，而不是直接返回deferred对象</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> wait(dtd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ES6的Promise：<a href="https://finget.github.io/2018/03/08/promise/" target="_blank" rel="noopener">点这里</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// promise封装一个异步加载图片的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      resolve(img)</span><br><span class="line">    &#125;</span><br><span class="line">    img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      reject(<span class="string">'图片加载失败'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    img.src = src;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><blockquote><p>这是ES7提案中的，现在babel已经开始支持了，koa也是用async/await实现的。</p></blockquote><ul><li>then 只是将callback拆分了</li><li>async/await 是最直接的同步写法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="keyword">const</span> load = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result1 = <span class="keyword">await</span> loadImg(src1);</span><br><span class="line">  <span class="built_in">console</span>.log(result1);</span><br><span class="line">  <span class="keyword">const</span> result2 = <span class="keyword">await</span> loadImg(src2);</span><br><span class="line">  <span class="built_in">console</span>.log(result2);</span><br><span class="line">&#125;</span><br><span class="line">load();</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      JavaScript从初级往高级走系列，一次学习记录吧，一直在路上
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript从初级往高级走系列————prototype</title>
    <link href="http://yoursite.com/2018/05/10/javascript-prototype/"/>
    <id>http://yoursite.com/2018/05/10/javascript-prototype/</id>
    <published>2018-05-10T03:56:15.000Z</published>
    <updated>2019-05-05T08:13:43.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><blockquote><p>下面内容为转载的，<a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">原地址</a>,写的真的很好！</p></blockquote><h3 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h3><p>我们先使用构造函数创建一个对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.name = <span class="string">'Kevin'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure><p>在这个例子中，Person 就是一个构造函数，我们使用 new 创建了一个实例对象 person。</p><p>很简单吧，接下来进入正题：</p><h4 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h4><p>每个函数都有一个 prototype 属性，就是我们经常在各种例子中看到的那个 prototype ，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 虽然写在注释里，但是你要注意：</span></span><br><span class="line"><span class="comment">// prototype是函数才会有的属性</span></span><br><span class="line">Person.prototype.name = <span class="string">'Kevin'</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person1.name) <span class="comment">// Kevin</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.name) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure><p>那这个函数的 <code>prototype</code> 属性到底指向的是什么呢？是这个函数的原型吗？</p><p>其实，函数的 <code>prototype</code> 属性指向了一个对象，这个对象正是调用该构造函数而创建的实例的原型，也就是这个例子中的 person1 和 person2 的原型。</p><p>那什么是原型呢？你可以这样理解：每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型”继承”属性。</p><p>让我们用一张图表示构造函数和实例原型之间的关系：</p><p><img src="https://s26.postimg.cc/x6u11fq6h/prototype1.png" alt="构造函数和实例原型的关系图"><br>在这张图中我们用 Object.prototype 表示实例原型。</p><p>那么我们该怎么表示实例与实例原型，也就是 <code>person</code> 和 <code>Person.prototype</code> 之间的关系呢，这时候我们就要讲到第二个属性：</p><h4 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h4><p>这是每一个JavaScript对象(除了 null )都具有的一个属性，叫<code>__proto__</code>，这个属性会指向该对象的原型。</p><p>为了证明这一点,我们可以在火狐或者谷歌中输入：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.__proto__ === Person.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>于是我们更新下关系图：</p><p><img src="https://s26.postimg.cc/6lri5wy3t/prototype2.png" alt="实例与实例原型的关系图"></p><p>既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？</p><h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><p>指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数倒是有的，这就要讲到第三个属性：<code>constructor</code>，每个原型都有一个 <code>constructor</code> 属性指向关联的构造函数。</p><p>为了验证这一点，我们可以尝试：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person === Person.prototype.constructor); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>所以再更新下关系图：</p><p><img src="https://s26.postimg.cc/pqurfozx5/prototype3.png" alt="实例原型与构造函数的关系图"></p><p>综上我们已经得出：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.__proto__ == Person.prototype) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor == Person) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 顺便学习一个ES5的方法,可以获得对象的原型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(person) === Person.prototype) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>了解了构造函数、实例原型、和实例之间的关系，接下来我们讲讲实例和原型的关系：</p><h3 id="实例与原型"><a href="#实例与原型" class="headerlink" title="实例与原型"></a>实例与原型</h3><p>当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。</p><p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">'Kevin'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">person.name = <span class="string">'Daisy'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// Daisy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.name;</span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure></p><p>在这个例子中，我们给实例对象 <code>person</code> 添加了 <code>name</code> 属性，当我们打印 <code>person.name</code> 的时候，结果自然为 Daisy。</p><p>但是当我们删除了 <code>person</code> 的 <code>name</code> 属性时，读取 <code>person.name</code>，从 <code>person</code> 对象中找不到 <code>name</code> 属性就会从 <code>person</code> 的原型也就是 <code>person.__proto__</code> ，也就是 <code>Person.prototype</code>中查找，幸运的是我们找到了 <code>name</code> 属性，结果为 Kevin。</p><p>但是万一还没有找到呢？原型的原型又是什么呢？</p><h4 id="原型的原型"><a href="#原型的原型" class="headerlink" title="原型的原型"></a>原型的原型</h4><p>在前面，我们已经讲了原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它，那就是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.name = <span class="string">'Kevin'</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure></p><p>其实原型对象就是通过 Object 构造函数生成的，结合之前所讲，实例的 <code>__proto__</code> 指向构造函数的 <code>prototype</code> ，所以我们再更新下关系图：</p><p><img src="https://s26.postimg.cc/ucqvo2o15/prototype4.png" alt="原型的原型关系图"></p><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p>那 <code>Object.prototype</code> 的原型呢？</p><p>null，我们可以打印：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>然而 null 究竟代表了什么呢？</p><p>引用阮一峰老师的 <a href="http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html" target="_blank" rel="noopener">《undefined与null的区别》</a> 就是：</p><blockquote><p>null 表示“没有对象”，即该处不应该有值。</p></blockquote><p>所以 <code>Object.prototype.__proto__</code> 的值为 null 跟 <code>Object.prototype</code> 没有原型，其实表达了一个意思。</p><p>所以查找属性的时候查到 <code>Object.prototype</code> 就可以停止查找了。</p><p>最后一张关系图也可以更新为：</p><p><img src="https://s26.postimg.cc/8dkh0vuc9/prototype5.png" alt="原型链示意图"></p><p>顺便还要说一下，图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>最后，补充三点大家可能不会注意的地方：</p><h4 id="constructor"><a href="#constructor" class="headerlink" title="constructor"></a>constructor</h4><p>首先是 constructor 属性，我们看个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.constructor === Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性，所以：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.constructor === Person.prototype.constructor</span><br></pre></td></tr></table></figure></p><h4 id="proto-1"><a href="#proto-1" class="headerlink" title="proto"></a><strong>proto</strong></h4><p>其次是 <code>__proto__</code> ，绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 <code>Person.prototype</code> 中，实际上，它是来自于 <code>Object.prototype</code> ，与其说是一个属性，不如说是一个 <code>getter/setter</code>，当使用 <code>obj.__proto__</code> 时，可以理解成返回了 <code>Object.getPrototypeOf(obj)</code>。</p><h4 id="真的是继承吗？"><a href="#真的是继承吗？" class="headerlink" title="真的是继承吗？"></a>真的是继承吗？</h4><p>最后是关于继承，前面我们讲到“每一个对象都会从原型‘继承’属性”，实际上，继承是一个十分具有迷惑性的说法，引用《你不知道的JavaScript》中的话，就是：</p><p>继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，<strong>委托</strong>的说法反而更准确些。</p><blockquote><p>推荐阅读:<a href="http://www.ruanyifeng.com/blog/2011/06/designing_ideas_of_inheritance_mechanism_in_javascript.html" target="_blank" rel="noopener">阮一峰Javascript继承机制的设计思想</a> </p></blockquote><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      JavaScript从初级往高级走系列，一次学习记录吧，一直在路上
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript从初级往高级走系列————ES6</title>
    <link href="http://yoursite.com/2018/05/10/javascript-es6/"/>
    <id>http://yoursite.com/2018/05/10/javascript-es6/</id>
    <published>2018-05-10T03:50:50.000Z</published>
    <updated>2019-05-05T08:13:43.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><blockquote><p>现在基本上开发中都在使用ES6，浏览器环境支持不好，可以用babel插件来解决。</p></blockquote><p>采用‘二八定律’，主要涉及ES6常用且重要的部分。</p><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><ul><li>ES6模块化如何使用，开发环境如何打包</li><li>Class和普通构造函数有何区别</li><li>Promise的基本使用和原理</li><li>总结一下ES6其他常用功能</li></ul><h3 id="ES6模块化如何使用，开发环境如何打包"><a href="#ES6模块化如何使用，开发环境如何打包" class="headerlink" title="ES6模块化如何使用，开发环境如何打包"></a>ES6模块化如何使用，开发环境如何打包</h3><h4 id="模块化的基本语法"><a href="#模块化的基本语法" class="headerlink" title="模块化的基本语法"></a>模块化的基本语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// util1.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  a : <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> str;</span><br><span class="line"><span class="comment">// export default const str = 'hello'; X</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// util2.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn2'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fn3 = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn3'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> str <span class="keyword">from</span> <span class="string">'./util1.js'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;fn1 , fn2&#125; <span class="keyword">from</span> <span class="string">'./util2.js'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fn <span class="keyword">from</span> <span class="string">'./util2.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line">fn1();</span><br><span class="line">fn2();</span><br><span class="line"></span><br><span class="line">fn.fn1();</span><br><span class="line">fn.fn2();</span><br></pre></td></tr></table></figure><blockquote><p><code>export default</code> 默认输出这个，然后在<code>import</code>的时候就会拿到默认输出的内容。例子中默认输出的<code>a=100</code>。<br><code>export</code>多个内容，在<code>import</code>时需要使用<code>{}</code>进行引用你需要的内容。</p></blockquote><h5 id="export和export-default与exports和module-exports的区别"><a href="#export和export-default与exports和module-exports的区别" class="headerlink" title="export和export default与exports和module.exports的区别"></a><code>export</code>和<code>export default</code>与<code>exports</code>和<code>module.exports</code>的区别</h5><blockquote><p><code>require</code>: node 和 es6 都支持的引入<br><code>export</code> / <code>import</code> : 只有es6 支持的导出引入<br><code>module.exports</code> / <code>exports</code>: 只有 node 支持的导出</p></blockquote><ol><li><code>module.exports</code> 初始值为一个空对象 {}<ol start="2"><li><code>exports</code> 是指向的 <code>module.exports</code> 的引用</li><li><code>require()</code> 返回的是 <code>module.exports</code> 而不是 <code>exports</code></li></ol></li></ol><p><code>Node</code>里面的模块系统遵循的是CommonJS规范。</p><blockquote><p>CommonJS定义的模块分为: 模块标识(<code>module</code>)、模块定义(<code>exports</code>) 、模块引用(<code>require</code>)</p></blockquote><p>在nodejs，<code>exports</code> 是 <code>module.exports</code>的引用，初始化时，它们都指向同一个<code>{}</code>对象。</p><p>对象在JS中属于引用类型，意思就是<code>exports</code>和<code>module.exports</code>是指向同一个内存地址的。<br><img src="https://i.imgur.com/pA9FAlZ.png" alt></p><p>看下面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exports.fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这两种情况的效果是一样的，上面说了exports与`module.exports初始化同一个对象，所以两种定义方就是给这个同对象定义了一个fn的属性，该属性值为一个函数。</span></span><br><span class="line"><span class="built_in">module</span>.exports.fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这两种情况就不一样了。上面的exports想当于指向了另一个内存地址。而下面这种情况是可以正常导出的。</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fn'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>exports对象是当前模块的导出对象，用于导出模块公有方法和属性。别的模块通过require函数使用当前模块时得到的就是当前模块的exports对象。</strong></p></blockquote><ul><li>module.exports 的使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sayHello.js</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = sayHello;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">var</span> sayHello = <span class="built_in">require</span>(<span class="string">'./sayHello'</span>);</span><br><span class="line"></span><br><span class="line">sayHello();</span><br></pre></td></tr></table></figure><p>定义一个sayHello模块，模块里定义了一个sayHello方法，通过替换当前模块exports对象的方式将sayHello方法导出。<br>在app.js中加载这个模块，得到的是一个函数，调用该函数，控制台打印hello。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sayWorld.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'world'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">var</span> sayWorld = <span class="built_in">require</span>(<span class="string">'./sayWorld'</span>); <span class="comment">// 匿名替换</span></span><br><span class="line">sayWorld();</span><br></pre></td></tr></table></figure><ul><li>exports 导出多个变量</li></ul><p>当要导出多个变量怎么办呢？这个时候替换当前模块对象的方法就不实用了，我们需要用到exports对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// userExports.js</span></span><br><span class="line">exports.a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a exports'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">exports.b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'b exports'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">var</span> useExports = <span class="built_in">require</span>(<span class="string">'./userExports'</span>);</span><br><span class="line">useExports.a();</span><br><span class="line">useExports.b();</span><br><span class="line"><span class="comment">// a exports</span></span><br><span class="line"><span class="comment">// b exports</span></span><br></pre></td></tr></table></figure><p>当然，将useExports.js改成这样也是可以的:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// userExports.js</span></span><br><span class="line"><span class="built_in">module</span>.exports.a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a exports'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports.b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'b exports'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>在实际开发当中可以只使用<code>module.exports</code>避免造成不必要的问题。</p></blockquote><h4 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h4><h5 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h5><p><a href="https://babeljs.cn/" target="_blank" rel="noopener">Babel中文网</a></p><ul><li>nodejs环境 npm init</li><li>npm i babel-core babel-preset-es2015 babel-preset-latest –save-dev</li><li>创建.babelrc文件</li><li>npm i –global babel-cli</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [<span class="string">"es2015"</span>,<span class="string">"latest"</span>],</span><br><span class="line">  <span class="string">"plugins"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h5><p><a href="https://finget.github.io/2018/02/08/webpack/" target="_blank" rel="noopener">四大维度解锁webpack3笔记</a></p><h5 id="rollup-js"><a href="#rollup-js" class="headerlink" title="rollup.js"></a>rollup.js</h5><p><a href="http://www.rollupjs.com/" target="_blank" rel="noopener">Rollup.js官网</a></p><ul><li><code>npm init</code></li><li>安装 <code>rollup.js</code>需要的一些插件<br><code>npm i rollup rollup-plugin-node-resolve rollup-plugin-babel babel-core babel-plugin-external-helpers babel-preset-latest --save-dev</code></li><li>配置 .babelrc</li><li>配置 rollup.config.js</li></ul><blockquote><p>rollup 功能单一（打包js模块化）， webpack功能强大<br>工具尽量功能单一，可继承，可扩展</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>:[</span><br><span class="line">    [<span class="string">"latest"</span>, &#123;</span><br><span class="line">      <span class="string">"es2015"</span>:&#123;</span><br><span class="line">        <span class="string">"modules"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>:[<span class="string">"external-helpers"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">'rollup-plugin-babel'</span>;</span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  entry: <span class="string">'src/index.js'</span>,</span><br><span class="line">  format: <span class="string">'umd'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    resolve(),</span><br><span class="line">    babel(&#123;</span><br><span class="line">      exclude: <span class="string">'node_modules/**'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  dest: <span class="string">'build/bundle.js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">...</span><br><span class="line"><span class="string">"scripts"</span>:&#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"rollup -c rollup.config.js"</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>npm run start</code></p><h4 id="关于JS众多模块化标准"><a href="#关于JS众多模块化标准" class="headerlink" title="关于JS众多模块化标准"></a>关于JS众多模块化标准</h4><ul><li>没有模块化</li><li>AMD成为标准，require.js</li><li>前端打包工具，使得nodejs模块化（CommonJS）可以被使用</li><li>ES6出现，想统一现在所有模块化标准</li><li>nodejs积极支持，浏览器尚未统一</li><li>你可以自造lib，但是不要自造标准！！！</li></ul><h3 id="Class和普通构造函数有何区别"><a href="#Class和普通构造函数有何区别" class="headerlink" title="Class和普通构造函数有何区别"></a>Class和普通构造函数有何区别</h3><h4 id="JS构造函数"><a href="#JS构造函数" class="headerlink" title="JS构造函数"></a>JS构造函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MathHandle</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型扩展</span></span><br><span class="line">MathHandle.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> ManthHandle(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m.add()); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="Class基本语法"><a href="#Class基本语法" class="headerlink" title="Class基本语法"></a>Class基本语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MathHandle</span> </span>&#123; <span class="comment">// 直接跟大括号</span></span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  add() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> ManthHandle(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m.add()); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h4><blockquote><p><code>typeof MathHandle</code>  = <code>&#39;function&#39;</code><br><code>MathHandle</code>其实是个<code>function</code>,‘构造函数’<br><code>MathHandle</code> === <code>MathHandle.prototype.constructor</code></p></blockquote><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="原生js继承"><a href="#原生js继承" class="headerlink" title="原生js继承"></a>原生js继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动物</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'animal eat'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 狗</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bark = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'dog bark'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绑定原型，实现继承</span></span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line"><span class="comment">// 实例化一只狗</span></span><br><span class="line"><span class="keyword">var</span> hashiqi = <span class="keyword">new</span> Dog();</span><br><span class="line"></span><br><span class="line"><span class="comment">// hashiqi就有了eat方法</span></span><br><span class="line">hashiqi.eat(); <span class="comment">// animal eat</span></span><br></pre></td></tr></table></figure><blockquote><p>廖雪峰老师的原型继承：<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000" target="_blank" rel="noopener">点这里</a></p></blockquote><h4 id="ES6继承"><a href="#ES6继承" class="headerlink" title="ES6继承"></a>ES6继承</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> eat`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; <span class="comment">// extends 继承</span></span><br><span class="line">  <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">    <span class="keyword">super</span>(name); <span class="comment">// 必须*  记得用super调用父类的构造方法!</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  say() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> say`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">'hashiqi'</span>);</span><br><span class="line">dog.eat(); <span class="comment">// hashiqi eat</span></span><br></pre></td></tr></table></figure><h3 id="Promise-的基础使用"><a href="#Promise-的基础使用" class="headerlink" title="Promise 的基础使用"></a>Promise 的基础使用</h3><blockquote><p>解决回调地狱（Callback Hell）<br>详细点的Promise：<a href="https://finget.github.io/2018/03/08/promise/" target="_blank" rel="noopener">点这里</a></p></blockquote><h4 id="Promise-基础语法"><a href="#Promise-基础语法" class="headerlink" title="Promise 基础语法"></a>Promise 基础语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 一段耗时很长的异步操作</span></span><br><span class="line">.....</span><br><span class="line">  resolve(); <span class="comment">// 数据处理完成</span></span><br><span class="line">  reject(); <span class="comment">// 数据处理出错</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 成功，下一步</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 失败，做相应处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>我最开始接触到<code>Promise</code>的时候，一直傻了吧唧的在想<code>resolve()</code>和<code>reject()</code>在什么时候调用。<br><code>resolve()</code>和<code>reject()</code>就是为后面<code>then()</code>中的两个函数服务的。</p></blockquote><h4 id="resolve和reject"><a href="#resolve和reject" class="headerlink" title="resolve和reject"></a>resolve和reject</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    resolve(<span class="string">'good，我要传给then里的一个函数'</span>);</span><br><span class="line">  &#125;,<span class="number">2000</span>);</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    reject(<span class="string">'错了，把我给我then里的第二个函数'</span>);</span><br><span class="line">  &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// good，我要传给then里的一个函数</span></span><br><span class="line">&#125;,value =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// 错了，把我给我then里的第二个函数</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="来个实际的例子"><a href="#来个实际的例子" class="headerlink" title="来个实际的例子"></a>来个实际的例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于jquery封装一个promise ajax请求</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; param [选项]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;       [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">request(param)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      type : param.type || <span class="string">'get'</span>,</span><br><span class="line">      url : param.url || <span class="string">''</span>,</span><br><span class="line">      dataType : param.dataType || <span class="string">'json'</span>,</span><br><span class="line">      data : param.data || <span class="literal">null</span>,</span><br><span class="line">      success:<span class="function">(<span class="params">res</span>)=&gt;</span>&#123; <span class="comment">// 用箭头函数避免this指向问题</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> === res.status) &#123;</span><br><span class="line">       <span class="keyword">typeof</span> resolve === <span class="string">'function'</span>&amp;&amp;resolve(res.data, res.msg); <span class="comment">// 成功就把请求到的数据用resolve返回，这样就可以在then的第一个函数里拿到值了</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">typeof</span> reject === <span class="string">'function'</span>&amp;&amp;reject(res.msg || res.data); <span class="comment">// 失败就返回错误信息</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      error:<span class="function">(<span class="params">err</span>)=&gt;</span>&#123; <span class="comment">// 这个失败是请求失败，上面那个失败是请求成功发送了，但是没有拿到数据失败了</span></span><br><span class="line">     <span class="keyword">typeof</span> reject === <span class="string">'function'</span>&amp;&amp;reject(err.statusText);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ES6常用其他功能"><a href="#ES6常用其他功能" class="headerlink" title="ES6常用其他功能"></a>ES6常用其他功能</h3><h4 id="let-const"><a href="#let-const" class="headerlink" title="let/const"></a>let/const</h4><blockquote><p><code>let</code> <code>const</code>与<code>var</code>都是用来定义变量的，不同的是<code>let</code>自带作用域，<code>const</code>不能重复赋值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'FinGet'</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">'GetFin'</span></span><br><span class="line">    <span class="built_in">console</span>.log(name)  <span class="comment">//GetFin</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(name)  <span class="comment">//FinGet</span></span><br></pre></td></tr></table></figure><blockquote><p><code>let</code>定义的变量只在包含它的代码块内有用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line">PI = <span class="number">3.14</span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><h4 id="多行字符串-模板变量"><a href="#多行字符串-模板变量" class="headerlink" title="多行字符串/模板变量"></a>多行字符串/模板变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'FinGet'</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">22</span>;</span><br><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'我是'</span>+ name+<span class="string">',今年'</span>+age+<span class="string">'岁'</span>; <span class="comment">// 很麻烦</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">`我是<span class="subst">$&#123;name&#125;</span>,今年<span class="subst">$&#123;age&#125;</span>岁`</span>; <span class="comment">// 简单多了</span></span><br></pre></td></tr></table></figure><blockquote><p>模板字符串就是用<code></code>（Tab键上面那个）包含，变量就是用<code>${}</code>表示</p></blockquote><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'FinGet'</span>,</span><br><span class="line">  age: <span class="number">22</span>,</span><br><span class="line">  job: <span class="string">'前端'</span>,</span><br><span class="line">  addr: <span class="string">'成都'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// FinGet</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 22</span></span><br></pre></td></tr></table></figure><p>还可以反过来：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  name = <span class="string">'FinGet'</span>;</span><br><span class="line"><span class="keyword">let</span>  age = <span class="number">22</span>;</span><br><span class="line"><span class="keyword">let</span>  job = <span class="string">'前端'</span>;</span><br><span class="line"><span class="keyword">let</span>  addr = <span class="string">'成都'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;name,age,job,addr&#125;;</span><br><span class="line"><span class="comment">//obj = &#123;name: 'FinGet',age: 22,job: '前端',addr: '成都'&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><p>另外一个<code>var</code>带来的不合理场景就是用来计数的循环变量泄露为全局变量，看下面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></p><blockquote><p>let 自带块级作用域</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>原生js想实现这种效果，需要用到闭包：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123; <span class="comment">// 立即执行函数</span></span><br><span class="line">    a[j] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(j);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;(i))</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><blockquote><p>立即执行函数形成了一个块级作用域，将参数j保存了下来，并不会被‘污染’，原生js没有块级作用域，<code>var</code>在<code>for</code>中定义的变量是个全局变量，可以在外部访问，也就可以被改变，所以每次<code>for</code>循环都是重置修改<code>i</code>的值，导致最后只能输出10。</p></blockquote><h4 id="函数默认参数与rest"><a href="#函数默认参数与rest" class="headerlink" title="函数默认参数与rest"></a>函数默认参数与rest</h4><blockquote><p><code>default</code>很简单，意思就是默认值。大家可以看下面的例子，调用animal()方法时忘了传参数，传统的做法就是加上这一句<code>type = type || &#39;cat&#39;</code>来指定默认值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">    type = type || <span class="string">'cat'</span>  </span><br><span class="line">    <span class="built_in">console</span>.log(type)</span><br><span class="line">&#125;</span><br><span class="line">animal()</span><br></pre></td></tr></table></figure><p>如果用ES6我们而已直接这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">type = <span class="string">'cat'</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(type)</span><br><span class="line">&#125;</span><br><span class="line">animal(); <span class="comment">// cat</span></span><br></pre></td></tr></table></figure><p>最后一个rest语法也很简单，直接看例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animals</span>(<span class="params">...types</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(types)</span><br><span class="line">&#125;</span><br><span class="line">animals(<span class="string">'cat'</span>, <span class="string">'dog'</span>, <span class="string">'fish'</span>) <span class="comment">//["cat", "dog", "fish"]</span></span><br></pre></td></tr></table></figure><blockquote><p>而如果不用ES6的话，我们则得使用ES5的arguments。</p></blockquote><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6箭头函数</span></span><br><span class="line">(a,b) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>把<code>function</code>去掉，在<code>()</code>与<code>{}</code>之间加上<code>=&gt;</code></p></blockquote><hr><blockquote><p>当我们使用箭头函数时，函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。<br>并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的<code>this</code>，它的<code>this</code>是继承外面的，因此内部的<code>this</code>就是外层代码块的<code>this</code>。</p></blockquote><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      JavaScript从初级往高级走系列，一次学习记录吧，一直在路上
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>在线考试系统（vue2 + elementui + express4 + MongoDB）</title>
    <link href="http://yoursite.com/2018/05/05/exam/"/>
    <id>http://yoursite.com/2018/05/05/exam/</id>
    <published>2018-05-05T07:05:55.000Z</published>
    <updated>2019-05-05T08:13:43.819Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是我毕业项目，从0到1，前后台独立开发完成。功能不多，在此记录,温故而知新！项目github地址:<a href="https://github.com/FinGet/Exam" target="_blank" rel="noopener">https://github.com/FinGet/Exam</a> ，博客地址：<a href="https://finget.github.io/" target="_blank" rel="noopener">https://finget.github.io/</a>。</p></blockquote><hr><blockquote><p>更新记录：2018-4-9，md5加密</p></blockquote><h2 id="win10安装mongodb"><a href="#win10安装mongodb" class="headerlink" title="win10安装mongodb"></a>win10安装mongodb</h2><p>window下安装mongodb，需要参考的可以移步我的博客中：<a href="https://finget.github.io/2018/05/05/win-mongodb/" target="_blank" rel="noopener">win10安装mongodb</a></p><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><p>本次项目使用的是express4 + vue2+ + elementUI1+ + mongodb3.4+</p><p>先看项目文件目录结构：</p><p><img src="https://i.imgur.com/RV9862f.png" alt></p><blockquote><p>我页面用的vue所以<code>server/views</code>和<code>server/public</code>都没有用</p></blockquote><ul><li>项目建立用的是vue-cli:<br><code>vue init webpack exam</code></li><li>项目中前后台是写在一个项目中的：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i -g express-generator</span><br><span class="line"><span class="comment">// 在项目文件根目录下</span></span><br><span class="line">express server</span><br></pre></td></tr></table></figure></li></ul><p>由于前后台都是写在一个项目中的，我就将<code>server</code>下的<code>package.json</code>和<code>vue</code>下的<code>package.json</code>合并了</p><p><img src="https://i.imgur.com/a5uBeQh.png" alt></p><h3 id="安装一些插件"><a href="#安装一些插件" class="headerlink" title="安装一些插件"></a>安装一些插件</h3><h4 id="axios-请求数据"><a href="#axios-请求数据" class="headerlink" title="axios 请求数据"></a>axios 请求数据</h4><p><code>npm i axios --save</code><br>首先axios不支持vue.use()式声明<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在main.js中如下声明使用</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line">Vue.prototype.$axios=axios;</span><br><span class="line"><span class="comment">// 那么在其他vue组件中就可以this.$axios调用使用</span></span><br></pre></td></tr></table></figure></p><h4 id="elementUI"><a href="#elementUI" class="headerlink" title="elementUI"></a>elementUI</h4><p><code>npm i element-ui --save</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span> <span class="comment">// 加载ElementUI</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-default/index.css'</span></span><br><span class="line">Vue.use(ElementUI) <span class="comment">// 全局使用elementUI</span></span><br></pre></td></tr></table></figure></p><h4 id="vue-lazyload-图片懒加载"><a href="#vue-lazyload-图片懒加载" class="headerlink" title="vue-lazyload 图片懒加载"></a>vue-lazyload 图片懒加载</h4><p><code>npm i vue-lazyload --save</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> VueLazyLoad <span class="keyword">from</span> <span class="string">'vue-lazyload'</span></span><br><span class="line">Vue.use(VueLazyLoad, &#123; <span class="comment">// 全局使用图片懒加载</span></span><br><span class="line">  loading: <span class="string">'static/loading-svg/loading-bars.svg'</span>, <span class="comment">// 图片还没加载时的svg图片</span></span><br><span class="line">  <span class="keyword">try</span>: <span class="number">1</span> <span class="comment">// default 1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>使用懒加载：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img width=<span class="string">"300"</span> height=<span class="string">"53"</span> v-lazy=<span class="string">"logoSrc"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">logoSrc:<span class="built_in">require</span>(<span class="string">'../common/img/logo.png'</span>)</span><br><span class="line"><span class="comment">// 不能写成：&lt;img width="300" height="53" v-lazy="../common/img/logo.png" alt=""&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="mongoose-操作mongodb的"><a href="#mongoose-操作mongodb的" class="headerlink" title="mongoose 操作mongodb的"></a>mongoose 操作mongodb的</h4><p><code>npm i mongoose --save</code></p><blockquote><p>就不一一列举所有的插件了（没有用vuex）</p></blockquote><h2 id="开发上的一些事"><a href="#开发上的一些事" class="headerlink" title="开发上的一些事"></a>开发上的一些事</h2><h3 id="前台相关"><a href="#前台相关" class="headerlink" title="前台相关"></a>前台相关</h3><h4 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// commonFun.js</span></span><br><span class="line"><span class="comment">//获取sessionStorage</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSessionStorage</span>(<span class="params">key, format</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data;</span><br><span class="line">  <span class="keyword">if</span> (sessionStorage.getItem(key)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (format == <span class="string">'json'</span>) &#123;</span><br><span class="line">      data = <span class="built_in">JSON</span>.parse(sessionStorage.getItem(key));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      data = sessionStorage.getItem(key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    data = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写入sessionStorage</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSessionStorage</span>(<span class="params">key, content, format</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data;</span><br><span class="line">  <span class="keyword">if</span> (format == <span class="string">'json'</span>) &#123;</span><br><span class="line">    data = <span class="built_in">JSON</span>.stringify(content);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    data = content;</span><br><span class="line">  &#125;</span><br><span class="line">  sessionStorage.setItem(key, data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> mySessionStorage = &#123;</span><br><span class="line">  <span class="keyword">get</span>: getSessionStorage,</span><br><span class="line">  <span class="keyword">set</span>: setSessionStorage</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局挂载<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> commonFun <span class="keyword">from</span> <span class="string">'./common/js/commonFun.js'</span></span><br><span class="line">Vue.prototype.$mySessionStorage = commonFun.mySessionStorage;</span><br></pre></td></tr></table></figure></p><p>在页面中使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$mySessionStorage.set(key,content,format);</span><br><span class="line"><span class="keyword">this</span>.$mySessionStorage.get(key);</span><br></pre></td></tr></table></figure></p><h4 id="登录检测"><a href="#登录检测" class="headerlink" title="登录检测"></a>登录检测</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="comment">// 登录判断</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> userdata = getUserData();</span><br><span class="line">  <span class="keyword">if</span> (to.path != <span class="string">'/managelogin'</span>&amp;&amp;to.name!=<span class="string">'404'</span>&amp;&amp;to.path != <span class="string">'/'</span>&amp;&amp;to.path != <span class="string">"/frontregister"</span>&amp;&amp;to.path!=<span class="string">'/manageregister'</span>) &#123;  <span class="comment">// 判断是否登录</span></span><br><span class="line">    <span class="keyword">if</span>(!userdata.userName)&#123;</span><br><span class="line">      ElementUI.Message.error(<span class="string">'抱歉，您还没有登录！'</span>);</span><br><span class="line">      <span class="keyword">if</span>(to.path.indexOf(<span class="string">'front'</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        router.push(&#123;<span class="attr">path</span>:<span class="string">'/'</span>&#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        router.push(&#123;<span class="attr">path</span>:<span class="string">'/managelogin'</span>&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="面包屑导航"><a href="#面包屑导航" class="headerlink" title="面包屑导航"></a>面包屑导航</h4><blockquote><p>绑定面包屑要根据实际情况来定，但是<code>this.$router.currentRoute.matched</code>是最主要的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"bread"</span>&gt;</span><br><span class="line">    &lt;el-breadcrumb separator=<span class="string">"/"</span>&gt;</span><br><span class="line">      &lt;el-breadcrumb-item v-<span class="keyword">for</span>=<span class="string">"(item, index) in breadData"</span> :key=<span class="string">"item.id"</span> :to=<span class="string">"&#123; name: item.meta.breadName=='管理系统'?'Index':item.name &#125;"</span>&gt;&#123;&#123;item.meta.breadName&#125;&#125;&lt;<span class="regexp">/el-breadcrumb-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>el-breadcrumb&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/ecmascript-6"</span>&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        breadData:[]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      $route () &#123;</span><br><span class="line">        <span class="keyword">this</span>.initBreadData();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      <span class="comment">//面包屑</span></span><br><span class="line">      initBreadData()&#123;</span><br><span class="line">        <span class="keyword">this</span>.breadData=<span class="keyword">this</span>.$router.currentRoute.matched;</span><br><span class="line">        <span class="comment">// console.log(this.breadData)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()&#123;</span><br><span class="line">      <span class="keyword">this</span>.initBreadData();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>路由部分：</p><p><img src="https://i.imgur.com/pagOWnL.png" alt></p><h4 id="elementui面包屑导航与左侧导航相对应"><a href="#elementui面包屑导航与左侧导航相对应" class="headerlink" title="elementui面包屑导航与左侧导航相对应"></a>elementui面包屑导航与左侧导航相对应</h4><blockquote><p>根据实际情况来，不能套用，要看你的路由怎么写的 <code>this.$router.currentRoute.path</code><br><code>:default-active=&quot;activeIndex&quot;</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// conponents/sidebar.vue</span></span><br><span class="line"><span class="comment">//初始化列表active状态</span></span><br><span class="line">...</span><br><span class="line">methods:&#123;</span><br><span class="line">  initActiveIndex()&#123;</span><br><span class="line">    <span class="comment">// var str =this.$router.currentRoute.path;</span></span><br><span class="line">    <span class="keyword">this</span>.activeIndex=<span class="keyword">this</span>.$router.currentRoute.path;</span><br><span class="line">    <span class="comment">// console.log(str)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">  <span class="string">'$route'</span>:<span class="string">'initActiveIndex'</span></span><br><span class="line">&#125;,</span><br><span class="line">created()&#123;</span><br><span class="line">  <span class="keyword">this</span>.initActiveIndex();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h4><p>要想请求到后台数据，这一步是必须的<br>配置代理之后，localhost:8088/api/<em> -&gt; localhost:3000/api/</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">config/index.js</span><br><span class="line">proxyTable: &#123;</span><br><span class="line">  // proxy all requests starting with /api to jsonplaceholder</span><br><span class="line">  &apos;/api&apos;: &#123;</span><br><span class="line">    target: &apos;http://127.0.0.1:3000/api&apos;, // 端口号根据后台设置来，默认是3000</span><br><span class="line">    changeOrigin: true,</span><br><span class="line">    pathRewrite: &#123;</span><br><span class="line">      &apos;^/api&apos;: &apos;&apos;  // 若target中没有/api、这里又为空，则404；</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h4 id="ElementUi动态增加表单的表单验证-大坑"><a href="#ElementUi动态增加表单的表单验证-大坑" class="headerlink" title="ElementUi动态增加表单的表单验证 大坑"></a>ElementUi动态增加表单的表单验证 大坑</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div  v-<span class="keyword">if</span>=<span class="string">"dialogForm.type!='judgement'&amp;&amp;dialogForm.type!='Q&amp;A'"</span>&gt;</span><br><span class="line">    &lt;el-form-item v-<span class="keyword">for</span>=<span class="string">"(item,index) in dialogForm.surveyQuestionOptionList"</span></span><br><span class="line">    :key=<span class="string">"item.key"</span></span><br><span class="line">    :label=<span class="string">"'选项'+(index+1) +'：'"</span></span><br><span class="line">    :prop=<span class="string">"'surveyQuestionOptionList.' + index + '.optionContent'"</span></span><br><span class="line">    :rules=<span class="string">"&#123;</span></span><br><span class="line"><span class="string">      required:true, message:'选项不能为空', trigger:'blur'</span></span><br><span class="line"><span class="string">    &#125;"</span></span><br><span class="line">    &gt;</span><br><span class="line">    <span class="comment">// 最重要的是prop 一定要带上`.optionContent`，也就是你绑定值的key</span></span><br><span class="line">      &lt;el-input placeholder=<span class="string">"请输入选项"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"dialog_input"</span> v-model=<span class="string">"item.optionContent"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"el-icon-delete delete-icon"</span> @<span class="attr">click</span>=<span class="string">"deleteDlalogOption(index)"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">    &lt;el-button type="primary" size="small" class="marginB10" @click="addDialogOption"&gt;添加选项&lt;/el-button&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="query要用path来引入，params要用name来引入"><a href="#query要用path来引入，params要用name来引入" class="headerlink" title="query要用path来引入，params要用name来引入"></a>query要用path来引入，params要用name来引入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">goToExam(id)&#123;</span><br><span class="line"><span class="comment">// params传参只能用name引入</span></span><br><span class="line">  <span class="keyword">this</span>.$router.push(&#123;<span class="attr">name</span>:<span class="string">'ForntExam'</span>,<span class="attr">params</span>:&#123;<span class="attr">id</span>:id&#125;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Elementui-单选框对上单选题"><a href="#Elementui-单选框对上单选题" class="headerlink" title="Elementui 单选框对上单选题"></a>Elementui 单选框对上单选题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"single"</span>&gt;</span><br><span class="line">    &lt;h4&gt;单选题（只有一个正确答案）&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li class="marginB10" v-for="(item,index) in singleQuestions" :key="item.id"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p class="question-title"&gt;&#123;&#123;index+1&#125;&#125; 、&#123;&#123;item.name&#125;&#125;（）&lt;/</span>p&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"option"</span></span><br><span class="line">              v-<span class="keyword">if</span>=<span class="string">"item.type!='judgement'&amp;&amp;item.type!='Q&amp;A'"</span>item</span><br><span class="line">              v-<span class="keyword">for</span>=<span class="string">"(item1,index1) in item.selection"</span> :key=<span class="string">"item1.id"</span>&gt;</span><br><span class="line">          &lt;el-radio v-model=<span class="string">"item.sanswer"</span> :label=<span class="string">"options[index1]"</span> :key=<span class="string">"index1"</span>&gt;&#123;&#123;options[index1]&#125;&#125;、&#123;&#123;item1&#125;&#125;&lt;<span class="regexp">/el-radio&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>span&gt;</span><br><span class="line">      &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">init()&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.id == <span class="string">''</span> || !<span class="keyword">this</span>.id )&#123;</span><br><span class="line">    <span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">'forntexamindex'</span>&#125;);</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$axios.get(<span class="string">'/api/getExamInfo'</span>,&#123;</span><br><span class="line">      params:&#123;</span><br><span class="line">        id: <span class="keyword">this</span>.id</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> res = response.data;</span><br><span class="line">      <span class="keyword">if</span>(res.status == <span class="string">'0'</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> <span class="keyword">this</span>.paperData) &#123;</span><br><span class="line">          <span class="keyword">this</span>.paperData[key] = res.result[key];</span><br><span class="line">        &#125;</span><br><span class="line">        res.result._questions.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(item.type==<span class="string">'single'</span>)&#123;</span><br><span class="line">            item.sanswer = <span class="string">''</span>; <span class="comment">// 重要的在这 给他新增一个属性，用来存答案</span></span><br><span class="line">            <span class="keyword">this</span>.singleQuestions.push(item);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span>(item.type == <span class="string">'multi'</span>)&#123;</span><br><span class="line">            item.sanswer = []; <span class="comment">// 多选题</span></span><br><span class="line">            <span class="keyword">this</span>.multiQuestions.push(item);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span>(item.type == <span class="string">'Q&amp;A'</span>) &#123;</span><br><span class="line">            item.sanswer = <span class="string">''</span>; </span><br><span class="line">            <span class="keyword">this</span>.QAQuestions.push(item);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span>(item.type == <span class="string">'judgement'</span>)&#123;</span><br><span class="line">            item.sanswer = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">this</span>.judgeQuestions.push(item);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$message.error(err);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后台相关"><a href="#后台相关" class="headerlink" title="后台相关"></a>后台相关</h3><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p>在server根目录下新建<code>db.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.js</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> dbUrl = <span class="string">'mongodb://127.0.0.1:27017/examSystem'</span>;</span><br><span class="line"><span class="keyword">var</span> db = mongoose.connect(dbUrl);</span><br><span class="line">db.connection.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'数据库链接失败：'</span>+ error);</span><br><span class="line">&#125;);</span><br><span class="line">db.connection.on(<span class="string">'connected'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'数据库链接成功!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">db.connection.on(<span class="string">'disconnected'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Mongoose connection disconnected'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = db;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server/app.js</span></span><br><span class="line"><span class="comment">// 链接数据库</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./db'</span>);</span><br></pre></td></tr></table></figure><h4 id="配置seesion"><a href="#配置seesion" class="headerlink" title="配置seesion"></a>配置seesion</h4><p>需要<code>express-session</code> 和 <code>cookie-parser</code>插件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="comment">// 加载解析session的中间件</span></span><br><span class="line"><span class="comment">// session 的 store 有四个常用选项：1）内存 2）cookie 3）缓存 4）数据库</span></span><br><span class="line"><span class="comment">// 数据库 session。除非你很熟悉这一块，知道自己要什么，否则还是老老实实用缓存吧 需要用到（connect-mongo插件 line 7）</span></span><br><span class="line"><span class="comment">// app.use(sessionParser(&#123; 会在数据库中新建一个session集合存储session</span></span><br><span class="line"><span class="comment">// secret: 'express',</span></span><br><span class="line"><span class="comment">// store: new mongoStore(&#123;</span></span><br><span class="line"><span class="comment">// url:'mongodb://127.0.0.1:27017/examSystem',</span></span><br><span class="line"><span class="comment">// collection:'session'</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// &#125;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认使用内存来存 session，对于开发调试来说很方便</span></span><br><span class="line">app.use(sessionParser(&#123;</span><br><span class="line">  secret: <span class="string">'12345'</span>, <span class="comment">// 建议使用 128 个字符的随机字符串</span></span><br><span class="line">  name: <span class="string">'userInfo'</span>,</span><br><span class="line">  cookie: &#123; <span class="attr">maxAge</span>: <span class="number">1800000</span> &#125;, <span class="comment">// 时间可以长点</span></span><br><span class="line">  resave:<span class="literal">true</span>,</span><br><span class="line">  rolling:<span class="literal">true</span>,</span><br><span class="line">  saveUninitialized:<span class="literal">false</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><h4 id="配置后台路由"><a href="#配置后台路由" class="headerlink" title="配置后台路由"></a>配置后台路由</h4><p>默认的使用方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// appi.js</span></span><br><span class="line"><span class="keyword">var</span> index = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line">app.use(<span class="string">'/'</span>, index);</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/index</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">   res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Express'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>我之前做的一个电子商城采用的这种方式：<a href="https://github.com/FinGet/Node-vue-mongodb" target="_blank" rel="noopener">github地址</a></p><p>我的项目中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">var</span> indexs = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line"><span class="keyword">var</span> routes = <span class="built_in">require</span>(<span class="string">'./routes/routes'</span>);</span><br><span class="line"></span><br><span class="line">indexs(app);</span><br><span class="line">routes(app);</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes/index.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.get(<span class="string">'/api'</span>, (req, res) =&gt; &#123;</span><br><span class="line">res.render(<span class="string">'index'</span>, &#123;<span class="attr">title</span>: <span class="string">'Express'</span>&#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种方式有什么不同：</p><ul><li>如果你有多个路由文件 （例如<code>goods.js</code>,<code>index.js</code>,<code>users.js</code>……）,你都需要去app.js中引入</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">var</span> index = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line"><span class="keyword">var</span> users = <span class="built_in">require</span>(<span class="string">'./routes/users'</span>);</span><br><span class="line"><span class="keyword">var</span> goods = <span class="built_in">require</span>(<span class="string">'./routes/goods'</span>);</span><br><span class="line">app.use(<span class="string">'/'</span>, index);</span><br><span class="line">app.use(<span class="string">'/users'</span>, users);</span><br><span class="line">app.use(<span class="string">'/goods'</span>, goods);</span><br></pre></td></tr></table></figure><p>在前台请求的时候：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// goods.js</span></span><br><span class="line">....</span><br><span class="line">router.get(<span class="string">"/list"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xxx.vue</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">this</span>.$axios.get(<span class="string">'/goods/list'</span>).then()... <span class="comment">// 不能忘了加上goods，也就是你在app.js中定义的一级路由</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>如果没看懂，可以去<a href="https://github.com/FinGet/Node-vue-mongodb" target="_blank" rel="noopener">GitHub</a>上看一下实际代码，有助于理解</p></blockquote><ul><li>第二种方式<br>不用在app.js中引入各个路由文件，一个<code>route.js</code>就搞定了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// route.js</span></span><br><span class="line"><span class="keyword">var</span> Teacher = <span class="built_in">require</span>(<span class="string">'../controllers/teacher'</span>),</span><br><span class="line">    Student = <span class="built_in">require</span>(<span class="string">'../controllers/student'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*----------------------教师用户----------------------*/</span></span><br><span class="line">  app.post(<span class="string">'/api/register'</span>,Teacher.register);</span><br><span class="line">  <span class="comment">// 用户登录</span></span><br><span class="line">  app.post(<span class="string">'/api/login'</span>, Teacher.signup);</span><br><span class="line">  <span class="comment">// 登出</span></span><br><span class="line">  app.post(<span class="string">"/api/logout"</span>, Teacher.signout);</span><br><span class="line">  <span class="comment">// 获取用户信息</span></span><br><span class="line">  app.post(<span class="string">'/api/getUserInfo'</span>,Teacher.getUserInfo);</span><br><span class="line">  <span class="comment">// 修改用户信息</span></span><br><span class="line">  app.post(<span class="string">'/api/updateUser'</span>, Teacher.updateUser);</span><br><span class="line">  <span class="comment">// 获取试卷(分页、模糊查询)</span></span><br><span class="line">  app.get(<span class="string">'/api/mypapers'</span>, Teacher.getPapers);</span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*----------------------学生用户----------------------*/</span></span><br><span class="line">  <span class="comment">// 学生注册</span></span><br><span class="line">  app.post(<span class="string">'/api/studentregister'</span>,Student.register);</span><br><span class="line">  <span class="comment">// 学生登录</span></span><br><span class="line">  app.post(<span class="string">'/api/studentlogin'</span>, Student.signup);</span><br><span class="line">  ....</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我将每个路由的方法都是提取出去的，这样可以避免这个文件不会有太多的代码，可读性降低，将代码分离开来，也有助于维护</p><p><img src="https://i.imgur.com/19bvKRe.png" alt></p><p>在使用的时候：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// xxx.vue</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">this</span>.$axios.get(<span class="string">'/api/getexamlogs'</span>).then()... </span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="数据库的相关操作"><a href="#数据库的相关操作" class="headerlink" title="数据库的相关操作"></a>数据库的相关操作</h4><p>我这次用mongodb，主要是因为可以用js来操作，对我来说比较简单，mysql我不会用。在实际开发过程中发现，考试系统各个表（集合）都是需要关联，mongodb这种非关系型数据库，做起来反而麻烦了不少。在此将一些数据库增删改查的方法回顾一下。</p><h5 id="初始化一条数据"><a href="#初始化一条数据" class="headerlink" title="初始化一条数据"></a>初始化一条数据</h5><blockquote><p>如果对mongodb，mongoose没有基础的了解，建议看一看<a href="https://www.villainhr.com/page/2016/05/11/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAmongoose" target="_blank" rel="noopener">mongoose深入浅出</a> ，<a href="https://segmentfault.com/a/1190000014736907" target="_blank" rel="noopener">mongoose基础操作</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controllers/student.js</span></span><br><span class="line"><span class="keyword">const</span> Student = <span class="built_in">require</span>(<span class="string">'../model/student'</span>);</span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(&#123;</span><br><span class="line">    userId: <span class="number">12001</span>, <span class="comment">// 学号</span></span><br><span class="line">    userName: <span class="string">'张三'</span>, <span class="comment">// 用户名</span></span><br><span class="line">    passWord: <span class="string">'123321'</span>, <span class="comment">// 密码</span></span><br><span class="line">    grade: <span class="number">3</span>, <span class="comment">// 年级 1~6 分别代表一年级到六年级</span></span><br><span class="line">    class: 3, // 班级</span><br><span class="line">    exams:[&#123; <span class="comment">// 参加的考试</span></span><br><span class="line">      _paper:Schema.Types.ObjectId(<span class="string">"5a40a4ef485a584d44764ff1"</span>), <span class="comment">// 这个是_id，在mongodb自动生成的，从数据库复制过来，初始化一个学生，应该是没有参加考试的</span></span><br><span class="line">      score:<span class="number">100</span>,</span><br><span class="line">      date: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">      answers: []</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 保存</span></span><br><span class="line">student.save(<span class="function">(<span class="params">err,doc</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="用户注册，其实就是创建一条数据"><a href="#用户注册，其实就是创建一条数据" class="headerlink" title="用户注册，其实就是创建一条数据"></a>用户注册，其实就是创建一条数据</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">exports.register = <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> userInfo = req.body.userInfo; <span class="comment">// req.body 获取post方式传递的参数</span></span><br><span class="line">  Student.findOne(userInfo,(err,doc) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">      ...</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(doc) &#123;</span><br><span class="line">         res.json(&#123;</span><br><span class="line">           status:<span class="string">'2'</span>,</span><br><span class="line">           msg: <span class="string">'用户已存在'</span></span><br><span class="line">         &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          userInfo.exams = [];</span><br><span class="line">          <span class="comment">// userInfo 是个对象，包含了用户相关的信息</span></span><br><span class="line">          Student.create(userInfo,(err1,doc1) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span>(err1) &#123;</span><br><span class="line">            ...</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(doc1) &#123;</span><br><span class="line">              ...</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             ...</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h5 id="获取考试记录-子文档数组分页模糊查询"><a href="#获取考试记录-子文档数组分页模糊查询" class="headerlink" title="获取考试记录,子文档数组分页模糊查询"></a>获取考试记录,子文档数组分页模糊查询</h5><p>如下图是我的<code>student</code>集合:</p><p><img src="https://i.imgur.com/sjKcFYU.png" alt><br>在该集合中，学生参加过的考试记录，存在<code>exams</code>数组中，当想实现分页查询几条数据的时候，需要用到<code>$slice</code></p><blockquote><p><code>$slice:[start,size]</code>  第一个参数表示，数组开始的下标，第二个表示截取的数量<br>在后台接收到前台传递的<code>pageSize</code>和<code>pageNumber</code>时，需要计算出当前需要截取的下标，即<code>let  skip = (pageNumber-1)*pageSize</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">exports.getExamLogs = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> userName =req.session.userName;</span><br><span class="line">  <span class="keyword">let</span> name = req.param(<span class="string">'name'</span>);</span><br><span class="line">    <span class="comment">// 通过req.param()取到的值都是字符串，而limit()需要一个数字作为参数</span></span><br><span class="line">  <span class="keyword">let</span>  pageSize = <span class="built_in">parseInt</span>(req.param(<span class="string">'pageSize'</span>));</span><br><span class="line">  <span class="keyword">let</span>  pageNumber = <span class="built_in">parseInt</span>(req.param(<span class="string">'pageNumber'</span>));</span><br><span class="line">  <span class="keyword">let</span>  skip = (pageNumber<span class="number">-1</span>)*pageSize; <span class="comment">// 跳过几条</span></span><br><span class="line">  <span class="keyword">let</span>  reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(name,<span class="string">'i'</span>); <span class="comment">// 在nodejs中，必须要使用RegExp，来构建正则表达式对象。</span></span><br><span class="line">  Student.findOne(&#123;<span class="string">"userName"</span>:userName&#125;,&#123;<span class="string">"exams"</span>:&#123;<span class="attr">$slice</span>:[skip,pageSize]&#125;&#125;).populate(&#123;<span class="attr">path</span>:<span class="string">'exams._paper'</span>,<span class="attr">match</span>:&#123;<span class="attr">name</span>: reg&#125;&#125;)</span><br><span class="line">    .exec(<span class="function">(<span class="params">err,doc</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (doc) &#123;</span><br><span class="line">          res.json(&#123;</span><br><span class="line">            status: <span class="string">'0'</span>,</span><br><span class="line">            msg:<span class="string">'success'</span>,</span><br><span class="line">            result:doc,</span><br><span class="line">            count: doc.exams.length?doc.exams.length:<span class="number">0</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="另一种分页模糊查询–在文档之间（document）"><a href="#另一种分页模糊查询–在文档之间（document）" class="headerlink" title="另一种分页模糊查询–在文档之间（document）"></a>另一种分页模糊查询–在文档之间（document）</h5><p><img src="https://i.imgur.com/je9ierB.png" alt></p><blockquote><p>每个试卷都是独立的文档，通过他们的名称<code>name</code>实现模糊查询</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取考试信息</span></span><br><span class="line">exports.getExams = <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> userName =req.session.userName;</span><br><span class="line">  <span class="keyword">let</span> name = req.param(<span class="string">'name'</span>);</span><br><span class="line">    <span class="comment">// 通过req.param()取到的值都是字符串，而limit()需要一个数字作为参数</span></span><br><span class="line">  <span class="keyword">let</span>  pageSize = <span class="built_in">parseInt</span>(req.param(<span class="string">'pageSize'</span>));</span><br><span class="line">  <span class="keyword">let</span>  pageNumber = <span class="built_in">parseInt</span>(req.param(<span class="string">'pageNumber'</span>));</span><br><span class="line">  <span class="keyword">let</span> skip = (pageNumber<span class="number">-1</span>)*pageSize; <span class="comment">// 跳过几条</span></span><br><span class="line">  <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(name,<span class="string">'i'</span>); <span class="comment">// 在nodejs中，必须要使用RegExp，来构建正则表达式对象。</span></span><br><span class="line">  Student.findOne(&#123;<span class="string">"userName"</span>:userName&#125;,(err,doc)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">      res.json(&#123;</span><br><span class="line">        status: <span class="string">'1'</span>,</span><br><span class="line">        msg: err.message</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(doc) &#123;</span><br><span class="line">      <span class="comment">// 关键在这里</span></span><br><span class="line">        Paper.find(&#123;<span class="attr">startTime</span>:&#123;<span class="attr">$exists</span>:<span class="literal">true</span>&#125;,<span class="attr">name</span>:reg&#125;).skip(skip).limit(pageSize).populate(&#123;<span class="attr">path</span>:<span class="string">'_questions'</span>&#125;).exec(<span class="function">(<span class="params">err1,doc1</span>)=&gt;</span>&#123;</span><br><span class="line">        ....  </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="还有一种模糊分页查询–查询关联文档再模糊分页查询"><a href="#还有一种模糊分页查询–查询关联文档再模糊分页查询" class="headerlink" title="还有一种模糊分页查询–查询关联文档再模糊分页查询"></a>还有一种模糊分页查询–查询关联文档再模糊分页查询</h5><p><img src="https://i.imgur.com/T5uaimo.png" alt></p><blockquote><p>先通过<code>populate</code>查询除关联文档，在模糊分页查询</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">exports.getPapers = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// console.log(req.session.userName);</span></span><br><span class="line">  <span class="keyword">let</span> name = req.param(<span class="string">'name'</span>),</span><br><span class="line">    <span class="comment">// 通过req.param()取到的值都是字符串，而limit()需要一个数字作为参数</span></span><br><span class="line">    pageSize = <span class="built_in">parseInt</span>(req.param(<span class="string">'pageSize'</span>)),</span><br><span class="line">    pageNumber = <span class="built_in">parseInt</span>(req.param(<span class="string">'pageNumber'</span>)),</span><br><span class="line">    userName = req.session.userName;</span><br><span class="line">  <span class="keyword">let</span> skip = (pageNumber<span class="number">-1</span>)*pageSize; <span class="comment">// 跳过几条</span></span><br><span class="line">  <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(name,<span class="string">'i'</span>); <span class="comment">// 在nodejs中，必须要使用RegExp，来构建正则表达式对象。</span></span><br><span class="line">  <span class="keyword">let</span> params = &#123;</span><br><span class="line">    name: reg</span><br><span class="line">  &#125;;</span><br><span class="line">  Teacher.findOne(&#123;<span class="string">'userName'</span>:userName&#125;).populate(&#123;<span class="attr">path</span>:<span class="string">'_papers'</span>,<span class="attr">match</span>:&#123;<span class="attr">name</span>: reg&#125;,<span class="attr">options</span>:&#123;<span class="attr">skip</span>:skip,<span class="attr">limit</span>:pageSize&#125;&#125;)</span><br><span class="line">    .exec(<span class="function">(<span class="params">err, doc</span>) =&gt;</span> &#123;</span><br><span class="line">      ....</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="populate"><a href="#populate" class="headerlink" title="populate"></a>populate</h5><p>mongodb本来就是非关系型的数据库，但是有很多时候不同的集合直接是需要关联的，这是就用到了mongoose提供的<code>populate</code></p><p>直接看图，不同集合直接的关联，用的就是<code>_id</code>,比如下图中，学生参加的考试，关联了试卷，试卷里面又关联了题目</p><p><img src="https://i.imgur.com/n4IthLV.png" alt></p><p>怎么查询呢：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student.findOne(&#123;&#125;).populate(&#123;<span class="attr">path</span>:<span class="string">'exams._paper'</span>&#125;).exec(....)</span><br></pre></td></tr></table></figure><p>更多的可以看看我项目中的实际代码都在<code>server/controllers</code>下面</p><h5 id="关联集合的新增"><a href="#关联集合的新增" class="headerlink" title="关联集合的新增"></a>关联集合的新增</h5><p>在系统中，教师可以增加试卷，这个时候我就不知道该怎么保存前台传过来的数据。数据中既有试卷的信息，也有很多题目。题目都属于该试卷，改试卷又属于当前登录系统的老师（即创建试卷的老师）。<br>怎么才能让试卷、教师、问题关联起来啊，ref存的是_id,然而这些新增的数据，是保存之后才有_id的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">exports.savePaper = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> paperForm = req.body.paperForm;</span><br><span class="line">  <span class="keyword">let</span> userName = req.session.userName;</span><br><span class="line">  <span class="keyword">if</span>(paperForm == &#123;&#125;)&#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      status:<span class="string">'5'</span>,</span><br><span class="line">      msg: <span class="string">'数据不能为空'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 第一步查找当前登录的教师</span></span><br><span class="line">  Teacher.findOne(&#123;<span class="string">"userName"</span>: userName&#125;, (err,doc)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (doc) &#123;</span><br><span class="line">        <span class="keyword">let</span> paperData = &#123;</span><br><span class="line">          name:paperForm.name,</span><br><span class="line">          totalPoints:paperForm.totalPoints,</span><br><span class="line">          time:paperForm.time,</span><br><span class="line">          _teacher: doc._id, <span class="comment">// 这里就可以拿到教师的_id</span></span><br><span class="line">          _questions: [],</span><br><span class="line">          examnum:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第二步创建试卷</span></span><br><span class="line">        Paper.create(paperData,<span class="function"><span class="keyword">function</span> (<span class="params">err1,doc1</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (err1) &#123;</span><br><span class="line">            ...</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (doc1) &#123;</span><br><span class="line">              doc._papers.push(doc1._id); <span class="comment">// 教师中添加该试卷的_id</span></span><br><span class="line">              doc.save(); <span class="comment">// 很重要 不save则没有数据</span></span><br><span class="line">              </span><br><span class="line">              <span class="comment">// 第三步 创建问题</span></span><br><span class="line">              paperForm._questions.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                item._papers = [];</span><br><span class="line">                item._papers.push(doc1._id); <span class="comment">// 试卷中存入试卷的_id，因为此时已经创建了试卷，所以可以拿到_id</span></span><br><span class="line">                item._teacher = doc._id;  <span class="comment">// 试卷中存入教师的_id</span></span><br><span class="line">              &#125;)</span><br><span class="line">              Question.create(paperForm._questions,<span class="function"><span class="keyword">function</span> (<span class="params">err2,doc2</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err2) &#123;</span><br><span class="line">                  ...</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">if</span> (doc2) &#123;</span><br><span class="line">                    doc2.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                      doc1._questions.push(item._id); <span class="comment">// 当问题创建成功，则在试卷中存入问题的_id</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                    doc1.save();</span><br><span class="line">                    res.json(&#123;</span><br><span class="line">                      status:<span class="string">'0'</span>,</span><br><span class="line">                      msg: <span class="string">'success'</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ...</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              ...</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">       ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="关联集合的删除—删除试卷"><a href="#关联集合的删除—删除试卷" class="headerlink" title="关联集合的删除—删除试卷"></a>关联集合的删除—删除试卷</h5><blockquote><p>删除某一个试卷，既要删除教师中对应的试卷_id,也要删除问题中对应的试卷_id<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除试卷</span></span><br><span class="line">exports.deletePaper = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> id = req.body.id;</span><br><span class="line">  <span class="keyword">let</span> userName = req.session.userName;</span><br><span class="line">  <span class="comment">// 第一步 删除教师中的_id _papers是一个数组，所以用到了`$pull`</span></span><br><span class="line">  Teacher.update(&#123;<span class="string">"userName"</span>:userName&#125;,&#123;<span class="string">'$pull'</span>:&#123;<span class="string">'_papers'</span>:&#123;<span class="attr">$in</span>:id&#125;&#125;&#125;, (err,doc)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.json(&#123;</span><br><span class="line">        status:<span class="string">'1'</span>,</span><br><span class="line">        msg: err.message</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (doc) &#123;</span><br><span class="line">        <span class="comment">// 第二步  删除试卷 即 移除一个文档</span></span><br><span class="line">        Paper.remove(&#123;<span class="string">"_id"</span>:&#123;<span class="attr">$in</span>:id&#125;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err1,doc1</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(err1) &#123;</span><br><span class="line">            res.json(&#123;</span><br><span class="line">              status:<span class="string">'1'</span>,</span><br><span class="line">              msg: err1.message</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (doc1) &#123;</span><br><span class="line">            <span class="comment">// 第三步  updateMany删除多个问题中的_id 这里并没有删除试卷中包含的问题，是为了以后题库做准备</span></span><br><span class="line">              Question.updateMany(&#123;<span class="string">'_papers'</span>:&#123;<span class="attr">$in</span>:id&#125;&#125;,&#123;<span class="string">'$pull'</span>:&#123;<span class="string">'_papers'</span>:&#123;<span class="attr">$in</span>:id&#125;&#125;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err2,doc2</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(err2)&#123;</span><br><span class="line">                  ...</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">if</span> (doc2)&#123;</span><br><span class="line">                    ...</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              ...</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><h5 id="关联集合多条数据的更新–修改试卷"><a href="#关联集合多条数据的更新–修改试卷" class="headerlink" title="关联集合多条数据的更新–修改试卷"></a>关联集合多条数据的更新–修改试卷</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改试卷-修改试卷</span></span><br><span class="line">exports.updatePaper = <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> userName = req.session.userName;</span><br><span class="line">  <span class="keyword">let</span> params = req.body.params;</span><br><span class="line">  <span class="keyword">let</span> paperParams = &#123; <span class="comment">// 试卷需要更新的字段</span></span><br><span class="line">    name: params.name,</span><br><span class="line">    totalPoints: params.totalPoints,</span><br><span class="line">    time: params.time</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> updateQuestion = []; <span class="comment">// 需要更新的题目</span></span><br><span class="line">  <span class="keyword">let</span> addQuestion = []; <span class="comment">// 需要新增的题目</span></span><br><span class="line">  params._questions.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(item._id) &#123;  <span class="comment">// 通过判断是否有_id区分已有的或者是新增的</span></span><br><span class="line">      updateQuestion.push(item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      addQuestion.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  Teacher.findOne(&#123;<span class="string">'userName'</span>:userName&#125;,(err,doc)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (doc) &#123;</span><br><span class="line">        Paper.findOneAndUpdate(&#123;<span class="string">"_id"</span>:params._id&#125;,paperParams,(err1,doc1) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span>(err1) &#123;</span><br><span class="line">            ...</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(doc1)&#123;</span><br><span class="line">              updateQuestion.forEach(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123; <span class="comment">// 循环更新题目，好像很傻的方法，可能有更好的办法</span></span><br><span class="line">                Question.update(&#123;<span class="string">"_id"</span>:item._id&#125;,item,(err2,doc2)=&gt;&#123;</span><br><span class="line">                  <span class="keyword">if</span>(err2)&#123;</span><br><span class="line">                    res.json(&#123;</span><br><span class="line">                      status:<span class="string">'1'</span>,</span><br><span class="line">                      msg: err2.message</span><br><span class="line">                    &#125;)</span><br><span class="line">                  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(doc2)&#123;</span><br><span class="line">                      <span class="keyword">if</span>(index == (updateQuestion.length<span class="number">-1</span>))&#123;</span><br><span class="line">                        <span class="keyword">if</span> (addQuestion.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                          addQuestion.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                            item._papers = [];</span><br><span class="line">                            item._papers.push(doc1._id);</span><br><span class="line">                            item._teacher = doc._id;</span><br><span class="line">                          &#125;)</span><br><span class="line">                          <span class="comment">// 创建新增题目</span></span><br><span class="line">                          Question.create(addQuestion,(err3,doc3) =&gt; &#123;</span><br><span class="line">                            <span class="keyword">if</span>(err3) &#123;</span><br><span class="line">                             ...</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                              <span class="keyword">if</span>(doc3) &#123;</span><br><span class="line">                                doc3.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                                  doc1._questions.push(item._id); <span class="comment">// 还要将新增的题目关联到试卷当中</span></span><br><span class="line">                                &#125;)</span><br><span class="line"></span><br><span class="line">                                doc1.save(); <span class="comment">// 很重要 不save则没有数据</span></span><br><span class="line">                                res.json(&#123;</span><br><span class="line">                                  status:<span class="string">'0'</span>,</span><br><span class="line">                                  msg: <span class="string">'success'</span></span><br><span class="line">                                &#125;)</span><br><span class="line">             <span class="comment">// .......................判断太长省略........................</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="更新子文档数组–阅卷打分"><a href="#更新子文档数组–阅卷打分" class="headerlink" title="更新子文档数组–阅卷打分"></a>更新子文档数组–阅卷打分</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打分提交</span></span><br><span class="line">exports.submitScore = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name = req.param(<span class="string">'userName'</span>),</span><br><span class="line">    date = req.param(<span class="string">'date'</span>),</span><br><span class="line">    score = req.param(<span class="string">'score'</span>) - <span class="number">0</span>,</span><br><span class="line">    userName = req.session.userName;</span><br><span class="line">  Teacher.findOne(&#123;<span class="string">'userName'</span>:userName&#125;,(err,doc) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(doc) &#123;</span><br><span class="line">        Student.update(&#123;<span class="string">"userName"</span>:name,<span class="string">"exams.date"</span>:date&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="string">"exams.$.score"</span>:score,<span class="string">"exams.$.isSure"</span>:<span class="literal">true</span>&#125;&#125;,(err1, doc1) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span>(err1) &#123;</span><br><span class="line">            ...</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(doc1) &#123;</span><br><span class="line">              ...</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              ...</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="md5加密"><a href="#md5加密" class="headerlink" title="md5加密"></a>md5加密</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//student.js</span></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mdHash = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// hash 的定义要写在这个方法内，不然会报错Digest already called ****</span></span><br><span class="line">  <span class="keyword">const</span> hash = crypto.createHash(<span class="string">'md5'</span>);</span><br><span class="line">  <span class="keyword">return</span> hash.update(data).digest(<span class="string">'hex'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="comment">//注册</span></span><br><span class="line">exports.register = <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> userInfo = req.body.userInfo;</span><br><span class="line">  <span class="comment">//获取到前台传过来的密码，先加密再存储</span></span><br><span class="line">  userInfo.passWord = mdHash(userInfo.passWord);</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      这是我毕业项目，从0到1，前后台独立开发完成。功能不多，在此记录,温故而知新！
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="express" scheme="http://yoursite.com/tags/express/"/>
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
      <category term="elementUI" scheme="http://yoursite.com/tags/elementUI/"/>
    
  </entry>
  
  <entry>
    <title>win10下安装配置mongodb</title>
    <link href="http://yoursite.com/2018/05/05/win-mongodb/"/>
    <id>http://yoursite.com/2018/05/05/win-mongodb/</id>
    <published>2018-05-05T06:59:28.000Z</published>
    <updated>2019-05-05T08:13:43.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载Mongodb"><a href="#下载Mongodb" class="headerlink" title="下载Mongodb"></a>下载Mongodb</h2><p><a href="http://dl.mongodb.org/dl/win32/x86_64" target="_blank" rel="noopener">各个版本下载地址</a><br><img src="https://i.imgur.com/Oh0ZwCV.png" alt></p><h2 id="安装Mongodb"><a href="#安装Mongodb" class="headerlink" title="安装Mongodb"></a>安装Mongodb</h2><p>一路下一步就行了<br><img src="https://i.imgur.com/evefSbo.png" alt></p><h3 id="配置Mongodb"><a href="#配置Mongodb" class="headerlink" title="配置Mongodb"></a>配置Mongodb</h3><ol><li><p>在c:\MongoDB（可随意起）下面建一个data文件夹 c:\MongoDB\data</p></li><li><p>在c:\MongoDB（可随意起）下面建一个logs文件夹 c:\MongoDB\logs ，在里面建一个文件mongo.log</p></li><li><p>在c:\MongoDB（可随意起）下面建一个etc(随意起，放配置文件)文件夹 c:\MongoDB\etc ,在里面建一个文件mongo.conf</p></li></ol><p>打开mongo.conf文件，修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#数据库路径</span><br><span class="line">dbpath=c:\MongoDB\data\</span><br><span class="line">#日志输出文件路径</span><br><span class="line">logpath=c:\MongoDB\logs\mongodb.log</span><br><span class="line">#错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件</span><br><span class="line">logappend=true</span><br><span class="line">#启用日志文件，默认启用</span><br><span class="line">journal=true</span><br><span class="line">#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span><br><span class="line">quiet=false</span><br><span class="line">#端口号 默认为27017</span><br><span class="line">port=27017</span><br></pre></td></tr></table></figure></p><h3 id="运行mongodb"><a href="#运行mongodb" class="headerlink" title="运行mongodb"></a>运行mongodb</h3><p><img src="https://i.imgur.com/sRNRLpT.png" alt></p><h3 id="配置mongodb服务"><a href="#配置mongodb服务" class="headerlink" title="配置mongodb服务"></a>配置mongodb服务</h3><p><code>mongod --config c:\MongoDB\etc\mongo.conf --install --serviceName &quot;MongoDB&quot;</code></p><p><img src="https://i.imgur.com/kFFf50n.png" alt></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p><img src="https://i.imgur.com/JlL9IiO.png" alt></p><h2 id="下载安装Robo-3T"><a href="#下载安装Robo-3T" class="headerlink" title="下载安装Robo 3T"></a>下载安装Robo 3T</h2><p>下载一个图形化界面工具<br><img src="https://i.imgur.com/EST4sUn.png" alt></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>创建了一个前端学习交流群，感兴趣的朋友，一起来嗨呀！<br><img src="https://i.imgur.com/qbcaSEh.png" alt></p>]]></content>
    
    <summary type="html">
    
      win10下安装配置mongodb
    
    </summary>
    
      <category term="mongodb" scheme="http://yoursite.com/categories/mongodb/"/>
    
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
  </entry>
  
</feed>
