(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{536:function(t,a,s){"use strict";s.r(a);var n=s(2),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"冒泡算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#冒泡算法"}},[t._v("#")]),t._v(" 冒泡算法")]),t._v(" "),s("blockquote",[s("p",[t._v("原理：从第一个元素开始，往后比较，遇到自己小的元素就交换位置")])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://p9.pstatp.com/large/31f700004cd560512e10",alt:"此处输入图片的描述"}}),t._v("\n代码实现：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 冒泡算法\nfunction bubbleSort(arr) {\n\tvar len = arr.length;\n\tfor (var i = 0; i < len; i++) {\n\t\tfor (var j = 0; j < len-1-i; j++) {\n\t\t// 为什么要减一，数组从0开始，先取第一个与第二个比，再将较大值与第三个比，一直比到最后一个，再拿第二个值与第三个比……(外层循环一次，内层循环多次)\n\t\t\tif (arr[j] > arr[j+1]) { // 比较相邻两个值的大小\n\t\t\t\tvar temp = arr[j+1]; // 临时变量存储arr[j+1]的值\n\t\t\t\tarr[j+1] = arr[j]; // 将arr[j]的值赋值给arr[j+1]，即把较大值往后放\n\t\t\t\tarr[j] = temp; // 又将temp的值赋值给arr[j]，即将较小值往前放\n\t\t\t}\n\t\t}\n\t}\n\treturn arr;\n}\nvar arr = [2, 3, 4, 5, 6, 1, 90, 16, 35, 7];\nconsole.log(bubbleSort(arr)); // [1, 2, 3, 4, 5, 6, 7, 16, 35, 90]\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br")])]),s("h2",{attrs:{id:"插入排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插入排序"}},[t._v("#")]),t._v(" 插入排序")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://p1.pstatp.com/large/32040001405eee3b0feb",alt:"此处输入图片的描述"}}),t._v("\nGif图：\n"),s("img",{attrs:{src:"http://p3.pstatp.com/large/31f30005215262ad5c2c",alt:"此处输入图片的描述"}})]),t._v(" "),s("blockquote",[s("p",[t._v("特点：\n插入排序把要排序的数组分成两部分：\n第一部分包含了这个数组的所有元素，但将第一个元素除外（让数组多一个空间才有插入的位置）。\n第二部分就是包含了这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分\n比冒泡排序快一点")])]),t._v(" "),s("p",[t._v("代码实现：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 插入排序\nfunction insertSort(arr) {\n\t// 从第二个元素开始，因为要留一个坑\n\tfor (var i = 1; i < arr.length; i++) {\n\t\tvar x = arr[i]; // 现将arr[i]的值存下来\n\t\tfor (var j = i-1; arr[j] > x; j--) {\n\t\t\tarr[j+1] = arr[j]; // i=3时 [2, 3, 6, 6, ...]\n\t\t}\n\t\tif (arr[j+1] != x) {\n\t\t\tarr[j+1] = x; // i=3时 j=2 [2, 3, 4, 6, ...]\n\t\t}\n\t}\n\treturn arr;\n}\nvar arr = [2, 3, 6, 4, 2, 1, 90, 100, 20, 5];\nconsole.log(insertSort(arr)); //[1, 2, 2, 3, 4, 5, 6, 20, 90, 100]\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("h2",{attrs:{id:"希尔排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#希尔排序"}},[t._v("#")]),t._v(" 希尔排序")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://p9.pstatp.com/large/31f50001fa47898d558e",alt:"此处输入图片的描述"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"http://p3.pstatp.com/large/31f7000052f9c0b67e86",alt:"此处输入图片的描述"}})]),t._v(" "),s("p",[t._v("代码实现：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 希尔排序\nfunction shellSort(arr) {\n\tvar gap = Math.floor(arr.length / 2);\n\twhile (gap > 0) {\n\t\tfor (var i = gap; i < arr.length; i++) {\n\t\t\ttemp = arr[i];\n\t\t\tfor (var j = i; j >= gap && arr[j-gap] > temp; j -= gap) {\n\t\t\t\tarr[j] = arr[j - gap];\n\t\t\t}\n\t\t\tarr[j] = temp;\n\t\t}\n\t\tgap = Math.floor(gap / 2);\n\t}\n\treturn arr;\n}\nvar arr = [2, 3, 6, 4, 2, 1, 90, 100, 20, 5];\nconsole.log(shellSort(arr)); //[1, 2, 2, 3, 4, 5, 6, 20, 90, 100]\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br")])]),s("h2",{attrs:{id:"快速排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速排序"}},[t._v("#")]),t._v(" 快速排序")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://p1.pstatp.com/large/3202000045b4fa206217",alt:"此处输入图片的描述"}}),t._v('\n3、对"基准"左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。\n'),s("img",{attrs:{src:"http://p3.pstatp.com/large/320b0000495f2a5aceaa",alt:"此处输入图片的描述"}})]),t._v(" "),s("blockquote",[s("p",[t._v("特点：速度最快。和归并排序不同的是，归并排序是先分为两组再继续排，而快速排序是边分边排")])]),t._v(" "),s("p",[t._v("代码实现：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 大致分三步：\n// 1、找基准（一般以中间项为基准）\n// 2、遍历数组，小于基准的放在left，大于基准的放在right\n// 3、递归\nfunction quickSort(arr) {\n \t// 如果数组<=1，则直接返回\n \tif (arr.length <= 1) {\n \t\treturn arr;\n \t}\n \tvar pivotIndex = Math.floor(arr.length / 2);\n \t// 找基准，并把基准从原数组删除\n \tvar pivot = arr.splice(pivotIndex, 1)[0];\n \t// 定义左右数组\n \tvar left = [];\n \tvar right = [];\n \t// 比基准小的放在left，比基准大的放在right\n \tfor (var i = 0; i < arr.length; i++) {\n \t\tif(arr[i] <= pivot) {\n \t\t\tleft.push(arr[i]);\n \t\t} else {\n \t\t\tright.push(arr[i]);\n \t\t}\n \t}\n \t// 递归\n \treturn quickSort(left).concat([pivot], quickSort(right));\n} \nvar arr = [2, 3, 6, 4, 2, 1, 90, 100, 20, 5];\nconsole.log(quickSort(arr)); //[1, 2, 2, 3, 4, 5, 6, 20, 90, 100]\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br")])]),s("h2",{attrs:{id:"奇偶排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#奇偶排序"}},[t._v("#")]),t._v(" 奇偶排序")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://p3.pstatp.com/large/320200004c84b8c20819",alt:"此处输入图片的描述"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"http://p3.pstatp.com/large/320200004d44a4a1bb61",alt:"此处输入图片的描述"}})]),t._v(" "),s("p",[t._v("代码实现：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//奇偶排序\nfunction oddEvenSort(arr) {\n\t// swaped用来控制循环是否要继续，如果左边的都比右边的小，则退出循环，返回排好的数组\n\tvar swaped = true;\n\tvar k = 0;\n\twhile(swaped) {\n\t\tif(k > 0) {\n\t\t\tswaped = false;\n\t\t}\n\t\tfor (var i = k;i < arr.length-1; i += 2) {\n\t\t\tif(arr[i] > arr[i+1]) {\n\t\t\t\t// 如果左边的数字比右边的大，两边交换位置\n\t\t\t\tarr[i] = [arr[i+1], arr[i+1] = arr[i]][0];\n\t\t\t\tswaped = true;\n\t\t\t}\n\t\t}\n\t\tk = [1, 0][k]; // 奇偶数之间的转换\n\t}\n\treturn arr;\n}\nvar arr = [2, 3, 6, 4, 2, 1, 90, 100, 20, 5];\nconsole.log(oddEvenSort(arr)); // [1, 2, 3, 4, 5, 6, 20, 90, 100]\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);